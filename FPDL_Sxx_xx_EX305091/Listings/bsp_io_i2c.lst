C51 COMPILER V9.60.0.0   BSP_IO_I2C                                                        05/09/2023 14:53:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BSP_IO_I2C
OBJECT MODULE PLACED IN .\Objects\bsp_io_i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Drivers\Physical\bsp_io_i2c.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR
                    -(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;
                    -.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\bsp_io_i2c.lst) TABS(2) OBJECT
                    -(.\Objects\bsp_io_i2c.obj)

line level    source

   1          #include "bsp_io_i2c.h"
   2          #include "Basic_Function.h"
   3          
   4          #define Hardware_Delay1us Soft_Delay1us()
   5          #define Hardware_Delay5us Soft_Delay2us()
   6          #define Hardware_Delay9us Soft_Delay3us()
   7          #define Hardware_Delay10us Soft_Delay4us()
   8          #define Hardware_Delay20us Soft_Delay4us();Soft_Delay4us()
   9          
  10          
  11          void IIC_START()
  12          {
  13   1        IO_IIC_SCL_H;
  14   1        IO_IIC_SDA_H;
  15   1        Hardware_Delay10us;
  16   1        IO_IIC_SDA_L;
  17   1        Hardware_Delay5us;
  18   1        IO_IIC_SCL_L;
  19   1        Hardware_Delay5us;
  20   1      }
  21          void IIC_STOP()
  22          {
  23   1        IO_IIC_SDA_L;
  24   1        IO_IIC_SCL_L;
  25   1        Hardware_Delay5us;
  26   1        IO_IIC_SDA_L;
  27   1        IO_IIC_SCL_H;
  28   1        Hardware_Delay5us;
  29   1        IO_IIC_SDA_H;
  30   1        Hardware_Delay5us;
  31   1      }
  32          uint8_t IIC_Wait_ACK()
  33          {
  34   1        uint16_t WaitTime = 0;
  35   1        IO_IIC_SDA_H;//SDAÊäÈë
  36   1        Hardware_Delay10us;
  37   1        IO_IIC_SCL_H;
  38   1        Hardware_Delay10us;
  39   1        while(SDA_IO==1)
  40   1        {
  41   2          WaitTime++;
  42   2          if(WaitTime>250)
  43   2          {
  44   3            IIC_STOP();
  45   3            return 0;
  46   3          }
  47   2        }
  48   1        IO_IIC_SCL_L;
  49   1      
  50   1        return 1;
  51   1      }
  52          void IIC_ACK()
C51 COMPILER V9.60.0.0   BSP_IO_I2C                                                        05/09/2023 14:53:12 PAGE 2   

  53          {
  54   1        IO_IIC_SCL_L;
  55   1        IO_IIC_SDA_L;
  56   1        Hardware_Delay10us;
  57   1        IO_IIC_SCL_H;
  58   1        Hardware_Delay10us;
  59   1        IO_IIC_SCL_L;
  60   1        IO_IIC_SDA_H;
  61   1        Hardware_Delay1us;
  62   1      }
  63          void IIC_NACK()
  64          { 
  65   1        IO_IIC_SCL_L;
  66   1        IO_IIC_SDA_H;
  67   1        Hardware_Delay10us;
  68   1        IO_IIC_SCL_H;
  69   1        Hardware_Delay10us;
  70   1        IO_IIC_SCL_L;
  71   1        IO_IIC_SDA_H;
  72   1        Hardware_Delay1us;
  73   1      }
  74          void IIC_SEND_8Bits(uint8_t IIC_Data_8b)
  75          {
  76   1        uint8_t t;
  77   1        for(t=0;t<8;t++)
  78   1        {
  79   2          IO_IIC_SCL_L;
  80   2          Hardware_Delay1us;
  81   2          if(IIC_Data_8b&0x80)
  82   2          {
  83   3            IO_IIC_SDA_H;
  84   3          }
  85   2          else
  86   2          {
  87   3            IO_IIC_SDA_L;
  88   3          }
  89   2          IIC_Data_8b<<=1;
  90   2          Hardware_Delay9us;
  91   2          IO_IIC_SCL_H;
  92   2          Hardware_Delay10us;
  93   2          IO_IIC_SCL_L;
  94   2        }
  95   1      }
  96          uint8_t IIC_READ_8Bits()
  97          {
  98   1        uint8_t i;
  99   1        uint8_t receive8Bits = 0x00;
 100   1        IO_IIC_SDA_H;//SDAÊäÈë
 101   1        
 102   1        for(i=0;i<8;i++)
 103   1        {
 104   2          IO_IIC_SCL_L;
 105   2          Hardware_Delay10us;
 106   2          IO_IIC_SCL_H;
 107   2          receive8Bits = (receive8Bits<<1)|SDA_IO;
 108   2          Hardware_Delay10us;
 109   2        }
 110   1        IO_IIC_SCL_L;
 111   1        return receive8Bits;
 112   1      }
 113          uint8_t IIC_READ(uint8_t send1,uint8_t send2,uint8_t send3,uint8_t *Pdata,uint16_t Num)
 114          {
C51 COMPILER V9.60.0.0   BSP_IO_I2C                                                        05/09/2023 14:53:12 PAGE 3   

 115   1        uint8_t t;
 116   1            IIC_START();
 117   1            IIC_SEND_8Bits(send1);
 118   1            if(IIC_Wait_ACK()==0)return 0;
 119   1            IIC_SEND_8Bits(send2);
 120   1            if(IIC_Wait_ACK()==0)return 0;  
 121   1            Hardware_Delay20us;
 122   1            IO_IIC_SCL_H;
 123   1            Hardware_Delay20us;
 124   1            IO_IIC_SDA_L;
 125   1            Hardware_Delay5us;
 126   1            IO_IIC_SCL_L;
 127   1            Hardware_Delay10us; 
 128   1            IIC_SEND_8Bits(send3);
 129   1            if(IIC_Wait_ACK()==0)return 0;
 130   1            IO_IIC_SDA_H;
 131   1           for(t=0;t<Num;t++)
 132   1           {
 133   2            *(Pdata + t)=IIC_READ_8Bits();
 134   2            if(t==(Num-1))
 135   2            {
 136   3              IIC_NACK();
 137   3            }
 138   2            else
 139   2            {
 140   3              IIC_ACK();
 141   3            }   
 142   2           }
 143   1            Hardware_Delay20us;
 144   1            IIC_STOP();
 145   1           return 1;
 146   1      }
 147          /*void IIC_READ2(uint8_t send1,uint8_t send2,uint8_t send3,uint8_t send4,uint8_t *Pdata,uint16_t Num)
 148          {
 149            uint8_t t;
 150                IIC_START();
 151                IIC_SEND_8Bits(send1);
 152                if(IIC_Wait_ACK()==0)return;
 153                IIC_SEND_8Bits(send2);
 154                if(IIC_Wait_ACK()==0)return;  
 155                IIC_SEND_8Bits(send3);
 156                if(IIC_Wait_ACK()==0)return;  
 157                Hardware_Delay20us;
 158                IO_IIC_SCL_H;
 159                Hardware_Delay20us;
 160                IO_IIC_SDA_L;
 161                Hardware_Delay5us;
 162                IO_IIC_SCL_L;
 163                Hardware_Delay10us;   
 164                IIC_SEND_8Bits(send4);
 165                if(IIC_Wait_ACK()==0)return;
 166                IO_IIC_SDA_H;
 167               for(t=0;t<Num;t++)
 168               {
 169                *(Pdata + t)=IIC_READ_8Bits();
 170                if(t==(Num-1))
 171                {
 172                  IIC_NACK();
 173                }
 174                else
 175                {
 176                  IIC_ACK();
C51 COMPILER V9.60.0.0   BSP_IO_I2C                                                        05/09/2023 14:53:12 PAGE 4   

 177                }   
 178               }
 179                Hardware_Delay20us;
 180                IIC_STOP();
 181          }*/
 182          uint8_t IIC_SEND(uint8_t send1,uint8_t send2,uint8_t *_data,uint16_t Num)
 183          {
 184   1        uint8_t t;
 185   1        IIC_START();
 186   1        IIC_SEND_8Bits(send1);
 187   1        if(IIC_Wait_ACK()==0)return 0;
 188   1        IIC_SEND_8Bits(send2);
 189   1        if(IIC_Wait_ACK()==0)return 0;  
 190   1        for(t=0;t<Num;t++)
 191   1        {
 192   2          IIC_SEND_8Bits(*_data);
 193   2          _data++;
 194   2          if(IIC_Wait_ACK()==0)return 0;
 195   2        }
 196   1        IIC_STOP(); 
 197   1        return 1;
 198   1      }
 199          /*
 200          uint8_t  IIC_SEND2(uint8_t send1,uint8_t send2,uint8_t send3,uint8_t _data)
 201          {
 202            IIC_START();
 203            IIC_SEND_8Bits(send1);
 204            if(IIC_Wait_ACK()==0)return 0;
 205            IIC_SEND_8Bits(send2);
 206            if(IIC_Wait_ACK()==0)return 0;
 207            IIC_SEND_8Bits(send3);
 208            if(IIC_Wait_ACK()==0)return 0;  
 209            IIC_SEND_8Bits(_data);
 210            if(IIC_Wait_ACK()==0)return 0;
 211            IIC_STOP(); 
 212            return 1;
 213          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    611    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
