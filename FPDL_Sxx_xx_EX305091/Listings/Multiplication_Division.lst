C51 COMPILER V9.60.0.0   MULTIPLICATION_DIVISION                                           05/09/2023 14:53:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MULTIPLICATION_DIVISION
OBJECT MODULE PLACED IN .\Objects\Multiplication_Division.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Drivers\Lib\c\Multiplication_Division.c LARGE OMF2 OPTIMIZE(9,SPEED) BRO
                    -WSE INCDIR(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers
                    -\Protocol;.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\Multiplication_Divis
                    -ion.lst) TABS(2) OBJECT(.\Objects\Multiplication_Division.obj)

line level    source

   1          #include "Function_Init.H"
   2          
   3          //unsigned long product = 0;//乘积
   4          unsigned long quotient = 0;//商
   5          unsigned int remainder = 0;//余数
   6          
   7          typedef struct      
   8          {
   9            unsigned char MDU_EXA3Reg;   //EXA3寄存器
  10            unsigned char MDU_EXA2Reg;   //EXA2寄存器
  11            unsigned char MDU_EXA1Reg;   //EXA1寄存器
  12            unsigned char MDU_EXA0Reg;   //EXA0寄存器
  13          } MDU_EXAxReg_Typedef;  
  14          
  15          typedef union
  16          {
  17            MDU_EXAxReg_Typedef MDU_EXAxReg;
  18            unsigned long MDU_Temp;
  19          } MDU_Temp_Union;     
  20          //Result_union result;
  21          
  22          unsigned long Multiplication(unsigned int faciend, unsigned int Multiplier);
  23          void Division(unsigned long dividend,unsigned int divisor);
  24          
  25          void  Multiplier_Divider_Test()
  26          {
  27   1        while(1)
  28   1        {
  29   2          Multiplication(15,16);
  30   2      //    if(product == 240)
  31   2      //    {
  32   2      //      //P03 = ~P03;
  33   2      //    }
  34   2          Division(16,5);
  35   2      //    if((quotient == 3) && (remainder == 1))
  36   2      //    {
  37   2      //      //P04 = ~P04;
  38   2      //    }
  39   2        }
  40   1      }
  41          
  42          /****************************************************
  43          *函数名称：Multiplication(unsigned int faciend, unsigned int Multiplier)
  44          *函数功能：乘法运算
  45          *入口参数：faciend，Multiplier
  46          *出口参数：product
  47          ****************************************************/
  48          unsigned long Multiplication(unsigned int faciend, unsigned int Multiplier)
  49          {
  50   1        unsigned long result;
  51   1        
  52   1        MDU_Temp_Union MDU_ProductTemp;
C51 COMPILER V9.60.0.0   MULTIPLICATION_DIVISION                                           05/09/2023 14:53:11 PAGE 2   

  53   1          OPERCON &= ~0x40;   //选择乘法
  54   1          
  55   1        EXA0 = faciend;
  56   1        EXA1 = faciend>>8;
  57   1        EXBL = Multiplier;
  58   1        EXBH = Multiplier>>8;
  59   1      
  60   1        OPERCON |= 0x80;      //开始计算
  61   1        while(OPERCON & 0x80);      //等待计算完成
  62   1      
  63   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA0Reg = EXA0;
  64   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA1Reg = EXA1;
  65   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA2Reg = EXA2;
  66   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA3Reg = EXA3;
  67   1        
  68   1        result =  MDU_ProductTemp.MDU_Temp;     //获取乘积
  69   1        
  70   1        return result;
  71   1      } 
  72          
  73          /****************************************************
  74          *函数名称：Division(unsigned long dividend,unsigned int divisor)
  75          *函数功能：除法运算
  76          *入口参数：dividend，divisor
  77          *出口参数：无
  78          ****************************************************/
  79          void Division(unsigned long dividend,unsigned int divisor)
  80          {
  81   1        MDU_Temp_Union MDU_ProductTemp;
  82   1        MDU_ProductTemp.MDU_Temp = dividend;
  83   1      
  84   1        OPERCON &= ~0x40;
  85   1        OPERCON |= 0x40;    //选择除法
  86   1        
  87   1        EXA0 = MDU_ProductTemp.MDU_EXAxReg.MDU_EXA0Reg;     //输入除数
  88   1        EXA1 = MDU_ProductTemp.MDU_EXAxReg.MDU_EXA1Reg;
  89   1        EXA2 = MDU_ProductTemp.MDU_EXAxReg.MDU_EXA2Reg;
  90   1        EXA3 = MDU_ProductTemp.MDU_EXAxReg.MDU_EXA3Reg;
  91   1      
  92   1        EXBL = divisor;     //输入被除数
  93   1        EXBH = divisor>>8;
  94   1      
  95   1        OPERCON |= 0xC0;      //开始计算
  96   1        while(OPERCON & 0x80);      //等待计算完成
  97   1      
  98   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA0Reg = EXA0;
  99   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA1Reg = EXA1;
 100   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA2Reg = EXA2;
 101   1        MDU_ProductTemp.MDU_EXAxReg.MDU_EXA3Reg = EXA3;
 102   1      
 103   1        remainder = EXBH*256+ EXBL;     //余数
 104   1        quotient  = MDU_ProductTemp.MDU_Temp;     //商
 105   1      }
 106          
 107          unsigned long DivisionToQuotient(unsigned long dividend,unsigned int divisor)//商
 108          {
 109   1        Division(dividend,divisor);
 110   1        return quotient;
 111   1      }
 112          
 113          unsigned int DivisionToRemainder(unsigned long dividend,unsigned int divisor)//余数
 114          {
C51 COMPILER V9.60.0.0   MULTIPLICATION_DIVISION                                           05/09/2023 14:53:11 PAGE 3   

 115   1        Division(dividend,divisor);
 116   1        return remainder;
 117   1      }
 118          
 119          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
