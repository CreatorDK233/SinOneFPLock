C51 COMPILER V9.60.0.0   BATTERY                                                           05/09/2023 14:53:13 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BATTERY
OBJECT MODULE PLACED IN .\Objects\Battery.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\ModuleLogic\Battery.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCD
                    -IR(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protoco
                    -l;.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\Battery.lst) TABS(2) OBJECT(
                    -.\Objects\Battery.obj)

line level    source

   1          //#include "Battery.h"
   2          #include "adc.h"
   3          #include "global_variable.h"
   4          #include "Project.h"
   5          
   6          #define a2d_databuffer_vbat 0
   7          
   8          #define VBAT_FULL_A2D 558     //30V, A2D = (VBAT/11/5)*1024
   9          #define VBAT_EMPTY_A2D  372     //20V, A2D = (VBAT/11/5)*1024
  10          
  11          uint16_t a2d_data[1];
  12          
  13          /* ***************************************************************************
  14          *  Battery Voltage A2D  Filter
  15          *
  16          */
  17          void HardwareBatVoltageA2dFilter(uint16_t NewA2d)
  18          {
  19   1        
  20   1        if ( NewA2d > a2d_data[a2d_databuffer_vbat] )
  21   1        {
  22   2          if ( NewA2d > (10+a2d_data[a2d_databuffer_vbat]) ){
  23   3            a2d_data[a2d_databuffer_vbat]+= 5;
  24   3          }
  25   2          else if ( NewA2d > (5+a2d_data[a2d_databuffer_vbat]) ){
  26   3            a2d_data[a2d_databuffer_vbat]+= 1;
  27   3          }
  28   2        }
  29   1        else if ( a2d_data[a2d_databuffer_vbat] > NewA2d )
  30   1        {
  31   2          if ( a2d_data[a2d_databuffer_vbat] > (NewA2d+10) ){
  32   3            a2d_data[a2d_databuffer_vbat]-= 5;
  33   3          }
  34   2          else if ( a2d_data[a2d_databuffer_vbat] > (NewA2d+5) )
  35   2          {
  36   3            a2d_data[a2d_databuffer_vbat]-= 1;
  37   3          }
  38   2        }
  39   1        
  40   1        //a2d_data[a2d_databuffer_vbat] = NewA2d;
  41   1      }
  42          
  43          void HardwareBatteryMgr_Task(void)
  44          {
  45   1        BatteryMgr.BatteryVoltage = VoltageGet(a2d_data[a2d_databuffer_vbat]);  //in 0.1v, R1=15K, R2=10K
  46   1        
  47   1        //BatteryMgr.BatteryVoltage-=4;   //Battery voltage will drop 0.3V as serial connected SS34
  48   1      
  49   1       if ( BatteryMgr.BatteryVoltage > 55 ){   
  50   2          BatteryMgr.BatteryLevel = LEVEL_4;  
  51   2        }
  52   1       #if (defined ProjectIs_BarLock_S8705) || (defined ProjectIs_BarLock_S8706)
C51 COMPILER V9.60.0.0   BATTERY                                                           05/09/2023 14:53:13 PAGE 2   

                else if ( BatteryMgr.BatteryVoltage > 50 ){   
                  BatteryMgr.BatteryLevel = LEVEL_3;  
                }
                else if ( BatteryMgr.BatteryVoltage > 45 ){   
                  BatteryMgr.BatteryLevel = LEVEL_2;  
                }
                else if ( BatteryMgr.BatteryVoltage > 43 ){   
                  BatteryMgr.BatteryLevel = LEVEL_1;
                }
                #else
  63   1        else if ( BatteryMgr.BatteryVoltage > 51 ){   
  64   2          BatteryMgr.BatteryLevel = LEVEL_3;  
  65   2        }
  66   1        else if ( BatteryMgr.BatteryVoltage > 47 ){   
  67   2          BatteryMgr.BatteryLevel = LEVEL_2;  
  68   2        }
  69   1        else if ( BatteryMgr.BatteryVoltage > 43 ){   
  70   2          BatteryMgr.BatteryLevel = LEVEL_1;
  71   2        }
  72   1        #endif
  73   1        else {    
  74   2          BatteryMgr.BatteryLevel = LEVEL_0;  
  75   2        }
  76   1                              //BatteryMgr.BatteryLevel = LEVEL_4;
  77   1        
  78   1        if ( BatteryMgr.BatteryLevel == LEVEL_0 )
  79   1        {
  80   2          if ( BatteryMgr.ProtectVoltageTriggerTimes < 3 )
  81   2          {
  82   3            BatteryMgr.ProtectVoltageTriggerTimes++;  
  83   3          }
  84   2          else{
  85   3            BatteryMgr.LowBatteryProtectionEnabled = bFALSE;
  86   3          }
  87   2        }
  88   1        else
  89   1        {
  90   2          if ( BatteryMgr.ProtectVoltageTriggerTimes > 0 )
  91   2          {
  92   3            BatteryMgr.ProtectVoltageTriggerTimes--;  
  93   3          }
  94   2          else{
  95   3            BatteryMgr.LowBatteryProtectionEnabled = bFALSE;
  96   3          }
  97   2        } 
  98   1      }
  99          
 100          
 101          /*************************************************************************
 102          *   Hardware_Task_Analog() - Acquires A/D Data, processes touch          *
 103          ************************************************************************** 
 104          *
 105          *   Enter:      nothing                     
 106          *   Calls:      Hardware_Touch_State(), Hardware_A2D_init()
 107          *               Hardware_A2D_start(), Hardware_A2D_Fetch()                                                
             -                                   
 108          *   Returns:    data in local storage for call backs
 109          *   Uses:       lots
 110          *   General:    This task runs at the main loop 64 hertz task rate
 111          *               and controls acquisition of the five channels of A/D 
 112          *               data.
 113          *               Touch screen are acquired fifteen times followed by
C51 COMPILER V9.60.0.0   BATTERY                                                           05/09/2023 14:53:13 PAGE 3   

 114          *               one acquisition of temp and humidity.  So temp and
 115          *               humidity acquire twice per second, and touch acquires
 116          *               30 times per second.
 117          */
 118          
 119          void Hardware_Task_Analog( void)
 120          {
 121   1        uint16_t temp_a2d;
 122   1        temp_a2d = ADC_Value_Got();
 123   1        HardwareBatVoltageA2dFilter(temp_a2d);
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
