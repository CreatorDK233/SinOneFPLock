C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Object
                    -s\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          //Logic layer
   8          #include "RTC.h"
   9          #include "KeyScan.h"
  10          #include "Motor.h"
  11          #include "Log.h"
  12          #include "FP.h"
  13          #include "LCD.h"
  14          #include "MFC.h"
  15          //Application layer
  16          #include "GUI.h"
  17          #include "GUI_Function.h"
  18          #include "Basic_Function.h"
  19          #include "Voice_Menu.h"
  20          #include "Font_Menu.h"
  21          #include "Font.h"
  22          
  23          struct
  24          {
  25            enum{
  26              SetYearMajor=0,
  27              SetYearMinor=1,
  28              SetMonthMajor,
  29              SetMonthMinor,
  30              SetDateMajor,
  31              SetDateMinor,
  32              SetHourMajor,
  33              SetHourMinor,
  34              SetMinuteMajor,
  35              SetMinuteMinor,
  36              SetSecondMajor,
  37              SetSecondMinor
  38            }Status;
  39          
  40          }TimeSettingMgr;
  41          
  42          screen_t LastScreen;
  43          VoiceMenuMgr_t VoiceMenuMgr;
  44          DataInputMgr_t DataInputMgr;
  45          PasscodeInputMgr_t PasscodeInputMgr;
  46          uint8_t GUI_TimeCnt;
  47          uint8_t GUI_ToggleFlag_1s;
  48          uint8_t GUI_ToggleFlag_05s;
  49          bool_t GUI_Flag_RefreshLCD;
  50          
  51          keycode_t gui_keycode = KEY_NONE;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 2   

  53          uint8_t PasscodeBUFF1[12];
  54          
  55          /*******************************************************/
  56          /*******************************************************
  57          /*******************************************************/
  58          void ShowIdentifySuccessPage(void)//认证成功页面
  59          {
  60   1        #ifdef Function_ScreenDisplay
  61   1        uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
  62   1      //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
  63   1        uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
  64   1      //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
  65   1        uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
  66   1      //  uint8_t InitialStatusStrEn[]={"Initial"};
  67   1        #endif  
  68   1      
  69   1        if ( MotorMgr.MotorStatus != IDLE )
  70   1        {
  71   2          #ifdef Function_ScreenDisplay
  72   2          DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
  73   2          
  74   2          if ( UserIdentifyResultMgr.IdentifyType == CARD )
  75   2          {
  76   3            DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
  77   3            DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  78   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
  79   3          }
  80   2          else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
  81   2          {
  82   3            DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
  83   3            DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  84   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
  85   3          }
  86   2          else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
  87   2          {
  88   3            /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
  89   3            {
  90   3                DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
  91   3                DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  92   3            }
  93   3            else*/
  94   3            {
  95   4              DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
  96   4              DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  97   4            }
  98   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
  99   3          }
 100   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
 101   2          {
 102   3            
 103   3            DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
 104   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 105   3            DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
 106   3            DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
 107   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 108   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
 109   3          }
 110   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
 111   2          {
 112   3            DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
 113   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 114   3            DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 3   

 115   3            DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
 116   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 117   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
 118   3          }
 119   2          else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
 120   2          {
 121   3            DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
 122   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 123   3            DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
 124   3            DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
 125   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 126   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
 127   3          }
 128   2          else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
 129   2          {
 130   3          
 131   3              DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
 132   3          }
 133   2          DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
 134   2          
 135   2          #endif 
 136   2          
 137   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 138   2          {
 139   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 140   3            //Enable_KEYLED_WATERLIGHT(); 
 141   3            
 142   3            #ifdef Function_FPMbreathingLed
 143   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 144   3            //{
 145   3            SetFPMbreathingLed(FPMbreathingLed_Green);
 146   3            //}
 147   3            #endif  
 148   3                  
 149   3          }
 150   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 151   2          {
 152   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 153   3            {
 154   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 155   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 156   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 157   4              #ifdef Function_EventLog
 158   4              GUI_CreatAndSaveLog(OpenDoor);
 159   4              #endif
 160   4            }
 161   3            else if ( MotorMgr.CCWWAITTimer == 1)
 162   3            {
 163   4              //EMAGNET_RelaseTrigger();
 164   4            }
 165   3          }
 166   2        }
 167   1        else
 168   1        {
 169   2          #ifdef Function_ScreenDisplay
 170   2          GUI_Flag_RefreshLCD = bTRUE;
 171   2          DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
 172   2            DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
 173   2          #endif
 174   2          
 175   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 176   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 4   

 177   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 178   3            {
 179   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 180   4            }
 181   3            UserIdentifyResultMgr.TimeCnt--;
 182   3          }
 183   2          else
 184   2          {
 185   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 186   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 187   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 188   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 189   3            CardIdentifyMgr.Status = ReadingCardID;
 190   3            FpIdentifyMgr.Status = FPMcmdStart;
 191   3            CurrentScreen = SCREEN_Main;  
 192   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 193   3      //      #ifdef Function_FPMbreathingLed
 194   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 195   3      //      #endif  
 196   3          }
 197   2        }
 198   1      
 199   1      }
 200          /*******************************************************/
 201          /*******************************************************/
 202          /*******************************************************/
 203          void ShowIdentifyFailPage(void)//认证失败页面
 204          {
 205   1        #ifdef Function_ScreenDisplay
 206   1        DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
 207   1        
 208   1        if ( UserIdentifyResultMgr.IdentifyType == CARD )
 209   1        {
 210   2          DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 211   2        }
 212   1        else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 213   1        {
 214   2          if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
 215   2          {
 216   3            DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
 217   3            DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
 218   3          }
 219   2          else
 220   2          {
 221   3            DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 222   3          }
 223   2        }
 224   1        else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
 225   1        {
 226   2          DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 227   2        }
 228   1        #endif
 229   1        
 230   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 231   1        {
 232   2          #ifdef Function_FPMbreathingLed
 233   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 234   2          //{
 235   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 236   2          //}
 237   2          #endif
 238   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 5   

 239   1      
 240   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 241   1        {
 242   2          UserIdentifyResultMgr.TimeCnt--;
 243   2        }
 244   1        else
 245   1        {
 246   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 247   2          CardIdentifyMgr.Status = ReadingCardID;
 248   2          FpIdentifyMgr.Status = FPMcmdStart;
 249   2          CurrentScreen = SCREEN_Main;
 250   2          RefreshSystemSleepTime();
 251   2          
 252   2          #ifdef Function_FPMbreathingLed
 253   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 254   2          #endif
 255   2        }
 256   1      }
 257          
 258          
 259          
 260          
 261          /*******************************************************/
 262          /*******************************************************/
 263          /*******************************************************/
 264          void DisplayMainPage(void)//界面_主页面
 265          {
 266   1        #ifdef Function_ScreenDisplay
 267   1        code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
 268   1        //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
 269   1        code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
 270   1      //  code uint8_t Str1En[]={"Sys without"};
 271   1        code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
 272   1      //  code uint8_t Str2En[]={"admin."};
 273   1        code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
 274   1      //  code uint8_t Str3En[]={"Input 2nd ID"};
 275   1        code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
             -HZ_end};
 276   1      //  code uint8_t Str4En[]={"Press # to menu"};
 277   1      
 278   1        uint8_t Empty32X20[80]={
 279   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 280   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 281   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 282   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 283   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
 284   1        };
 285   1      
 286   1        DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
 287   1        DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
 288   1        DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
 289   1        DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
 290   1        DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
 291   1          
 292   1          if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
 293   1          {
 294   2            if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 295   2                ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 296   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 297   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 298   2              )
 299   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 6   

 300   3              DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
 301   3              GUI_Flag_RefreshLCD = bTRUE;
 302   3            }
 303   2              
 304   2            else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
 305   2            {
 306   3              GUI_Flag_RefreshLCD = bTRUE;
 307   3              DisHZ16x14Str(3,4,Str4,NormalDisplay);          
 308   3            }
 309   2            
 310   2            else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 311   2            {
 312   3              Clear_Screen_Page(2);
 313   3              Clear_Screen_Page(3);
 314   3              Clear_Screen_Page(4);
 315   3              Clear_Screen_Page(5);
 316   3              DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
 317   3              DisHZ16x14Str(2,40,Str1,NormalDisplay);
 318   3              DisHZ16x14Str(4,40,Str2,NormalDisplay);
 319   3              GUI_Flag_RefreshLCD = bTRUE;
 320   3            }
 321   2            else
 322   2            {
 323   3              GUI_Flag_RefreshLCD = bTRUE;
 324   3              DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
 325   3              DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
 326   3      //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
 327   3                if (GUI_ToggleFlag_05s == 0 )
 328   3                {
 329   4                  DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
 330   4                }
 331   3                else
 332   3                {
 333   4                  DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
 334   4                }
 335   3            }
 336   2            //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
 337   2            ShowLockBrand();
 338   2          }
 339   1        #endif
 340   1      }
 341          
 342          /*******************************************************/
 343          void GUI_UpadteMain(void)//GUI_主界面
 344          {
 345   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 346   1        {
 347   2          CurrentScreen = SCREEN_SystemLocked;
 348   2          #ifdef Function_FPMbreathingLed
 349   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 350   2          #endif
 351   2        }
 352   1        
 353   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 354   1        {
 355   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 356   2          CardUserIdentify();
 357   2        }
 358   1      
 359   1        
 360   1        if ( CardIdentifyMgr.Status == Success)
 361   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 7   

 362   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 363   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 364   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 365   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 366   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 367   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 368   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 369   2          {
 370   3            UnlockSuccess(CARD);
 371   3          }
 372   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 373   2          {
 374   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 375   3            {
 376   4              UnlockSuccess(CARDandPASSCODE);
 377   4            }
 378   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 379   3            { 
 380   4              UnlockSuccess(FINGERPRINTandCARD);
 381   4            }
 382   3            else{ 
 383   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 384   4              {
 385   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 386   5                //CardIdentifyMgr.Status = ReadingCardID;
 387   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 388   5              }
 389   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 390   4              {
 391   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 392   5                {
 393   6                  CardIdentifyMgr.Status = ReadingCardID;
 394   6                }
 395   5                UserIdentifyResultMgr.VoiceDelay--;
 396   5              }
 397   4            }
 398   3          }
 399   2        }
 400   1        else if ( CardIdentifyMgr.Status == Fail)
 401   1        {
 402   2          
 403   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 404   2          {
 405   3            if ( (CardIdentifyMgr.CID[0] == 0x16)
 406   3              &&(CardIdentifyMgr.CID[1] == 0xD4)
 407   3              &&(CardIdentifyMgr.CID[2] == 0xDB)
 408   3              &&(CardIdentifyMgr.CID[3] == 0x3C) )
 409   3            {
 410   4              DEBUG_MARK;
 411   4              if ( LockBrand.BrandChangeTimeDelay == 0 )
 412   4              {
 413   5                WriteLockBrand();
 414   5                if ( LockBrand.GotBrandData == bTRUE )
 415   5                {
 416   6                  DEBUG_MARK;
 417   6                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 418   6                  LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 419   6                  RefreshSystemSleepTime();
 420   6                }
 421   5              }
 422   4              CardIdentifyMgr.Status = ReadingCardID;
 423   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 8   

 424   3            else
 425   3            {
 426   4              UnlockSuccess(INITIALSTATUS);
 427   4              RefreshSystemSleepTime();
 428   4            }
 429   3          }
 430   2          else
 431   2          {
 432   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 433   3            UserIdentifyResultMgr.IdentifyType = CARD;
 434   3            UserIdentifyResultMgr.CardUserID = 0x00;
 435   3            //Enable_KEYLED_IdentifyFail();
 436   3            CurrentScreen = SCREEN_IdentifyFail;
 437   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 438   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 439   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 440   3            {
 441   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 442   4            }
 443   3            else
 444   3            {
 445   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 446   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 447   4            }
 448   3          }
 449   2        }
 450   1      
 451   1        FpUserIdentify();
 452   1        if ( FpIdentifyMgr.Status == success)
 453   1        {
 454   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 455   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 456   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 457   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 458   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 459   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 460   2          {
 461   3            UnlockSuccess(FINGERPRINT);
 462   3          }
 463   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 464   2          {
 465   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 466   3            {
 467   4              UnlockSuccess(FINGERPRINTandCARD);
 468   4            }
 469   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 470   3            {
 471   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 472   4            }
 473   3            else
 474   3            {
 475   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 476   4              {
 477   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 478   5                //FpIdentifyMgr.Status = FPMcmdStart;
 479   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 480   5              }
 481   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 482   4              {
 483   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 484   5                {
 485   6                  FpIdentifyMgr.Status = FPMcmdStart;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 9   

 486   6                }
 487   5                UserIdentifyResultMgr.VoiceDelay--;
 488   5              }
 489   4            }
 490   3          }
 491   2        }
 492   1        else if ( FpIdentifyMgr.Status == fail)
 493   1        {
 494   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 495   2          {
 496   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 497   3          }
 498   2          else{
 499   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 500   3          }
 501   2          
 502   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 503   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 504   2            )
 505   2          {
 506   3            UnlockSuccess(INITIALSTATUS);
 507   3          }
 508   2          else
 509   2          {
 510   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 511   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 512   3            UserIdentifyResultMgr.FPUserID = 0x00;
 513   3            //Enable_KEYLED_IdentifyFail();
 514   3            CurrentScreen = SCREEN_IdentifyFail;
 515   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 516   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 517   3            
 518   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 519   3            {
 520   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 521   4            }
 522   3            else
 523   3            {
 524   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 525   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 526   4            }
 527   3          
 528   3          }
 529   2      
 530   2        }
 531   1      
 532   1        PasscodeUserIdentify();
 533   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 534   1        {
 535   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 536   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 537   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 538   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 539   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 540   2          if ((UserIdentifyResultMgr.UnlockingMode == SingalMode )
 541   2            ||(UserIdentifyResultMgr.PasscodeType == AppPasscode)
 542   2             )
 543   2          {
 544   3            UnlockSuccess(PASSCODE);  
 545   3          }
 546   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 547   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 10  

 548   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 549   3            {
 550   4              UnlockSuccess(CARDandPASSCODE);
 551   4            }
 552   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 553   3            { 
 554   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 555   4            }
 556   3            else
 557   3            {
 558   4                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 559   4                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 560   4                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 561   4            }
 562   3          }
 563   2      
 564   2        }
 565   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 566   1        {
 567   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 568   2          {
 569   3            UnlockSuccess(INITIALSTATUS);
 570   3          }
 571   2          else
 572   2          {
 573   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 574   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 575   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 576   3            //Enable_KEYLED_IdentifyFail();
 577   3            CurrentScreen = SCREEN_IdentifyFail;
 578   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 579   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 580   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 581   3            {
 582   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 583   4            }
 584   3            else
 585   3            {
 586   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 587   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 588   4            }
 589   3          }
 590   2        }
 591   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 592   1        {
 593   2          AgingTestMgr.TestTimes=0x0000;    
 594   2          CurrentScreen = SCREEN_AgingTest;
 595   2        }
 596   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 597   1        {
 598   2          GoToSystemVersion();
 599   2        } 
 600   1        if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 601   1        {
 602   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 603   2              ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 604   2              ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 605   2              ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 606   2            )
 607   2          {
 608   3            
 609   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 11  

 610   2          
 611   2        }
 612   1        #ifdef Function_ScreenDisplay
 613   1          DisplayMainPage();
 614   1        #endif
 615   1      
 616   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 617   1        {
 618   2          #ifdef Function_ScreenDisplay
 619   2          Clear_Screen();
 620   2          #endif
 621   2          //SET_ALLKEYLED_OFF();
 622   2        }
 623   1        
 624   1      }
 625          
 626          /*******************************************************/
 627          void ShowDoorBell(void)
 628          {
 629   1        DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
 630   1        if ( DoorBellMgr.TimeCnt > 0 )
 631   1        {
 632   2          DoorBellMgr.TimeCnt--;
 633   2        }
 634   1        else
 635   1        {
 636   2          CurrentScreen = SCREEN_Main;
 637   2        }
 638   1      }
 639          
 640          
 641          /*******************************************************/
 642          /*******************************************************/
 643          /*******************************************************/
 644          void ShowMainMenu(void)//界面_主菜单
 645          {
 646   1        #ifdef Function_ScreenDisplay
 647   1        uint8_t i,j;
 648   1        if( VoiceMenuMgr.MenuPoint<5 )
 649   1        {
 650   2          for (i=0;i<4;i++)
 651   2          {
 652   3            DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
 653   3          } 
 654   2        }
 655   1        else
 656   1        {
 657   2          for (j=0;j<1;j++)
 658   2          {
 659   3            DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
 660   3          } 
 661   2        }
 662   1        GUI_Flag_RefreshLCD = bTRUE;
 663   1        #endif
 664   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 665   1        {
 666   2          if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 667   2          {
 668   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 669   3            VoiceMenuMgr.MenuPoint++;
 670   3          }
 671   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 12  

 672   1      }
 673          /*******************************************************/
 674          /*******************************************************/
 675          /*******************************************************/
 676          void ShowLogMenu(void)//界面_日志菜单
 677          {
 678   1        #ifdef Function_ScreenDisplay
 679   1        uint8_t i;
 680   1        for (i=0;i<2;i++)
 681   1        {
 682   2          DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
 683   2        }   
 684   1        GUI_Flag_RefreshLCD = bTRUE;
 685   1        #endif
 686   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 687   1        {
 688   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 689   2          {
 690   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 691   3            VoiceMenuMgr.MenuPoint++;
 692   3          }
 693   2        }
 694   1        
 695   1      }
 696          
 697          /*******************************************************/
 698          /*******************************************************/
 699          /*******************************************************/
 700          void ShowFpMenu(void)//界面_指纹菜单
 701          {
 702   1        #ifdef Function_ScreenDisplay
 703   1        uint8_t i;
 704   1        for (i=0;i<3;i++)
 705   1        {
 706   2            DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
 707   2        }
 708   1        GUI_Flag_RefreshLCD = bTRUE;
 709   1        #endif
 710   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 711   1        {
 712   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 713   2          {
 714   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 715   3            VoiceMenuMgr.MenuPoint++;
 716   3          }
 717   2        }
 718   1      }
 719          
 720          
 721          /*******************************************************/
 722          /*******************************************************/
 723          /*******************************************************/
 724          void ShowPasscodeMenu(void)//界面_密码菜单
 725          {
 726   1        #ifdef Function_ScreenDisplay
 727   1        uint8_t i;
 728   1        for (i=0;i<3;i++)
 729   1        {
 730   2            DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
 731   2        } 
 732   1        #endif
 733   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 13  

 734   1        {
 735   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 736   2          {
 737   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 738   3            VoiceMenuMgr.MenuPoint++;
 739   3          }
 740   2        } 
 741   1      
 742   1      }
 743          
 744          /*******************************************************/
 745          /*******************************************************/
 746          /*******************************************************/
 747          void ShowCardUserMenu(void)//界面_磁卡菜单
 748          {
 749   1        #ifdef Function_ScreenDisplay
 750   1        uint8_t i;
 751   1        for (i=0;i<2;i++)
 752   1        {
 753   2            DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
 754   2        } 
 755   1        #endif
 756   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 757   1        {
 758   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 759   2          {
 760   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 761   3            VoiceMenuMgr.MenuPoint++;
 762   3          }
 763   2        } 
 764   1      }
 765          
 766          /*******************************************************/
 767          /*******************************************************/
 768          /*******************************************************/
 769          void ShowSystemConfigMenu(void)//界面_系统配置菜单
 770          {
 771   1        #ifdef Function_ScreenDisplay
 772   1        uint8_t i,j;
 773   1        if( VoiceMenuMgr.MenuPoint<5 )
 774   1        {
 775   2          for (i=0;i<4;i++)
 776   2          {
 777   3            DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
 778   3          } 
 779   2        }
 780   1        else
 781   1        {
 782   2          for (j=0;j<2;j++)
 783   2          {
 784   3            DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
 785   3          } 
 786   2        }
 787   1        GUI_Flag_RefreshLCD = bTRUE;
 788   1        #endif
 789   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 790   1        {
 791   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 792   2          {
 793   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 794   3            VoiceMenuMgr.MenuPoint++;
 795   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 14  

 796   2        }   
 797   1      }
 798          
 799          /*******************************************************/
 800          /*******************************************************/
 801          /*******************************************************/
 802          void ShowRegisterMasterFp(void)//界面_注册管理员指纹
 803          {
 804   1        #ifdef Function_ScreenDisplay
 805   1        code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
 806   1      //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
 807   1        #endif
 808   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 809   1        {
 810   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 811   2          {
 812   3            FpUserRegisterMgr.Status = AddUserToFPM;
 813   3            FpRegisterMgr.Status = FPMcmdStart;
 814   3            DataInputMgr.Status = InputIdle;
 815   3          }
 816   2          else
 817   2          {
 818   3            FpUserRegisterMgr.Status = RegisterUserFail;
 819   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 820   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 821   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 822   3            Hardware_DelayMs(100);
 823   3            #ifdef Function_ScreenDisplay
 824   3            Clear_Screen();
 825   3            DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 826   3            #endif
 827   3          }
 828   2        }
 829   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 830   1        {
 831   2          FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 832   2          
 833   2          RegisterFp(FpUserRegisterMgr.UserID-1);
 834   2          
 835   2          if (FpRegisterMgr.Status == success)
 836   2          {
 837   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
 838   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 839   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 840   3            #ifdef Function_ScreenDisplay
 841   3            Clear_Screen();
 842   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
 843   3            #endif
 844   3            //GUI_Flag_RefreshLCD = bTRUE;
 845   3            CheckMemoryMgr.FpMasterNum+=1;
 846   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 847   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 848   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 849   3          }
 850   2          else if (FpRegisterMgr.Status == fail)
 851   2          {
 852   3            FpUserRegisterMgr.Status = RegisterUserFail;
 853   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 854   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 855   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 856   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 857   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 15  

 858   4              Clear_Screen();
 859   4              DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
 860   4              #endif
 861   4            }
 862   3            else
 863   3            {
 864   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 865   4              #ifdef Function_ScreenDisplay
 866   4              Clear_Screen();
 867   4              DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
 868   4              #endif
 869   4            }
 870   3            //GUI_Flag_RefreshLCD = bTRUE;
 871   3          }
 872   2        }
 873   1      
 874   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 875   1        {
 876   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 877   2          {
 878   3            GoToFpMenu();
 879   3            RefreshSystemSleepTime();
 880   3            #ifdef Function_EventLog
 881   3            GUI_CreatAndSaveLog(AddFpUser);
 882   3            #endif
 883   3      
 884   3            DEBUG_MARK;
 885   3          }
 886   2        }
 887   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
 888   1        {
 889   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
 890   2          {
 891   3            
 892   3          }
 893   2          
 894   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
 895   2          {
 896   3          
 897   3          }
 898   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
 899   2          {
 900   3        
 901   3          }
 902   2          else
 903   2          {
 904   3      
 905   3          }
 906   2          
 907   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 908   2          {
 909   3            GoToFpMenu();
 910   3          }
 911   2          DEBUG_MARK;
 912   2        }
 913   1      }
 914          
 915          /*******************************************************/
 916          /*******************************************************/
 917          /*******************************************************/
 918          void ShowDeleteMasterFp(void)//界面_删除管理员指纹
 919          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 16  

 920   1        //uint8_t i;
 921   1      
 922   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
 923   1        {
 924   2          FpUserDeleteMgr.Status = InputUserID;
 925   2          DataInputMgr.Status = InputIdle;
 926   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
 927   2        }
 928   1        
 929   1        if ( FpUserDeleteMgr.Status == InputUserID )
 930   1        {
 931   2          
 932   2          GUI_DataInputCreat(5,72,2,0x0000);
 933   2      
 934   2          if (DataInputMgr.Status == InputEnd)
 935   2          {
 936   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
 937   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
 938   3            {
 939   4              DataInputMgr.Status = InputIdle;    //Reinput
 940   4            }
 941   3            else
 942   3            {
 943   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
 944   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
 945   4              DataInputMgr.Status = InputIdle;  
 946   4            }
 947   3          }
 948   2          else if  (DataInputMgr.Status == InputExit)
 949   2          {
 950   3            FpUserDeleteMgr.Status = DeleteUserFail;
 951   3            FpUserDeleteMgr.ErrorType = QUIT;
 952   3            FpUserDeleteMgr.TimeCnt = 0;  
 953   3          }
 954   2        }
 955   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
 956   1        {
 957   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
 958   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
 959   2          {
 960   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
 961   3            {
 962   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
 963   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
 964   4              {
 965   5                FpUserDeleteMgr.Status = DeleteUserFail;
 966   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
 967   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
 968   5                //GUI_Flag_RefreshLCD = bTRUE;
 969   5                DEF_Fail_Beep;
 970   5              }
 971   4              else
 972   4              {
 973   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
 974   5                DataInputMgr.Status = InputIdle;  
 975   5                //GUI_Flag_RefreshLCD = bTRUE;
 976   5              }
 977   4            }
 978   3            else
 979   3            {
 980   4              FpUserDeleteMgr.Status = DeleteUserFail;
 981   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 17  

 982   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
 983   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
 984   4              //GUI_Flag_RefreshLCD = bTRUE;
 985   4            }
 986   3          }
 987   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
 988   2          {
 989   3            FpUserDeleteMgr.Status = DeleteUserFail;
 990   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
 991   3            FpUserDeleteMgr.ErrorType = QUIT;
 992   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
 993   3            //GUI_Flag_RefreshLCD = bTRUE;
 994   3          }
 995   2        }
 996   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
 997   1        {
 998   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
 999   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1000   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1001   2          FpmAckMgr.Status = WaitACK;
1002   2        }
1003   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1004   1          {
1005   2            if (FpmAckMgr.Status == GotACK)
1006   2              {
1007   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1008   3                {
1009   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1010   4                  //GUI_Flag_RefreshLCD = bTRUE;
1011   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1012   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1013   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1014   4                  {
1015   5                    CheckMemoryMgr.FpMasterNum-=1;
1016   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1017   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1018   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1019   5                  }
1020   4                }
1021   3                else
1022   3                {
1023   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1024   4                  //GUI_Flag_RefreshLCD = bTRUE;
1025   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1026   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1027   4                }
1028   3                DEBUG_MARK;
1029   3              }
1030   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1031   2              {
1032   3                FpUserDeleteMgr.Status = DeleteUserFail;
1033   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1034   3                //GUI_Flag_RefreshLCD = bTRUE;
1035   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1036   3              }
1037   2      
1038   2          }
1039   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1040   1          {
1041   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1042   2            {
1043   3              CurrentScreen = SCREEN_MasterFpMenu;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 18  

1044   3              UnlockModeJudgment();
1045   3              #ifdef Function_EventLog
1046   3              GUI_CreatAndSaveLog(DeleteFpUser);
1047   3              #endif
1048   3            }
1049   2            DEBUG_MARK;
1050   2          }
1051   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1052   1          {
1053   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1054   2            {
1055   3              
1056   3            }
1057   2            /*
1058   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1059   2            {
1060   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1061   2            }
1062   2            */
1063   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1064   2            {
1065   3              
1066   3            }
1067   2            else
1068   2            {
1069   3      
1070   3            }
1071   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1072   2            {
1073   3              CurrentScreen = SCREEN_MasterFpMenu;
1074   3            }
1075   2            DEBUG_MARK;
1076   2          }
1077   1        
1078   1      }
1079          /*******************************************************/
1080          /*******************************************************/
1081          /*******************************************************/
1082          void ShowRegisterUserFp(void)//界面_注册用户指纹
1083          {
1084   1        //uint8_t i;
1085   1        //uint16_t UserID;  
1086   1        //~{Lm<SV8NFSC;'~}
1087   1        #ifdef Function_ScreenDisplay
1088   1        code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
1089   1      //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
1090   1        #endif
1091   1        
1092   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1093   1        {
1094   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1095   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1096   2          )
1097   2          {
1098   3            FpUserRegisterMgr.Status = RegisterUserFail;
1099   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1100   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1101   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1102   3            #ifdef Function_ScreenDisplay
1103   3            Clear_Screen();
1104   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
1105   3            #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 19  

1106   3            //GUI_Flag_RefreshLCD = bTRUE;
1107   3          } 
1108   2          else
1109   2          {
1110   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1111   3            {
1112   4              FpUserRegisterMgr.Status = AddUserToFPM;
1113   4              FpRegisterMgr.Status = FPMcmdStart;
1114   4              DataInputMgr.Status = InputIdle;
1115   4            }
1116   3            else
1117   3            {
1118   4              FpUserRegisterMgr.Status = RegisterUserFail;
1119   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1120   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1121   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1122   4              Hardware_DelayMs(100);
1123   4              #ifdef Function_ScreenDisplay
1124   4              Clear_Screen();
1125   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
1126   4              #endif
1127   4              //GUI_Flag_RefreshLCD = bTRUE;
1128   4            }
1129   3          }
1130   2        }
1131   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1132   1        {
1133   2          FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1134   2          
1135   2          RegisterFp(FpUserRegisterMgr.UserID-1);
1136   2          
1137   2          if (FpRegisterMgr.Status == success)
1138   2          {
1139   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
1140   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1141   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1142   3            #ifdef Function_ScreenDisplay
1143   3            Clear_Screen();
1144   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1145   3            #endif
1146   3            CheckMemoryMgr.FpUserNum+=1;
1147   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1148   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1149   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1150   3          }
1151   2          else if (FpRegisterMgr.Status == fail)
1152   2          {
1153   3            FpUserRegisterMgr.Status = RegisterUserFail;
1154   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1155   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1156   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1157   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1158   4              #ifdef Function_ScreenDisplay
1159   4              Clear_Screen();
1160   4              DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
1161   4              #endif
1162   4              //GUI_Flag_RefreshLCD = bTRUE;
1163   4            }
1164   3            else
1165   3            {
1166   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1167   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 20  

1168   4              Clear_Screen();
1169   4              DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1170   4              #endif
1171   4              //GUI_Flag_RefreshLCD = bTRUE;
1172   4            }
1173   3          }
1174   2        }
1175   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1176   1        {
1177   2          
1178   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1179   2          {
1180   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
1181   3            GoToFpMenu();
1182   3            RefreshSystemSleepTime();
1183   3            #ifdef Function_EventLog
1184   3            GUI_CreatAndSaveLog(AddFpUser);
1185   3            #endif
1186   3          }
1187   2          DEBUG_MARK;
1188   2        }
1189   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1190   1        {   
1191   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1192   2          {
1193   3          
1194   3          }
1195   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1196   2          {
1197   3            
1198   3          }
1199   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1200   2          {
1201   3            
1202   3          }
1203   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1204   2          {
1205   3            
1206   3          }
1207   2          else
1208   2          {
1209   3            
1210   3          }
1211   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1212   2          {
1213   3            GoToFpMenu();
1214   3          }
1215   2          DEBUG_MARK;
1216   2        }
1217   1      }
1218          
1219          /*******************************************************/
1220          /*******************************************************/
1221          /*******************************************************/
1222          void ShowDeleteUserFp(void)//界面_删除用户指纹
1223          {
1224   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1225   1        {
1226   2          FpUserDeleteMgr.Status = InputUserID;
1227   2          DataInputMgr.Status = InputIdle;
1228   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1229   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 21  

1230   1        if ( FpUserDeleteMgr.Status == InputUserID )
1231   1        {
1232   2            
1233   2            GUI_DataInputCreat(5,80,3,0x0000);
1234   2        
1235   2            if (DataInputMgr.Status == InputEnd)
1236   2            {
1237   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1238   3              if ((FpUserDeleteMgr.UserID >DEF_MAX_FPMASTER )&&( FpUserDeleteMgr.UserID < (DEF_MAX_FPMASTER+DEF_MAX_
             -FPUSER+1)) )
1239   3              {
1240   4                FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1241   4                CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1242   4                DataInputMgr.Status = InputIdle;
1243   4              }
1244   3              else        
1245   3              {
1246   4                DataInputMgr.Status = InputIdle;    //Reinput
1247   4              }
1248   3      
1249   3            }
1250   2            else if  (DataInputMgr.Status == InputExit)
1251   2            {
1252   3              FpUserDeleteMgr.Status = DeleteUserFail;
1253   3              FpUserDeleteMgr.ErrorType = QUIT;
1254   3              FpUserDeleteMgr.TimeCnt = 0;
1255   3            }
1256   2        }
1257   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1258   1        {
1259   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1260   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1261   2          {
1262   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1263   3            {
1264   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1265   4              DataInputMgr.Status = InputIdle;  
1266   4              //GUI_Flag_RefreshLCD = bTRUE;
1267   4            }
1268   3            else
1269   3            {
1270   4              FpUserDeleteMgr.Status = DeleteUserFail;
1271   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1272   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1273   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1274   4              //GUI_Flag_RefreshLCD = bTRUE;
1275   4            }
1276   3          }
1277   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1278   2          {
1279   3            FpUserDeleteMgr.Status = DeleteUserFail;
1280   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1281   3            FpUserDeleteMgr.ErrorType = QUIT;
1282   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1283   3            //GUI_Flag_RefreshLCD = bTRUE;
1284   3          }
1285   2        }
1286   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1287   1        {
1288   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1289   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1290   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 22  

1291   2          FpmAckMgr.Status = WaitACK;
1292   2        }
1293   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1294   1          {
1295   2            if (FpmAckMgr.Status == GotACK)
1296   2              {
1297   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1298   3                {
1299   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1300   4                  //GUI_Flag_RefreshLCD = bTRUE;
1301   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1302   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1303   4                  if ( CheckMemoryMgr.FpUserNum > 0 )
1304   4                  {
1305   5                    CheckMemoryMgr.FpUserNum-=1;
1306   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1307   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1308   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1309   5                  }
1310   4                }
1311   3                else
1312   3                {
1313   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1314   4                  //GUI_Flag_RefreshLCD = bTRUE;
1315   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1316   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1317   4                }
1318   3                DEBUG_MARK;
1319   3              }
1320   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1321   2              {
1322   3                FpUserDeleteMgr.Status = DeleteUserFail;
1323   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1324   3                //GUI_Flag_RefreshLCD = bTRUE;
1325   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1326   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1327   3              }
1328   2      
1329   2          }
1330   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1331   1          {
1332   2            
1333   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1334   2            {
1335   3              CurrentScreen = SCREEN_UserFpMenu;
1336   3              UnlockModeJudgment();
1337   3              #ifdef Function_EventLog
1338   3              GUI_CreatAndSaveLog(DeleteFpUser);
1339   3              #endif
1340   3            }
1341   2            DEBUG_MARK;
1342   2          }
1343   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1344   1          {
1345   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1346   2            {
1347   3      
1348   3            }
1349   2            else
1350   2            {
1351   3      
1352   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 23  

1353   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1354   2            {
1355   3              CurrentScreen = SCREEN_UserFpMenu;
1356   3            }
1357   2            DEBUG_MARK;
1358   2          }
1359   1        
1360   1      }
1361          
1362          
1363          /*******************************************************/
1364          /*******************************************************/
1365          /*******************************************************/
1366          void ShowDeleteAllUserFp(void)//界面_删除所有用户指纹
1367          {
1368   1        uint16_t i;
1369   1        
1370   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1371   1        {
1372   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1373   2          AllUserFpDeleteMgr.Selection = NO;
1374   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1375   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1376   2          #ifdef Function_ScreenDisplay
1377   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
1378   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
1379   2          #endif
1380   2        }
1381   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1382   1        {
1383   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1384   2          //{
1385   2            
1386   2          //}
1387   2        }
1388   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1389   1        {
1390   2          
1391   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1392   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
1393   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1394   2          //GUI_Flag_RefreshLCD = bTRUE;
1395   2          FpmAckMgr.Status = WaitACK;
1396   2        }
1397   1        
1398   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1399   1            {
1400   2              if (FpmAckMgr.Status == GotACK)
1401   2              {
1402   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1403   3                {
1404   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1405   4                  //GUI_Flag_RefreshLCD = bTRUE;
1406   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1407   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1408   4                  CheckMemoryMgr.FpUserNum=0;
1409   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1410   4                  {
1411   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1412   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1413   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1414   5                  }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 24  

1415   4                }
1416   3                else
1417   3                {
1418   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1419   4                  //GUI_Flag_RefreshLCD = bTRUE;
1420   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1421   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1422   4                }
1423   3                DEBUG_MARK;
1424   3              }
1425   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1426   2              {
1427   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1428   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1429   3                //GUI_Flag_RefreshLCD = bTRUE;
1430   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1431   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1432   3              }
1433   2            }
1434   1        
1435   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1436   1          {
1437   2            #ifdef Function_ScreenDisplay
1438   2            Clear_Screen();
1439   2            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1440   2            #endif
1441   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1442   2            {
1443   3              GoToFpMenu();
1444   3              #ifdef Function_EventLog
1445   3              GUI_CreatAndSaveLog(DeleteAllFpUser);
1446   3              #endif
1447   3            }
1448   2          }
1449   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1450   1          {
1451   2            #ifdef Function_ScreenDisplay
1452   2            Clear_Screen();
1453   2            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1454   2            #endif
1455   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1456   2            {
1457   3              GoToFpMenu();
1458   3            }
1459   2          }
1460   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1461   1          {
1462   2            GoToFpMenu();
1463   2          }
1464   1        
1465   1      }
1466          
1467          /*******************************************************/
1468          /*******************************************************/
1469          /*******************************************************/
1470          /*******************************************************/
1471          /*******************************************************/
1472          /*******************************************************/
1473          void ShowDeleteCardUser(void)//界面_删除磁卡用户
1474          {
1475   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1476   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 25  

1477   2          CardUserDeleteMgr.Status = InputCardUserID;
1478   2          DataInputMgr.Status = InputIdle;
1479   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1480   2        }
1481   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1482   1        {
1483   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1484   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1485   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1486   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1487   2          
1488   2          GUI_DataInputCreat(6,68,3,0x0000);
1489   2      
1490   2          if (DataInputMgr.Status == InputEnd)
1491   2          {
1492   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1493   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1494   3            {
1495   4              DataInputMgr.Status = InputIdle;    //Reinput
1496   4            }
1497   3            else if ( IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE )
1498   3            {
1499   4              DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1500   4              CardUserDeleteMgr.Status = Success; 
1501   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1502   4              //GUI_Flag_RefreshLCD = bTRUE;
1503   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1504   4              if ( CheckMemoryMgr.CardUserNum > 0 )
1505   4              {
1506   5                CheckMemoryMgr.CardUserNum-=1;
1507   5              }
1508   4                
1509   4            }
1510   3            else
1511   3            {
1512   4              CardUserDeleteMgr.Status = Fail;
1513   4              CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1514   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1515   4              //GUI_Flag_RefreshLCD = bTRUE;
1516   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1517   4            }
1518   3          }
1519   2          else if  (DataInputMgr.Status == InputExit)
1520   2          {
1521   3            CardUserDeleteMgr.Status = Fail;
1522   3            CardUserDeleteMgr.ErrorType = QUIT;
1523   3            CardUserDeleteMgr.TimeCnt = 0;
1524   3          }
1525   2        }
1526   1        
1527   1        else if  ( CardUserDeleteMgr.Status == Success)
1528   1        {
1529   2          
1530   2          if (--CardUserDeleteMgr.TimeCnt < 1 )
1531   2          {
1532   3            CurrentScreen = SCREEN_CardUserMenu;
1533   3            UnlockModeJudgment();
1534   3            #ifdef Function_EventLog
1535   3            GUI_CreatAndSaveLog(DeleteCardUser);
1536   3            #endif
1537   3          }
1538   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 26  

1539   1        else if ( CardUserDeleteMgr.Status == Fail)
1540   1        {
1541   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1542   2          {
1543   3      
1544   3          }
1545   2          else
1546   2          {
1547   3          
1548   3      
1549   3          }
1550   2          if ( CardUserDeleteMgr.TimeCnt-- < 1 )
1551   2          {
1552   3            CurrentScreen = SCREEN_CardUserMenu;
1553   3          }
1554   2        }
1555   1      }
1556          
1557          /*******************************************************/
1558          /*******************************************************/
1559          /*******************************************************/
1560          void ShowDeleteAllCardUser(void)//界面_删除全部磁卡用户
1561          {
1562   1        
1563   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1564   1        {
1565   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1566   2          AllCardUserDeleteMgr.Selection = NO;
1567   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1568   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1569   2        }
1570   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1571   1        { 
1572   2          #ifdef Function_ScreenDisplay
1573   2            DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
1574   2            DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
1575   2          #endif
1576   2        }
1577   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1578   1        {
1579   2          
1580   2          DeleteAllCardUserfromMemory();
1581   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1582   2          AllCardUserDeleteMgr.Status = Success;
1583   2          //GUI_Flag_RefreshLCD = bTRUE;
1584   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1585   2          CheckMemoryMgr.CardUserNum =0;
1586   2        }
1587   1        else if ( AllCardUserDeleteMgr.Status == Success )
1588   1        {
1589   2          #ifdef Function_ScreenDisplay
1590   2          Clear_Screen();
1591   2          DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1592   2          #endif
1593   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1594   2          {
1595   3            GoToCardMenu();
1596   3            UnlockModeJudgment();
1597   3            #ifdef Function_EventLog
1598   3            GUI_CreatAndSaveLog(DeleteAllCardUser);
1599   3            #endif
1600   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 27  

1601   2        }
1602   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1603   1        {
1604   2          GoToCardMenu();
1605   2        }
1606   1      }
1607          
1608          
1609          /*******************************************************/
1610          /*******************************************************/
1611          /*******************************************************/
1612          
1613          void ShowRegisterPasscodeUser(void)//注册密码用户
1614          {
1615   1        uint8_t i;
1616   1        
1617   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1618   1        {
1619   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1620   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1621   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1622   2            )
1623   2          {
1624   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1625   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1626   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1627   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1628   3            #ifdef Function_ScreenDisplay
1629   3            Clear_Screen();
1630   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
1631   3            #endif
1632   3          }
1633   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1634   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1635   2          {
1636   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1637   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1638   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1639   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1640   3            Hardware_DelayMs(100);
1641   3            #ifdef Function_ScreenDisplay
1642   3            Clear_Screen();
1643   3            DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
1644   3            #endif
1645   3          }
1646   2          else
1647   2          {
1648   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1649   3            DataInputMgr.Status = InputIdle;
1650   3          }
1651   2        }
1652   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1653   1        {
1654   2          PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1655   2          PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1656   2          DataInputMgr.Status = InputIdle;
1657   2          //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1658   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1659   2          {
1660   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 28  

1661   3          }
1662   2          else
1663   2          {
1664   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1665   3          }
1666   2          
1667   2          PasscodeInputMgr.Point = 0x00;
1668   2          PasscodeInputMgr.PasscodeLen = 12;
1669   2          PasscodeInputMgr.Status = PasscodeInputStart;
1670   2          for (i=0;i<12;i++)
1671   2          {
1672   3            PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1673   3          }
1674   2          PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1675   2          //GUI_Flag_RefreshLCD = bTRUE;
1676   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1677   2          {
1678   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1679   3          }
1680   2          else
1681   2          {
1682   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1683   3          }
1684   2          #ifdef Function_ScreenDisplay
1685   2          Clear_Screen();
1686   2          DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
1687   2          #endif
1688   2        }
1689   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1690   1        {
1691   2          #ifdef Function_ScreenDisplay
1692   2          Clear_Screen();
1693   2          DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
1694   2          GUI_PasscodeInputCreat(5,0);
1695   2          #endif
1696   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1697   2          {
1698   3            if ( PasscodeInputMgr.Point > 5 )
1699   3            {
1700   4              for (i=0;i<12;i++)
1701   4              {
1702   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1703   5              }
1704   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1705   4              PasscodeInputMgr.Point = 0x00;
1706   4              PasscodeInputMgr.PasscodeLen = 12;
1707   4              PasscodeInputMgr.Status = PasscodeInputStart;
1708   4              for (i=0;i<12;i++)
1709   4              {
1710   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1711   5              }
1712   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1713   4              //GUI_Flag_RefreshLCD = bTRUE;
1714   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1715   4              {
1716   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1717   5              }
1718   4              else
1719   4              {
1720   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1721   5              }
1722   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 29  

1723   3            else
1724   3            {
1725   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1726   4              PasscodeInputMgr.Point = 0x00;
1727   4              PasscodeInputMgr.PasscodeLen = 12;
1728   4              PasscodeInputMgr.Status = PasscodeInputStart;
1729   4              for (i=0;i<12;i++)
1730   4              {
1731   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1732   5              }
1733   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1734   4              //GUI_Flag_RefreshLCD = bTRUE;
1735   4            }
1736   3          }
1737   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1738   2          {
1739   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1740   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1741   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1742   3          }
1743   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1744   2          {
1745   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1746   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1747   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1748   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1749   3            #ifdef Function_ScreenDisplay
1750   3            Clear_Screen();
1751   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1752   3            #endif
1753   3          } 
1754   2        }
1755   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1756   1        {
1757   2          GUI_PasscodeInputCreat(5,0);
1758   2      
1759   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1760   2          {
1761   3            if ( PasscodeInputMgr.Point > 5 )
1762   3              {
1763   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1764   4                //GUI_Flag_RefreshLCD = bTRUE;
1765   4              }
1766   3            else
1767   3              {
1768   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1769   4                PasscodeInputMgr.Point = 0x00;
1770   4                PasscodeInputMgr.PasscodeLen = 12;
1771   4                PasscodeInputMgr.Status = PasscodeInputStart;
1772   4                for (i=0;i<12;i++)
1773   4                {
1774   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1775   5                }
1776   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1777   4                //GUI_Flag_RefreshLCD = bTRUE;
1778   4              }
1779   3          }
1780   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1781   2          {
1782   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1783   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1784   3            PasscodeUserRegisterMgr.TimeCnt = 1;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 30  

1785   3          }
1786   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1787   2          {
1788   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1789   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1790   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1791   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1792   3            #ifdef Function_ScreenDisplay
1793   3            Clear_Screen();
1794   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1795   3            #endif
1796   3          } 
1797   2        }
1798   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1799   1        {
1800   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1801   2          {
1802   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1803   3            {
1804   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1805   4              {
1806   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1807   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1808   5                //GUI_Flag_RefreshLCD = bTRUE;
1809   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1810   5                #ifdef Function_ScreenDisplay
1811   5                Clear_Screen();
1812   5                DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1813   5                #endif
1814   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1815   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1816   6                }
1817   5                else{
1818   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1819   6                }
1820   5              }
1821   4              else
1822   4              {
1823   5                //目前不返回失败
1824   5              }
1825   4            }
1826   3            else
1827   3            {
1828   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1829   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
1830   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1831   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
1832   4              #ifdef Function_ScreenDisplay
1833   4              Clear_Screen();
1834   4              DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
1835   4              #endif
1836   4            }
1837   3          }
1838   2          else
1839   2          {
1840   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1841   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
1842   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1843   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1844   3            #ifdef Function_ScreenDisplay
1845   3            Clear_Screen();
1846   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 31  

1847   3            #endif
1848   3          }
1849   2        }
1850   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
1851   1        {
1852   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1853   2          {
1854   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
                    #else
1857   3            
1858   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1859   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1860   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
1861   4              /*
1862   4              FpUserRegisterMgr.Status = AddUserToFPM;  
1863   4              FpRegisterMgr.Status = FPMcmdStart;
1864   4              FpUserRegisterMgr.UserID=0x01;
1865   4              CurrentScreen = SCREEN_RegisterMasterFp;
1866   4              */
1867   4              GoToMainMenu();
1868   4            }
1869   3            else
1870   3            {
1871   4              GoToPasswordMenu();
1872   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1873   4            }
1874   3            #endif
1875   3      
1876   3            #ifdef Function_EventLog
1877   3            GUI_CreatAndSaveLog(AddPasscodeUser);
1878   3            #endif
1879   3          }
1880   2        }
1881   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
1882   1        {
1883   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
1884   2          {
1885   3      
1886   3          }
1887   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
1888   2          {
1889   3      
1890   3          }
1891   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
1892   2          {
1893   3      
1894   3          }
1895   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
1896   2          {
1897   3      
1898   3          }
1899   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
1900   2          {
1901   3          
1902   3          }
1903   2          else
1904   2          {
1905   3      
1906   3          }
1907   2        
1908   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 32  

1909   2          {
1910   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
1911   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
1912   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1913   3              )
1914   3            {
1915   4              CurrentScreen = SCREEN_Main;
1916   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
1917   4              FpIdentifyMgr.Status = FPMcmdStart;
1918   4              CardIdentifyMgr.Status = ReadingCardID;
1919   4            }
1920   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1921   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1922   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1923   3            )
1924   3            {
1925   4              CurrentScreen = SCREEN_Main;
1926   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
1927   4              FpIdentifyMgr.Status = FPMcmdStart;
1928   4              CardIdentifyMgr.Status = ReadingCardID;
1929   4            }
1930   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
1931   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
1932   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
1933   3              )
1934   3            {
1935   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1936   4              {
1937   5                GoToPasswordMenu();
1938   5              }
1939   4              else{
1940   5                GoToPasswordMenu();
1941   5              }
1942   4            }
1943   3            else
1944   3            {
1945   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1946   4              GoToPasswordMenu();
1947   4            }
1948   3          }
1949   2        }
1950   1      }
1951          
1952          /*******************************************************/
1953          /*******************************************************/
1954          /*******************************************************/
1955          void ShowDeletePasscodeUser(void)//界面_删除密码用户
1956          {
1957   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
1958   1        {
1959   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
1960   2          DataInputMgr.Status = InputIdle;
1961   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1962   2        }
1963   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
1964   1          {
1965   2            if (PasscodeUserDeleteMgr.UserPriority == Master)
1966   2            {
1967   3      //        DisOneDigital16x8(6,8,1,NormalDisplay);
1968   3      //        DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
1969   3            }
1970   2            else
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 33  

1971   2            {
1972   3      //        DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
1973   3      //        DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
1974   3      //        DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
1975   3            }
1976   2            
1977   2            GUI_DataInputCreat(6,56,2,0x0000);
1978   2      
1979   2            if (DataInputMgr.Status == InputEnd)
1980   2            {
1981   3              PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
1982   3              if (  (((PasscodeUserDeleteMgr.UserID>(DEF_MAX_PASSCODEMASTER+DEF_MAX_PASSCODEUSER))||(PasscodeUserDel
             -eteMgr.UserID<(DEF_MAX_PASSCODEMASTER+1)))&&(PasscodeUserDeleteMgr.UserPriority == User))   
1983   3                ||(((PasscodeUserDeleteMgr.UserID > DEF_MAX_PASSCODEMASTER)||(PasscodeUserDeleteMgr.UserID<1))&&(Pas
             -scodeUserDeleteMgr.UserPriority == Master))
1984   3               )      
1985   3              {
1986   4                DataInputMgr.Status = InputIdle;    //Reinput
1987   4              }
1988   3              else
1989   3              {
1990   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
1991   4                DataInputMgr.Status = InputIdle;  
1992   4              }
1993   3            }
1994   2            else if  (DataInputMgr.Status == InputExit)
1995   2            {
1996   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
1997   3              PasscodeUserDeleteMgr.ErrorType = QUIT;
1998   3              PasscodeUserDeleteMgr.TimeCnt = 0;
1999   3            }
2000   2          }
2001   1        else if ( PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2002   1        {
2003   2          if ( IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE )
2004   2            {
2005   3              if (PasscodeUserDeleteMgr.UserPriority == Master)
2006   3              {
2007   4                if ((CheckMemoryMgr.PasscodeMasterNum==0x01))
2008   4                //&&(CheckMemoryMgr.FpMasterNum == 0x00))
2009   4                {
2010   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2011   5                  PasscodeUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
2012   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2013   5                  //GUI_Flag_RefreshLCD = bTRUE;
2014   5                  DEF_Fail_Beep;
2015   5                }
2016   4                else
2017   4                {
2018   5                  DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2019   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2020   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2021   5                  //GUI_Flag_RefreshLCD = bTRUE;
2022   5                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2023   5                  if ( CheckMemoryMgr.PasscodeMasterNum > 0 )
2024   5                  {
2025   6                    CheckMemoryMgr.PasscodeMasterNum-=1;
2026   6                  }
2027   5                }
2028   4              }
2029   3              else
2030   3              {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 34  

2031   4                DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2032   4                PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2033   4                PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2034   4                //GUI_Flag_RefreshLCD = bTRUE;
2035   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2036   4                if ( CheckMemoryMgr.PasscodeUserNum > 0 )
2037   4                {
2038   5                  CheckMemoryMgr.PasscodeUserNum-=1;
2039   5                }
2040   4              }
2041   3                
2042   3            }
2043   2          else
2044   2            {
2045   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2046   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2047   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2048   3              //GUI_Flag_RefreshLCD = bTRUE;
2049   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
2050   3            }
2051   2        }
2052   1        else if  ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2053   1          {
2054   2            
2055   2            if (--PasscodeUserDeleteMgr.TimeCnt < 1 )
2056   2              {
2057   3                //CurrentScreen = SCREEN_PasscodeUserMenu;
2058   3                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2059   3                //GUI_Flag_RefreshLCD = bTRUE;
2060   3                UnlockModeJudgment();
2061   3                #ifdef Function_EventLog
2062   3                GUI_CreatAndSaveLog(DeletePasscodeUser);
2063   3                #endif
2064   3              }
2065   2          }
2066   1        else if ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2067   1          {
2068   2            if ( PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2069   2            {
2070   3      
2071   3            }
2072   2            else if ( PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
2073   2            {
2074   3      
2075   3            }
2076   2            else
2077   2            {
2078   3        
2079   3            }
2080   2            
2081   2            if (PasscodeUserDeleteMgr.TimeCnt-- < 1 )
2082   2            {
2083   3              if ( PasscodeUserDeleteMgr.ErrorType == QUIT )
2084   3              {
2085   4                if (PasscodeUserDeleteMgr.UserPriority == Master)
2086   4                {
2087   5                  CurrentScreen = SCREEN_PasscodeMasterMenu;
2088   5                }
2089   4                else{
2090   5                  CurrentScreen = SCREEN_PasscodeUserMenu;
2091   5                }
2092   4              }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 35  

2093   3              else
2094   3              {
2095   4                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2096   4                //GUI_Flag_RefreshLCD = bTRUE;
2097   4              }
2098   3            }
2099   2          }
2100   1        
2101   1      }
2102          
2103          /*******************************************************/
2104          /*******************************************************/
2105          /*******************************************************/
2106          void ShowDeleteAllPasscodeUser(void)//界面_删除全部密码用户
2107          {
2108   1        //uint8_t i;
2109   1        
2110   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2111   1        {
2112   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2113   2          AllPasscodeUserDeleteMgr.Selection = NO;
2114   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2115   2        }
2116   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2117   1        {
2118   2          #ifdef Function_ScreenDisplay
2119   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
2120   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
2121   2          #endif
2122   2        }
2123   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2124   1        {
2125   2          DeleteAllPasscodeUserfromMemory();
2126   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2127   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2128   2          GUI_Flag_RefreshLCD = bTRUE;
2129   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2130   2          CheckMemoryMgr.PasscodeUserNum = 0;
2131   2        }
2132   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2133   1          {
2134   2            #ifdef Function_ScreenDisplay
2135   2            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
2136   2            #endif
2137   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2138   2            {
2139   3              GoToPasswordMenu();
2140   3              UnlockModeJudgment();
2141   3              #ifdef Function_EventLog
2142   3              GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
2143   3              #endif
2144   3            }
2145   2          }
2146   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2147   1          {
2148   2            GoToPasswordMenu();
2149   2          }
2150   1      }
2151          
2152          /*******************************************************/
2153          /*******************************************************/
2154          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 36  

2155          void ShowTimeSetting(void)//界面_时间设定
2156          {
2157   1        #ifdef Function_ScreenDisplay
2158   1        code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
2159   1      
2160   1        code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
2161   1        
2162   1        code uint8_t TimeStrEn[]={"23:01:01"};
2163   1      
2164   1        DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
2165   1      
2166   1        DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
2167   1        DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
2168   1        DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
2169   1        DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
2170   1        
2171   1        DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
2172   1        DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
2173   1        DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
2174   1        DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
2175   1      
2176   1        if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
2177   1        {
2178   2          DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
2179   2        }
2180   1        else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
2181   1        {
2182   2          DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
2183   2        }
2184   1        else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
2185   1        {
2186   2          DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
2187   2        }
2188   1        else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
2189   1        {
2190   2          DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
2191   2        }
2192   1        else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
2193   1        {
2194   2          DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
2195   2        }
2196   1        else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
2197   1        {
2198   2          DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
2199   2        }
2200   1        
2201   1        else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
2202   1        {
2203   2          DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
2204   2        }
2205   1        else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
2206   1        {
2207   2          DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
2208   2        }
2209   1        else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
2210   1        {
2211   2          DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
2212   2        }
2213   1        else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
2214   1        {
2215   2          DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
2216   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 37  

2217   1        else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
2218   1        {
2219   2          DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
2220   2        }
2221   1        else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
2222   1        {
2223   2          DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
2224   2        }
2225   1        #endif
2226   1      }
2227          
2228          
2229          /*******************************************************/
2230          /*******************************************************/
2231          /*******************************************************/
2232          #ifdef Function_ScreenDisplay
2233          //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
2234          //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
2235          #endif
2236          void ShowLowBattery(void)//低电压界面
2237          {
2238   1        #ifdef Function_ScreenDisplay
2239   1        DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
2240   1        DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
2241   1        #endif  
2242   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2243   1        {
2244   2          if (--BatteryMgr.TimeCnt < 1 )
2245   2          {
2246   3            CurrentScreen = SCREEN_Main;
2247   3            FpIdentifyMgr.Status = FPMcmdStart;
2248   3            CardIdentifyMgr.Status = ReadingCardID;
2249   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2250   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2251   3            {
2252   4              RefreshSystemSleepTime();
2253   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2254   4              #ifdef Function_ScreenDisplay
2255   4              Clear_Screen();
2256   4              DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
2257   4              #endif
2258   4            }
2259   3            else
2260   3            {
2261   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2262   4            }
2263   3          }
2264   2        }
2265   1      }
2266          
2267          
2268          /*******************************************************/
2269          /*******************************************************/
2270          /*******************************************************/
2271          void ShowLanguageSetting(void)//界面_语言设定
2272          {
2273   1        
2274   1        /*code uint8_t LanguageStr[]={ZF_1,ZF_xiaoshudian,HZ_zhong,HZ_wenzi,HZ_end};
2275   1      //  code uint8_t LanguageStrEn[]={"2.English"};
2276   1          
2277   1          DisHZ16x14Str(0,10,LanguageStr,NormalDisplay);
2278   1        
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 38  

2279   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2280   1        {
2281   1          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2282   1          {
2283   1            if ( VoiceMenuMgr.MenuPoint < 2 )
2284   1            {
2285   1              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2286   1            }
2287   1      //      else
2288   1      //      {
2289   1      //        PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2290   1      //      }
2291   1            VoiceMenuMgr.MenuPoint++;
2292   1          }
2293   1        }*/
2294   1      }
2295          
2296          /*******************************************************/
2297          /*******************************************************/
2298          //uint8_t VoiceWait=0;
2299          /*******************************************************/
2300          void ShowVolumeSetting(void)//界面_音量设定
2301          { 
2302   1        #ifdef Function_ScreenDisplay
2303   1        code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
2304   1      //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
2305   1        code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
2306   1      //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
2307   1        
2308   1        DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
2309   1        DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
2310   1        #endif
2311   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2312   1        {
2313   2          {
2314   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2315   3            {
2316   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2317   4              VoiceMenuMgr.MenuPoint++;
2318   4            }
2319   3          }
2320   2        } 
2321   1      }
2322          
2323          /*******************************************************/
2324          /*******************************************************/
2325          /*******************************************************/
2326          void ShowMemoryUsage(void)//界面_内存使用情况
2327          {
2328   1        
2329   1      }
2330          
2331          /*******************************************************/
2332          /*******************************************************/
2333          /*******************************************************/
2334          void ShowManagerIdentify(void)//界面_管理员认证
2335          {
2336   1        uint8_t i;
2337   1        #ifdef Function_ScreenDisplay
2338   1        code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
2339   1      //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
2340   1        code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 39  

2341   1      //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
2342   1        //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
2343   1        #endif
2344   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
2345   1        {
2346   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2347   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2348   2            )
2349   2          {
2350   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2353   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2354   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2355   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2356   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2357   3            DataInputMgr.Status = InputIdle;
2358   3            PasscodeUserRegisterMgr.UserID = 0x01;
2359   3            PasscodeUserRegisterMgr.UserPriority = Master;
2360   3            
2361   3            PasscodeInputMgr.Point = 0x00;
2362   3            PasscodeInputMgr.PasscodeLen = 12;
2363   3            PasscodeInputMgr.Status = PasscodeInputStart;
2364   3            for (i=0;i<12;i++)
2365   3            {
2366   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2367   4            }
2368   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2369   3            //GUI_Flag_RefreshLCD = bTRUE;
2370   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2371   3              #ifdef Function_ScreenDisplay
2372   3              Clear_Screen();
2373   3              DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
2374   3              #endif
2375   3            #endif
2376   3            
2377   3          }
2378   2          else
2379   2          {
2380   3            PasscodeInputMgr.Point = 0x00;
2381   3            PasscodeInputMgr.PasscodeLen = 12;
2382   3            PasscodeInputMgr.Status = PasscodeInputStart;
2383   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2384   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2385   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2386   3            {
2387   4              PasscodeInputMgr.InputBuff[i]=0xff;
2388   4            }
2389   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2390   3            FpIdentifyMgr.Status = FPMcmdStart;
2391   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2392   3            #ifdef Function_ScreenDisplay
2393   3            Clear_Screen();
2394   3            DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
2395   3            #endif
2396   3          }
2397   2        }
2398   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
2399   1        {
2400   2      
2401   2          GUI_PasscodeInputCreat(6,16);
2402   2          
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 40  

2403   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2404   2          {
2405   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2406   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
2407   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2408   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2409   3               )
2410   3            {
2411   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2412   4            }
2413   3            //GUI_Flag_RefreshLCD = bTRUE;
2414   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2415   3      
2416   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2417   3            {
2418   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2419   4              #ifdef Function_ScreenDisplay
2420   4              Clear_Screen();
2421   4              DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
2422   4              #endif
2423   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2424   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2425   4              {
2426   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2427   5              } 
2428   4            }
2429   3            else
2430   3            {
2431   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2432   4              #ifdef Function_ScreenDisplay
2433   4              Clear_Screen();
2434   4              DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
2435   4              #endif
2436   4            }
2437   3            
2438   3          }
2439   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2440   2          {
2441   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2442   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2443   3          }
2444   2      
2445   2          FpUserIdentify();
2446   2          if ( (FpIdentifyMgr.Status == success)
2447   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2448   2            )
2449   2          {
2450   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2451   3            FpIdentifyMgr.Status = FPMcmdStart;
2452   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2453   3            #ifdef Function_ScreenDisplay
2454   3            Clear_Screen();
2455   3            DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
2456   3            #endif
2457   3            #ifdef Function_FPMbreathingLed
2458   3            FpIdentifyMgr.BreathingLED = 1;
2459   3            SetFPMbreathingLed(FPMbreathingLed_Green);
2460   3            #endif  
2461   3          }
2462   2          else if (( FpIdentifyMgr.Status == fail)
2463   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 41  

2464   2            )
2465   2          {
2466   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2467   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
2468   4            }
2469   3            else{
2470   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2471   4            }
2472   3            FpIdentifyMgr.Status = FPMcmdStart;
2473   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
2474   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2475   3            //GUI_Flag_RefreshLCD = bTRUE;
2476   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2477   3            #ifdef Function_ScreenDisplay
2478   3            Clear_Screen();
2479   3            DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
2480   3            #endif
2481   3            #ifdef Function_FPMbreathingLed
2482   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2483   3            #endif
2484   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2485   3            {
2486   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2487   4            }
2488   3          }
2489   2        }
2490   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2491   1        {
2492   2          GoToMainMenu();
2493   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
2494   2        }
2495   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2496   1        {
2497   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2498   2          {
2499   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2500   3            {
2501   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2502   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2503   4            }
2504   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2505   3            CardIdentifyMgr.Status = ReadingCardID;
2506   3            FpIdentifyMgr.Status = FPMcmdStart;
2507   3            CurrentScreen = SCREEN_Main;
2508   3            #ifdef Function_FPMbreathingLed
2509   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2510   3            #endif
2511   3          }
2512   2        }
2513   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2514   1        {
2515   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2516   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2517   2          CardIdentifyMgr.Status = ReadingCardID;
2518   2          FpIdentifyMgr.Status = FPMcmdStart;
2519   2          CurrentScreen = SCREEN_Main;
2520   2          #ifdef Function_FPMbreathingLed
2521   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2522   2          #endif
2523   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 42  

2524   1      
2525   1      }
2526          /*******************************************************/
2527          /*******************************************************/
2528          /*******************************************************/
2529          void ShowUnlockingModeSetting(void)//界面_解锁模式设置
2530          {
2531   1        #ifdef Function_ScreenDisplay
2532   1        code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
2533   1      //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
2534   1        code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
2535   1      //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
2536   1        code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
2537   1      //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
2538   1        #endif
2539   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2540   1        {
2541   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2542   2        }
2543   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2544   1        { 
2545   2            #ifdef Function_ScreenDisplay
2546   2            DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
2547   2            DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
2548   2            #endif
2549   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2550   2            {
2551   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2552   3              {
2553   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2554   4                VoiceMenuMgr.MenuPoint++;
2555   4              }
2556   3            }
2557   2        }
2558   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2559   1        {
2560   2          UnlockingModeMgr.TimeCnt = 0;
2561   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2562   2          { 
2563   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2564   3            {
2565   4              #ifdef Function_ScreenDisplay
2566   4                Clear_Screen();
2567   4                DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
2568   4              #endif
2569   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2570   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2571   4            }
2572   3          }
2573   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2574   2        }
2575   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2576   1        {
2577   2          if (UnlockingModeMgr.TimeCnt > 0)
2578   2          {
2579   3            UnlockingModeMgr.TimeCnt--;
2580   3          }
2581   2          else
2582   2          {
2583   3            SystemConfigSave();
2584   3            GoToSystemConfigMenu();
2585   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 43  

2586   2        }
2587   1      }
2588          
2589          /*******************************************************/
2590          /*******************************************************/
2591          /*******************************************************/
2592          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2593          {
2594   1        #ifdef Function_ScreenDisplay
2595   1        //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
2596   1      //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
2597   1        code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
2598   1      //  code uint8_t EnabledStrEn[]={"1. ON"};
2599   1        code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
2600   1      //  code uint8_t DisabledStrEn[]={"2. OFF"};
2601   1      
2602   1        DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
2603   1        DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
2604   1        #endif
2605   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2606   1        {
2607   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2608   2          {
2609   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2610   3            VoiceMenuMgr.MenuPoint++;
2611   3          }
2612   2        }
2613   1      }
2614          
2615          /*******************************************************/
2616          /*******************************************************/
2617          /*******************************************************/
2618          void ShowPickAlarmEnableSetting(void)//界面_防撬告警使能设置
2619          {
2620   1        #ifdef Function_ScreenDisplay
2621   1        code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
2622   1      //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
2623   1        code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
2624   1      //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
2625   1      
2626   1        DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
2627   1        DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
2628   1        #endif
2629   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2630   1        {
2631   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2632   2          {
2633   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2634   3            VoiceMenuMgr.MenuPoint++;
2635   3          }
2636   2          /*
2637   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2638   2          
2639   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2640   2          {
2641   2            VoiceMenuMgr.MenuPoint = 0;
2642   2          }
2643   2          */
2644   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 44  

2645   1      
2646   1        
2647   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2648   1          {
2649   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2650   2          }
2651   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2652   1          {
2653   2            
2654   2          }
2655   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2656   1          {     
2657   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2658   2            SystemConfigSave();
2659   2            Config_AntiPrying_Interrupt();
2660   2            GoToSystemConfigMenu(); 
2661   2          }
2662   1      }
2663          
2664          /*******************************************************/
2665          /*******************************************************/
2666          extern uint16_t KeyHoldTimeCnt;
2667          /*******************************************************/
2668          void ShowRestoreFactoryDefault(void)//界面_恢复出厂
2669          {
2670   1        uint8_t i;
2671   1        #ifdef Function_ScreenDisplay
2672   1        code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
2673   1      //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
2674   1        #endif
2675   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2676   1      
2677   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2678   1        {
2679   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2680   2          //GUI_Flag_RefreshLCD = bTRUE;
2681   2          RestoreFactoryDefaultMgr.Selection = NO;
2682   2          //SET_LRandConfirmLED_ON();
2683   2          //SET_AP_LED_ON();
2684   2        }
2685   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2686   1        {
2687   2          #ifdef Function_ScreenDisplay
2688   2          Clear_Screen();
2689   2          DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
2690   2          DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
2691   2          #endif
2692   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2693   2          {
2694   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2695   3            {
2696   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2697   4              VoiceMenuMgr.MenuPoint++;
2698   4            }
2699   3          }
2700   2        }
2701   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
2702   1        { 
2703   2          #ifdef Function_ScreenDisplay
2704   2          Clear_Screen();
2705   2          DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 45  

2706   2          #endif
2707   2          //SET_ALLKEYLED_OFF();
2708   2          
2709   2          RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
2710   2      
2711   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2712   2      
2713   2        }
2714   1        else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2715   1        {
2716   2          if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2717   2            {
2718   3              RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2719   3              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2720   3              RestoreFactoryDefaultMgr.FailTimes = 0x00;
2721   3            }
2722   2          else{ 
2723   3            RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2724   3            PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2725   3            #ifdef Function_ScreenDisplay
2726   3            Clear_Screen();
2727   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
2728   3            #endif
2729   3          }
2730   2        } 
2731   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2732   1          {
2733   2        
2734   2            DeleteAllFpFromFPM();
2735   2            if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2736   2            {
2737   3              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2738   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2739   3              CheckMemoryMgr.FpUserNum = 0x00;
2740   3              CheckMemoryMgr.FpMasterNum = 0x00;  
2741   3              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2742   3              {
2743   4                FpUserMemoryMgr[i].UserID = 0xFFFF;
2744   4                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2745   4                FpUserMemoryMgr[i].UserPriority = Undefined;
2746   4              } 
2747   3            }
2748   2            else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2749   2            {
2750   3              if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2751   3              {
2752   4                RestoreFactoryDefaultMgr.FailTimes++;
2753   4                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2754   4                RefreshSystemSleepTime();
2755   4              }
2756   3              else
2757   3              {
2758   4                RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2759   4                PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2760   4                #ifdef Function_ScreenDisplay
2761   4                Clear_Screen();
2762   4                DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
2763   4                #endif
2764   4              }
2765   3            } 
2766   2          }
2767   1        
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 46  

2768   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2769   1          {     
2770   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2771   2            {
2772   3              DeleteAllCardUserfromMemory();
2773   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2774   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2775   3              CheckMemoryMgr.CardUserNum = 0x00;
2776   3            } 
2777   2          }
2778   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2779   1          { 
2780   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2781   2            {
2782   3              DeleteAllPasscodeMasterfromMemory();
2783   3              DeleteAllPasscodeUserfromMemory();
2784   3              SystemConfigReset();
2785   3              #ifdef Function_EventLog
2786   3              DeleteAllLog();
2787   3              #endif
2788   3              
2789   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2790   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2791   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2792   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2793   3              //GUI_Flag_RefreshLCD = bTRUE;
2794   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2795   3              #ifdef Function_ScreenDisplay
2796   3              Clear_Screen();
2797   3              DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
2798   3              #endif
2799   3            }
2800   2          }
2801   1        
2802   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2803   1          {
2804   2      
2805   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2806   2            {
2807   3              CurrentScreen = SCREEN_Main;
2808   3              RefreshSystemSleepTime();
2809   3              KeyHoldTimeCnt=0;
2810   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2811   3              FpIdentifyMgr.Status = FPMcmdStart;
2812   3              CardIdentifyMgr.Status = ReadingCardID;
2813   3      
2814   3            }
2815   2          }
2816   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2817   1          {
2818   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2819   2            {
2820   3              CurrentScreen = SCREEN_Main;
2821   3              KeyHoldTimeCnt=0;
2822   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2823   3              FpIdentifyMgr.Status = FPMcmdStart;
2824   3              CardIdentifyMgr.Status = ReadingCardID;
2825   3            }
2826   2          }
2827   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2828   1          {
2829   2            GoToSystemConfigMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 47  

2830   2          }
2831   1      
2832   1      }
2833          
2834          /*******************************************************/
2835          /*******************************************************/
2836          /*******************************************************/
2837          void ShowInitialization(void)//界面_初始化
2838          {
2839   1        
2840   1        uint8_t i;
2841   1        #ifdef Function_ScreenDisplay
2842   1        code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
2843   1      //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
2844   1        code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
2845   1      //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
2846   1        code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
2847   1      //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
2848   1        code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
2849   1      //  code uint8_t EepromStr_En[]={"Memory"}; 
2850   1        code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
2851   1      //  code uint8_t TouchStr_En[]={"Touch"}; 
2852   1        code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
2853   1      //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
2854   1        code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
2855   1      //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
2856   1        #endif  
2857   1        
2858   1        if ( InitializationMgr.Status == StartInitialization )
2859   1        {
2860   2          //SET_ALLKEYLED_OFF();
2861   2          #ifdef Function_ScreenDisplay
2862   2          DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
2863   2          DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
2864   2          DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
2865   2          #endif
2866   2          CheckMemoryMgr.Status = StartCheckMemory;
2867   2          InitializationMgr.Status = MemoryCheck;
2868   2        }
2869   1        else if ( InitializationMgr.Status == MemoryCheck )
2870   1        {
2871   2          #ifdef Function_ScreenDisplay
2872   2          DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
2873   2          #endif
2874   2          SystemConfigLoad();
2875   2          ReadLockBrand();
2876   2          InitializationMgr.MemoryCheckPass = bTRUE;
2877   2          InitializationMgr.Status = MemoryCheckWait;
2878   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2879   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2880   2        }
2881   1        else if ( InitializationMgr.Status == MemoryCheckWait )
2882   1        {
2883   2          #ifdef Function_ScreenDisplay
2884   2          if (InitializationMgr.MemoryCheckPass == bTRUE)
2885   2          { 
2886   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2887   3          }
2888   2          else
2889   2          {
2890   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
2891   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 48  

2892   2          #endif
2893   2          if (--InitializationMgr.TimeCnt < 1 )
2894   2          {
2895   3            InitializationMgr.Status = FingerPrintCheck;
2896   3            #ifdef Function_ScreenDisplay
2897   3            Clear_Screen_Page(4);
2898   3            Clear_Screen_Page(5);
2899   3            DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
2900   3            #endif
2901   3          }
2902   2        }
2903   1        else if ( InitializationMgr.Status == FingerPrintCheck )
2904   1        {
2905   2      
2906   2          GUI_GetUserNumList();   //read user number
2907   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
2908   2          {
2909   3            //SET_KEYLED_ON(KEY_TWO);
2910   3            #ifdef Function_FPMbreathingLed
2911   3            FpmAckMgr.Status = WaitACK;
2912   3            FPM_SetSecurityLevel(1);  //
2913   3            for (i=0;i<25;i++)
2914   3            {
2915   4              Hardware_DelayMs(10);
2916   4              FPM_Mgr_Task();
2917   4              if ( FpmAckMgr.Status == GotACK )
2918   4              {
2919   5                break;
2920   5              }
2921   4            }
2922   3            #endif
2923   3      
2924   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
2925   3            InitializationMgr.Status = FingerPrintCheckWait;
2926   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2927   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2928   3            
2929   3          }
2930   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
2931   2          { 
2932   3            //CheckMemoryMgr.Status = StartCheckMemory;
2933   3            //InitializationMgr.Status = StartInitialization;//redo
2934   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
2935   3            InitializationMgr.Status = FingerPrintCheckWait;
2936   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2937   3            DEF_Fail_Beep;
2938   3          }
2939   2        }
2940   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
2941   1        {
2942   2          #ifdef Function_ScreenDisplay
2943   2          if (InitializationMgr.FingerPrintCheckPass == bTRUE)
2944   2          { 
2945   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2946   3          }
2947   2          else
2948   2          {
2949   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
2950   3          }
2951   2          #endif
2952   2          if (--InitializationMgr.TimeCnt < 1 )
2953   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 49  

2954   3            InitializationMgr.Status = CardReaderCheck;
2955   3            #ifdef Function_ScreenDisplay
2956   3            Clear_Screen_Page(4);
2957   3            Clear_Screen_Page(5); 
2958   3            DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
2959   3            #endif
2960   3          }
2961   2        }
2962   1        else if ( InitializationMgr.Status == CardReaderCheck )
2963   1        {
2964   2          //SET_KEYLED_ON(KEY_THREE);
2965   2          InitializationMgr.CardReaderCheckPass = bTRUE;
2966   2          InitializationMgr.Status = CardReaderCheckWait;
2967   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2968   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2969   2        }
2970   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
2971   1        {
2972   2          #ifdef Function_ScreenDisplay
2973   2          if (InitializationMgr.CardReaderCheckPass == bTRUE)
2974   2          { 
2975   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2976   3          }
2977   2          else
2978   2          {
2979   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
2980   3          }
2981   2          #endif
2982   2          if (--InitializationMgr.TimeCnt < 1 )
2983   2          {
2984   3            InitializationMgr.Status = TouchCheck;
2985   3            #ifdef Function_ScreenDisplay
2986   3            Clear_Screen_Page(4);
2987   3            Clear_Screen_Page(5); 
2988   3            DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
2989   3            #endif
2990   3          }
2991   2        }
2992   1        else if ( InitializationMgr.Status == TouchCheck )
2993   1          {
2994   2            //SET_KEYLED_ON(KEY_FOUR);
2995   2            InitializationMgr.TouchCheckPass = bTRUE;
2996   2            InitializationMgr.Status = TouchCheckWait;
2997   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2998   2       
2999   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3000   2          }
3001   1        else if ( InitializationMgr.Status == TouchCheckWait )
3002   1          {
3003   2            #ifdef Function_ScreenDisplay
3004   2            if (InitializationMgr.TouchCheckPass == bTRUE)
3005   2            { 
3006   3              DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
3007   3            }
3008   2            else
3009   2            {
3010   3              DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
3011   3            }
3012   2            #endif
3013   2            if (--InitializationMgr.TimeCnt < 1 )
3014   2            {
3015   3              InitializationMgr.Status = CheckFinished;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 50  

3016   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3017   3              #ifdef Function_ScreenDisplay
3018   3              Clear_Screen_Page(4);
3019   3              Clear_Screen_Page(5);
3020   3              if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
3021   3                &&(InitializationMgr.MemoryCheckPass == bTRUE )
3022   3                &&(InitializationMgr.CardReaderCheckPass == bTRUE )
3023   3                &&(InitializationMgr.TouchCheckPass == bTRUE ) )
3024   3              {
3025   4                DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
3026   4              }
3027   3              else
3028   3              {
3029   4                DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
3030   4              }
3031   3              #endif
3032   3            }
3033   2          }
3034   1      
3035   1        else if ( InitializationMgr.Status == CheckFinished )
3036   1        {
3037   2          if (--InitializationMgr.TimeCnt < 1 )
3038   2          {
3039   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3040   3            {
3041   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3042   4              BatteryMgr.PostLowBattery = bFALSE;
3043   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3044   4              CurrentScreen = SCREEN_LowBattery;  
3045   4            }
3046   3            else
3047   3            {
3048   4              CurrentScreen = SCREEN_Main;
3049   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3050   4              FpIdentifyMgr.Status = FPMcmdStart;
3051   4              CardIdentifyMgr.Status = ReadingCardID;
3052   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3053   4            }
3054   3          }
3055   2        }
3056   1      }
3057          
3058          /*******************************************************/
3059          /*******************************************************/
3060          /*******************************************************/
3061          void ShowSystemLocked(void)//界面_系统锁定
3062          {
3063   1        #ifdef Function_ScreenDisplay
3064   1        uint16_t Temp;
3065   1        code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
3066   1      //  code uint8_t SystemLockedStrEn[]={"System Lock"};
3067   1        #endif
3068   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3069   1        {
3070   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3071   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-625))
3072   2          {
3073   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3074   3            {
3075   4              if(VoiceMgr.Enable == bFALSE)
3076   4              {
3077   5                VoiceMgr.Enable = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 51  

3078   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3079   5                VoiceMgr.Enable = bFALSE;
3080   5              }
3081   4              else
3082   4              {
3083   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3084   5              }
3085   4            }
3086   3          }
3087   2        }
3088   1        else
3089   1        {
3090   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3091   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3092   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3093   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
3094   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3095   2          CurrentScreen = SCREEN_Main;
3096   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3097   2          FpIdentifyMgr.Status = FPMcmdStart;
3098   2          CardIdentifyMgr.Status = ReadingCardID;
3099   2          STOP_VOICEPLAY();
3100   2        }
3101   1        #ifdef Function_ScreenDisplay
3102   1        DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
3103   1        DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
3104   1        Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
3105   1        DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
3106   1        DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
3107   1        DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
3108   1        #endif
3109   1      }
3110          
3111          /*******************************************************/
3112          /*******************************************************/
3113          /*******************************************************/
3114          #ifdef Function_ScreenDisplay
3115           code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
3116          // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
3117           //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
3118           //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
3119           code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
3120          // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
3121          #endif
3122          void ShowPickLockAlarm(void)//界面_防撬告警
3123          {
3124   1        bool_t Flag_ExitPickLockAlarm;
3125   1      
3126   1        RefreshSystemSleepTime();   //reset system sleep time
3127   1      
3128   1        #ifdef Function_ScreenDisplay
3129   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3130   1        {
3131   2          DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
3132   2          Clear_Screen_Page(5);
3133   2          DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
3134   2        }
3135   1        #endif  
3136   1        
3137   1        Flag_ExitPickLockAlarm = bFALSE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 52  

3138   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
3139   1        {
3140   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3141   2          
3142   2          CardUserIdentify();
3143   2        }
3144   1      
3145   1          
3146   1        if ( CardIdentifyMgr.Status == Success)
3147   1        {
3148   2          Flag_ExitPickLockAlarm = bTRUE;
3149   2        }
3150   1        else if ( CardIdentifyMgr.Status == Fail)
3151   1        {
3152   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3153   2          {
3154   3            Flag_ExitPickLockAlarm = bTRUE;
3155   3          }
3156   2          else
3157   2          {
3158   3            CardIdentifyMgr.Status = ReadingCardID;
3159   3          }
3160   2        }
3161   1      
3162   1        FpUserIdentify();
3163   1        if ( FpIdentifyMgr.Status == success)
3164   1        {
3165   2          Flag_ExitPickLockAlarm = bTRUE; 
3166   2        }
3167   1        else if ( FpIdentifyMgr.Status == fail)
3168   1        {
3169   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3170   2          {
3171   3            Flag_ExitPickLockAlarm = bTRUE;   
3172   3          }
3173   2          else
3174   2          {
3175   3            FpIdentifyMgr.Status = FPMcmdStart;
3176   3          }
3177   2        }
3178   1      
3179   1        PasscodeUserIdentify();
3180   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3181   1        {
3182   2          Flag_ExitPickLockAlarm = bTRUE;
3183   2        }
3184   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3185   1        {
3186   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3187   2          {
3188   3            Flag_ExitPickLockAlarm = bTRUE;
3189   3          }
3190   2          else
3191   2          {
3192   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3193   3          }
3194   2        }
3195   1      
3196   1        if ( AntiPryingMgr.TimeCnt > 0 ){
3197   2          AntiPryingMgr.TimeCnt--;
3198   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 53  

3199   1        else{
3200   2          Flag_ExitPickLockAlarm = bTRUE;
3201   2        }
3202   1        
3203   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3204   1        {
3205   2          STOP_VOICEPLAY();
3206   2          #ifdef Function_FPMbreathingLed
3207   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3208   2          #endif
3209   2          INT1_RST();
3210   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3211   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3212   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3213   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3214   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3215   2          CurrentScreen = SCREEN_Main;
3216   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3217   2          FpIdentifyMgr.Status = FPMcmdStart;
3218   2          CardIdentifyMgr.Status = ReadingCardID;
3219   2          RefreshSystemSleepTime();   //reset system sleep time
3220   2        }
3221   1        else
3222   1        {
3223   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3224   2          {
3225   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3226   3          }
3227   2        }
3228   1      }
3229          
3230          /*******************************************************/
3231          /*******************************************************/
3232          void ShowAgingTest(void)//界面_老化测试
3233          {
3234   1        #ifdef Function_ScreenDisplay
3235   1        uint8_t Str1[]={"AGING TEST"}; 
3236   1        uint8_t Str2[]={"MOTOR:"}; 
3237   1        uint8_t Str3[]={"INPUT:  . V"};
3238   1        uint8_t Str4[]={"SLIDE:"};
3239   1      
3240   1        DisEN16x8Str(0,16,Str1,NormalDisplay);
3241   1        #endif
3242   1        GUI_MotorAgingTest();
3243   1        #ifdef Function_ScreenDisplay
3244   1        DisEN16x8Str(4,0,Str2,NormalDisplay);
3245   1        DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
3246   1        DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
3247   1        DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
3248   1        DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
3249   1      
3250   1        DisEN16x8Str(6,0,Str3,NormalDisplay); 
3251   1        DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
3252   1        DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
3253   1        #endif
3254   1      }
3255          /*******************************************************/
3256          /*******************************************************/
3257          /*******************************************************/
3258          
3259          void ShowEventLogBySequence(void)//界面_按顺序界面_事件日志
3260          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 54  

3261   1        #ifdef Function_EventLog
3262   1        code uint8_t VoiceReportLogBuff[][5]=
3263   1        { 
3264   1          {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
3265   1          {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
3266   1          {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
3267   1          {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
3268   1        };
3269   1      
3270   1        uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
3271   1        uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
3272   1      
3273   1        if ( CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
3274   1        {
3275   2          SearchEventLogBySequence();
3276   2          CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
3277   2          if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
3278   2          {
3279   3            LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
3280   3            LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
3281   3            CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
3282   3            VoiceMenuMgr.MenuPoint = 0;
3283   3            VoiceMenuMgr.TotalMenuNum = 3;    
3284   3          }
3285   2          else
3286   2          {
3287   3            PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
3288   3          }
3289   2        }
3290   1        else if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
3291   1        {
3292   2          if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
3293   2          {
3294   3              DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
3295   3          }
3296   2          else
3297   2          {
3298   3            //LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
3299   3            if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
3300   3            {
3301   4              LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
3302   4              LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
3303   4              //VoiceReportLogMgr.Status = ReportLogInit;
3304   4              Clear_Screen();
3305   4              DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3306   4            }
3307   3            //DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3308   3            
3309   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
3310   3            {
3311   4              if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3312   4              {
3313   5                PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
3314   5                VoiceMenuMgr.MenuPoint++;
3315   5              }
3316   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
3317   4            }
3318   3            else
3319   3            {
3320   4             // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3321   4            }
3322   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 55  

3323   2        }
3324   1        #endif
3325   1      }
3326          
3327          /*******************************************************/
3328          /*******************************************************/
3329          /*******************************************************/
3330          void ShowClearEventLog(void)//界面_清除事件日志
3331          {
3332   1        #ifdef Function_EventLog
3333   1        uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
3334   1        if (LogDeleteMgr.Status == StartLogDelete)
3335   1        {
3336   2          LogDeleteMgr.DeleteSectorNum = 0;
3337   2          LogDeleteMgr.Percentage = 0;
3338   2          LogDeleteMgr.Status = WaitforLogDeleteCofirm;
3339   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
3340   2        }
3341   1        else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
3342   1        {
3343   2          #ifdef Function_ScreenDisplay
3344   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
3345   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
3346   2          #endif
3347   2        }
3348   1        else if (LogDeleteMgr.Status == LogDeleting)
3349   1        {
3350   2          if ( LogDeleteMgr.Percentage < 100 )
3351   2          {
3352   3            if ( LogDeleteMgr.Percentage == 0 )
3353   3            {
3354   4              #ifdef Function_ScreenDisplay
3355   4              Clear_Screen();
3356   4              DisHZ16x14Str(3,30,DELing,NormalDisplay);
3357   4              #endif
3358   4              if ( DeleteAllLog() != S_SUCCESS )
3359   4              {
3360   5                if ( DeleteAllLog() != S_SUCCESS )
3361   5                {
3362   6                  DeleteAllLog();
3363   6                }
3364   5              }
3365   4            }
3366   3            LogDeleteMgr.Percentage++;
3367   3          }
3368   2          else
3369   2          {
3370   3            LogDeleteMgr.Status = LogDeleteSuccess;
3371   3            LogDeleteMgr.Percentage = 0;
3372   3            RefreshSystemSleepTime();
3373   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
3374   3            #ifdef Function_ScreenDisplay
3375   3            Clear_Screen();
3376   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
3377   3            #endif
3378   3          }
3379   2        }
3380   1        else if (LogDeleteMgr.Status == LogDeleteSuccess)
3381   1        {
3382   2          if ( LogDeleteMgr.Percentage < 100 )
3383   2          {
3384   3            LogDeleteMgr.Percentage++;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 56  

3385   3          }
3386   2          else 
3387   2          {
3388   3            LogDeleteMgr.Status = QuitLogDelete;
3389   3          }
3390   2        }
3391   1        else
3392   1        {
3393   2          GotoLogMenu();
3394   2        }
3395   1        #endif
3396   1      }
3397          
3398          /*******************************************************/
3399          /*******************************************************/
3400          
3401          
3402          /*******************************************************/
3403          /*******************************************************/
3404          void GUI_Button_Monitor(void)//GUI按钮监视器
3405          {
3406   1        //DEBUG_MARK;
3407   1        uint8_t i;
3408   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3409   1        {
3410   2          //return;
3411   2        }
3412   1        
3413   1        if ( MotorMgr.MotorStatus != IDLE )
3414   1        {
3415   2          return;
3416   2        }
3417   1      
3418   1        gui_keycode = Key_Scan();
3419   1      
3420   1        DEBUG_MARK;
3421   1      
3422   1        if ( gui_keycode != KEY_NONE )
3423   1        {
3424   2          RefreshSystemSleepTime();
3425   2        }
3426   1        switch ( CurrentScreen)
3427   1        {
3428   2          case SCREEN_Main:
3429   2      
3430   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3431   2            {
3432   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3437   3            }
3438   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
3439   2            {
3440   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
3441   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3442   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
3443   3            }
3444   2            #ifdef Function_DoorBellTouchIndependented
                    else if ( gui_keycode == KEY_DOORBELL )
                    { 
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 57  

                      PLAY_VOICE_DOORBELL();  
                    }
                    #endif
3450   2      
3451   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3452   2            {
3453   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3454   3              {
3455   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3456   4                {
3457   5                  
3458   5                  PasscodeInputMgr.Point = 0x01;
3459   5                  PasscodeInputMgr.PasscodeLen = 16;
3460   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3461   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3462   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3463   5                  {
3464   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3465   6                  }
3466   5                  
3467   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3468   5                  DEF_ButtonPress_Voice;
3469   5                }
3470   4               }
3471   3              else if ( gui_keycode == KEY_ASTERISK )
3472   3              {
3473   4                DEF_ButtonPress_Voice;
3474   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3475   4                {
3476   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3477   5                }
3478   4                else 
3479   4                {
3480   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3481   5                  SystemPowerMgr.SleepSource = UserForced;
3482   5                }
3483   4              }
3484   3              else if ( gui_keycode == KEY_POUNDSIGN )
3485   3              { 
3486   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3487   4                { 
3488   5                   DEF_ButtonPress_Voice;
3489   5                   CurrentScreen = SCREEN_ManagerIdentify;
3490   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3491   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3492   5                }
3493   4                else
3494   4                {
3495   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
3496   5                  PLAY_VOICE_DOORBELL();  //DOORBELL
3497   5                  DoorBellMgr.TimeCnt = 150;
3498   5                  CurrentScreen = SCREEN_DoorBell;
3499   5                  #else
                          DEF_ButtonPress_Voice;
                          #endif
3502   5                } 
3503   4              }
3504   3            }
3505   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3506   2                      &&( gui_keycode != KEY_DOORBELL )
3507   2                    )
3508   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 58  

3509   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3510   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3511   3              {
3512   4                DEF_ButtonPress_Voice;
3513   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3514   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
3515   4              }
3516   3            }
3517   2            
3518   2            break;
3519   2            
3520   2          case SCREEN_MainMenu:
3521   2      
3522   2              if ( gui_keycode == KEY_ONE )
3523   2              {
3524   3                DEF_ButtonPress_Voice;
3525   3                Hardware_DelayMs(100);
3526   3                GoToFpMenu();
3527   3              }
3528   2              else if ( gui_keycode == KEY_TWO )
3529   2              {
3530   3                DEF_ButtonPress_Voice;
3531   3                Hardware_DelayMs(100);
3532   3                GoToPasswordMenu();
3533   3              }
3534   2              else if ( gui_keycode == KEY_THREE )
3535   2              {
3536   3                DEF_ButtonPress_Voice;
3537   3                Hardware_DelayMs(100);
3538   3                GoToCardMenu();
3539   3              }
3540   2              else if ( gui_keycode == KEY_FOUR )
3541   2              {
3542   3                DEF_ButtonPress_Voice;
3543   3                Hardware_DelayMs(100);
3544   3                GoToSystemConfigMenu();
3545   3              }
3546   2              else if ( gui_keycode == KEY_FIVE )
3547   2              {
3548   3                DEF_ButtonPress_Voice;
3549   3                Hardware_DelayMs(100);
3550   3                GotoLogMenu();
3551   3              }
3552   2              else if ( gui_keycode == KEY_ASTERISK )
3553   2              {
3554   3                #ifdef Function_FPMbreathingLed
3555   3                FpIdentifyMgr.BreathingLED = 0;
3556   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3557   3                #endif
3558   3                //DEF_ButtonPress_Voice;
3559   3                //FpmAckMgr.Status = WaitACK;
3560   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3561   3                CardIdentifyMgr.Status = ReadingCardID;
3562   3                FpIdentifyMgr.Status = FPMcmdStart;
3563   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3564   3                Hardware_DelayMs(100);
3565   3                CurrentScreen = SCREEN_Main;
3566   3              }
3567   2      
3568   2              break;
3569   2              
3570   2          case SCREEN_EventLogMenu:
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 59  

3571   2            
3572   2              #ifdef Function_EventLog
3573   2              if ( gui_keycode == KEY_ONE )
3574   2              {
3575   3                DEF_ButtonPress_Voice;
3576   3                Hardware_DelayMs(100);
3577   3                CurrentScreen = SCREEN_CheckEventLogBySequence;
3578   3                CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
3579   3              }
3580   2              else if ( gui_keycode == KEY_TWO )
3581   2              {
3582   3                DEF_ButtonPress_Voice;
3583   3                Hardware_DelayMs(100);
3584   3                CurrentScreen = SCREEN_DeleteEventLog;
3585   3                LogDeleteMgr.Status = StartLogDelete;
3586   3              }
3587   2              else if ( gui_keycode == KEY_ASTERISK )
3588   2              {
3589   3                DEF_ButtonPress_Voice;
3590   3                Hardware_DelayMs(100);
3591   3                GoToMainMenu();
3592   3              }
3593   2              #endif
3594   2              
3595   2              break;  
3596   2              
3597   2          case SCREEN_FpMenu:
3598   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3599   2              {
3600   3                #ifdef Function_FPMbreathingLed
3601   3                FpIdentifyMgr.BreathingLED = 0;
3602   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3603   3                #endif
3604   3              }
3605   2            
3606   2              if ( gui_keycode == KEY_ONE )
3607   2              {
3608   3                DEF_ButtonPress_Voice;
3609   3                Hardware_DelayMs(100);
3610   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3611   3                CurrentScreen = SCREEN_RegisterMasterFp;
3612   3                
3613   3              }
3614   2              else if ( gui_keycode == KEY_TWO )
3615   2              {
3616   3                DEF_ButtonPress_Voice;
3617   3                Hardware_DelayMs(100);
3618   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3619   3                CurrentScreen = SCREEN_RegisterUserFp;
3620   3              }
3621   2              else if ( gui_keycode == KEY_THREE )
3622   2              {
3623   3                DEF_ButtonPress_Voice;
3624   3                Hardware_DelayMs(100);
3625   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3626   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3627   3              }
3628   2              else if ( gui_keycode == KEY_ASTERISK )
3629   2              {
3630   3                DEF_ButtonPress_Voice;
3631   3                Hardware_DelayMs(100);
3632   3                GoToMainMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 60  

3633   3              }
3634   2              break;
3635   2                
3636   2          case SCREEN_CardUserMenu:
3637   2      
3638   2              if ( gui_keycode == KEY_ONE )
3639   2              {
3640   3                DEF_ButtonPress_Voice;
3641   3                Hardware_DelayMs(100);
3642   3                CurrentScreen = SCREEN_RegisterCardUser;
3643   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3644   3              }
3645   2              else if ( gui_keycode == KEY_TWO )
3646   2              {
3647   3                DEF_ButtonPress_Voice;
3648   3                Hardware_DelayMs(100);
3649   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3650   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3651   3              }
3652   2              else if ( gui_keycode == KEY_ASTERISK )
3653   2              {
3654   3                DEF_ButtonPress_Voice;
3655   3                Hardware_DelayMs(100);
3656   3                GoToMainMenu(); 
3657   3              }
3658   2              break;
3659   2              
3660   2          case SCREEN_PasscodeMenu: 
3661   2      
3662   2              if ( gui_keycode == KEY_ONE )
3663   2              {
3664   3                DEF_ButtonPress_Voice;
3665   3                Hardware_DelayMs(100);
3666   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3667   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3668   3                PasscodeUserRegisterMgr.UserPriority = Master;
3669   3              }
3670   2              
3671   2              else if ( gui_keycode == KEY_TWO )
3672   2              {
3673   3                DEF_ButtonPress_Voice;
3674   3                Hardware_DelayMs(100);
3675   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3676   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3677   3                PasscodeUserRegisterMgr.UserPriority = User;
3678   3              }
3679   2              else if ( gui_keycode == KEY_THREE )
3680   2              {
3681   3                DEF_ButtonPress_Voice;
3682   3                Hardware_DelayMs(100);
3683   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3684   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3685   3              }
3686   2              else if ( gui_keycode == KEY_ASTERISK )
3687   2              {
3688   3                DEF_ButtonPress_Voice;
3689   3                Hardware_DelayMs(100);
3690   3                GoToMainMenu();
3691   3              }
3692   2            break;
3693   2                
3694   2          case SCREEN_SystemConfigMenu:
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 61  

3695   2                
3696   2                if ( gui_keycode == KEY_ONE  )
3697   2                {
3698   3                  DEF_ButtonPress_Voice;
3699   3                  Hardware_DelayMs(100);
3700   3                  CurrentScreen = SCREEN_TimeSetting;
3701   3                    #ifdef Function_USE_Internal_RTC
                            SystemTime = UTCToSystemtime(G_SystemUTCTime);
                            #else
3704   3                    PCF8563_ReadTime();
3705   3                    #endif
3706   3                    GotSystemTime();  
3707   3                }
3708   2                else if ( gui_keycode == KEY_TWO )
3709   2                {
3710   3                  DEF_ButtonPress_Voice;
3711   3                  Hardware_DelayMs(100);
3712   3                  CurrentScreen = SCREEN_VolumeSetting;
3713   3                  VoiceMenuMgr.MenuPoint=0;
3714   3                  VoiceMenuMgr.TotalMenuNum = 3;
3715   3                }         
3716   2                else if ( gui_keycode == KEY_THREE )
3717   2                {
3718   3                  DEF_ButtonPress_Voice;
3719   3                  Hardware_DelayMs(100);
3720   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3721   3                  VoiceMenuMgr.MenuPoint=0;
3722   3                  VoiceMenuMgr.TotalMenuNum = 3;
3723   3                }
3724   2                else if ( gui_keycode == KEY_FOUR )
3725   2                {
3726   3                  DEF_ButtonPress_Voice;
3727   3                  Hardware_DelayMs(100);
3728   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3729   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3730   3                  VoiceMenuMgr.MenuPoint=0;
3731   3                  VoiceMenuMgr.TotalMenuNum = 3;
3732   3                }
3733   2                else if ( gui_keycode == KEY_FIVE )
3734   2                {
3735   3                  DEF_ButtonPress_Voice;
3736   3                  Hardware_DelayMs(100);
3737   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3738   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3739   3                  VoiceMenuMgr.MenuPoint=0;
3740   3                  VoiceMenuMgr.TotalMenuNum = 3;
3741   3                }
3742   2                else if ( gui_keycode == KEY_SIX )
3743   2                {
3744   3                  DEF_ButtonPress_Voice;
3745   3                  Hardware_DelayMs(100);
3746   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3747   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3748   3                  VoiceMenuMgr.MenuPoint=0;
3749   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3750   3                }
3751   2                else if ( gui_keycode == KEY_ASTERISK )
3752   2                {
3753   3                  DEF_ButtonPress_Voice;
3754   3                  Hardware_DelayMs(100);
3755   3                  GoToMainMenu(); 
3756   3                }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 62  

3757   2      
3758   2              break;
3759   2      
3760   2          case SCREEN_RegisterUserFp:
3761   2              
3762   2              if ( FpUserRegisterMgr.Status == InputUserID )
3763   2              {
3764   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3765   3              }
3766   2              if ( gui_keycode == KEY_ASTERISK )
3767   2              {
3768   3                DEF_ButtonPress_Voice;
3769   3                Hardware_DelayMs(100);
3770   3                GoToFpMenu(); 
3771   3              }
3772   2              
3773   2            break;
3774   2            
3775   2          case SCREEN_DeleteUserFp:
3776   2              if ( FpUserDeleteMgr.Status == InputUserID )
3777   2              {
3778   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3779   3              }
3780   2      
3781   2            break;
3782   2      
3783   2          case SCREEN_DeleteAllUserFp:
3784   2            
3785   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3786   2              {
3787   3                 if ( gui_keycode == KEY_POUNDSIGN )
3788   3                {
3789   4                  AllUserFpDeleteMgr.Selection = YES;
3790   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3791   4                }
3792   3                else if ( gui_keycode == KEY_ASTERISK )
3793   3                {
3794   4                  DEF_ButtonPress_Voice;
3795   4                  Hardware_DelayMs(100);
3796   4                  GoToFpMenu(); 
3797   4                }
3798   3              }
3799   2      
3800   2            break;
3801   2      
3802   2          case SCREEN_RegisterMasterFp:
3803   2              
3804   2              if ( FpUserRegisterMgr.Status == InputUserID )
3805   2              {
3806   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3807   3              }
3808   2              if ( gui_keycode == KEY_ASTERISK )
3809   2              {
3810   3                DEF_ButtonPress_Voice;
3811   3                Hardware_DelayMs(100);
3812   3                GoToFpMenu(); 
3813   3              }
3814   2              
3815   2            break;
3816   2            
3817   2          case SCREEN_DeleteMasterFp:
3818   2              if ( FpUserDeleteMgr.Status == InputUserID )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 63  

3819   2              {
3820   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3821   3              }
3822   2      
3823   2            break;
3824   2      
3825   2          case SCREEN_DeleteAllMasterFp:
3826   2            
3827   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3828   2              {
3829   2                if ( gui_keycode == KEY_FOUR )
3830   2                {
3831   2                  DEF_ButtonPress_Voice;
3832   2                  AllUserFpDeleteMgr.Selection = YES;
3833   2                }
3834   2                else if ( gui_keycode == KEY_SIX )
3835   2                {
3836   2                  DEF_ButtonPress_Voice;
3837   2                  AllUserFpDeleteMgr.Selection = NO;
3838   2                }
3839   2                else if ( gui_keycode == KEY_POUNDSIGN )
3840   2                {
3841   2                  DEF_ButtonPress_Voice;
3842   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
3843   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3844   2                  }
3845   2                  else{
3846   2                    AllUserFpDeleteMgr.Status = EXIT;
3847   2                  }
3848   2                }
3849   2              }*/
3850   2      
3851   2            break;
3852   2      
3853   2          case SCREEN_RegisterCardUser:
3854   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
3855   2              {
3856   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3857   3              }
3858   2              if ( gui_keycode == KEY_ASTERISK )
3859   2              {
3860   3                DEF_ButtonPress_Voice;
3861   3                Hardware_DelayMs(100);
3862   3                GoToCardMenu(); 
3863   3              }
3864   2      
3865   2            break;
3866   2            
3867   2          case SCREEN_DeleteCardUser:
3868   2      
3869   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
3870   2              {
3871   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3872   3              }
3873   2            break;
3874   2      
3875   2          case SCREEN_DeleteAllCardUser:
3876   2              
3877   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
3878   2              {
3879   3                if ( gui_keycode == KEY_POUNDSIGN )
3880   3                {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 64  

3881   4                  AllCardUserDeleteMgr.Selection = YES;
3882   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
3883   4                }
3884   3                else if ( gui_keycode == KEY_ASTERISK )
3885   3                {
3886   4                  DEF_ButtonPress_Voice;
3887   4                  Hardware_DelayMs(100);
3888   4                  GoToCardMenu(); 
3889   4                }
3890   3              }
3891   2      
3892   2            break;  
3893   2      
3894   2      
3895   2          case SCREEN_RegisterPasscodeUser:
3896   2      
3897   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
3898   2              {
3899   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3900   3              }
3901   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
3902   2              {
3903   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
3904   3              }
3905   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
3906   2              {
3907   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
3908   3              }
3909   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
3910   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
3911   2              {
3912   3                if ( gui_keycode == KEY_ASTERISK )
3913   3                {
3914   4                  DEF_ButtonPress_Voice;
3915   4                  Hardware_DelayMs(100);
3916   4                  GoToPasswordMenu(); 
3917   4                }
3918   3              }
3919   2          
3920   2            break;
3921   2            
3922   2          case SCREEN_DeletePasscodeUser:
3923   2      
3924   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
3925   2              {
3926   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3927   3              }
3928   2      
3929   2            break;
3930   2      
3931   2          case SCREEN_DeleteAllPasscodeUser:
3932   2            
3933   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
3934   2            {
3935   3              if ( gui_keycode == KEY_POUNDSIGN )
3936   3              {
3937   4                AllPasscodeUserDeleteMgr.Selection = YES;
3938   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
3939   4              }
3940   3              else if ( gui_keycode == KEY_ASTERISK )
3941   3              {
3942   4                DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 65  

3943   4                Hardware_DelayMs(100);
3944   4                GoToPasswordMenu(); 
3945   4              }
3946   3            }
3947   2            break;
3948   2            
3949   2      
3950   2          case SCREEN_TimeSetting:
3951   2            
3952   2          if ( TimeSettingMgr.Status == SetYearMajor)
3953   2              {
3954   3                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
3955   3                {
3956   4                  DEF_ButtonPress_Voice;
3957   4                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
3958   4                  TimeSettingMgr.Status = SetYearMinor;
3959   4                }
3960   3              }
3961   2              else if ( TimeSettingMgr.Status == SetYearMinor)
3962   2              {
3963   3                if ( gui_keycode == KEY_ASTERISK )
3964   3                {
3965   4                  DEF_ButtonPress_Voice;
3966   4                  TimeSettingMgr.Status = SetYearMajor;
3967   4                }
3968   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
3969   3                {
3970   4                  DEF_ButtonPress_Voice;
3971   4                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
3972   4                  TimeSettingMgr.Status = SetMonthMajor;
3973   4                }
3974   3              }
3975   2              
3976   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
3977   2              {
3978   3                if ( (gui_keycode < KEY_TWO) )
3979   3                {
3980   4                  DEF_ButtonPress_Voice;
3981   4                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
3982   4                  TimeSettingMgr.Status = SetMonthMinor;
3983   4                }
3984   3              }
3985   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
3986   2              {
3987   3                if ( gui_keycode == KEY_ASTERISK )
3988   3                {
3989   4                  DEF_ButtonPress_Voice;
3990   4                  TimeSettingMgr.Status = SetYearMajor;
3991   4                }
3992   3                else if ( gui_keycode <= KEY_NINE )
3993   3                {
3994   4                  DEF_ButtonPress_Voice;
3995   4                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
3996   4                  if ( TempSystemTime.month > 0x12 ){
3997   5                    TempSystemTime.month = 0x12;
3998   5                  }
3999   4                  if(TempSystemTime.month == 0x00)
4000   4                  {
4001   5                   TempSystemTime.month = 0x01;
4002   5                  }
4003   4                  TimeSettingMgr.Status = SetDateMajor;
4004   4                }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 66  

4005   3              }
4006   2              
4007   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4008   2              {
4009   3                if ( gui_keycode == KEY_ASTERISK ){
4010   4                  DEF_ButtonPress_Voice;
4011   4                  TimeSettingMgr.Status = SetYearMajor;
4012   4                }
4013   3                else if ( (gui_keycode < KEY_FOUR) )
4014   3                {
4015   4                  DEF_ButtonPress_Voice;
4016   4                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4017   4                  TimeSettingMgr.Status = SetDateMinor;
4018   4                }
4019   3              }
4020   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4021   2              {
4022   3                if ( gui_keycode == KEY_ASTERISK ){
4023   4                  DEF_ButtonPress_Voice;
4024   4                  TimeSettingMgr.Status = SetYearMajor;
4025   4                }
4026   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4027   3                {
4028   4                  DEF_ButtonPress_Voice;
4029   4                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4030   4                  if ( TempSystemTime.date > 0x31 ){
4031   5                    TempSystemTime.date = 0x31;
4032   5                  }
4033   4                  if(TempSystemTime.date == 0x00)
4034   4                  {
4035   5                   TempSystemTime.date = 0x01;
4036   5                  }
4037   4                  TimeSettingMgr.Status = SetHourMajor;
4038   4                }
4039   3              }
4040   2      
4041   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4042   2              {
4043   3                if ( gui_keycode == KEY_ASTERISK ){
4044   4                  DEF_ButtonPress_Voice;
4045   4                  TimeSettingMgr.Status = SetYearMajor;
4046   4                }
4047   3                else if ( (gui_keycode < KEY_THREE )){
4048   4                  DEF_ButtonPress_Voice;
4049   4                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4050   4                  TimeSettingMgr.Status = SetHourMinor;
4051   4                }
4052   3              }
4053   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4054   2              {
4055   3                if ( gui_keycode == KEY_ASTERISK ){
4056   4                  DEF_ButtonPress_Voice;
4057   4                  TimeSettingMgr.Status = SetYearMajor;
4058   4                }
4059   3                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4060   3                {
4061   4                  DEF_ButtonPress_Voice;
4062   4                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
4063   4                  if (TempSystemTime.hour > 0x23){
4064   5                    TempSystemTime.hour = 0x23;
4065   5                  }
4066   4                  TimeSettingMgr.Status = SetMinuteMajor;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 67  

4067   4                }
4068   3              }
4069   2      
4070   2      
4071   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4072   2              {
4073   3                if ( gui_keycode == KEY_ASTERISK ){
4074   4                  DEF_ButtonPress_Voice;
4075   4                  TimeSettingMgr.Status = SetYearMajor;
4076   4                }
4077   3                else if ( gui_keycode < KEY_SIX)
4078   3                {
4079   4                  DEF_ButtonPress_Voice;
4080   4                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4081   4                  TimeSettingMgr.Status = SetMinuteMinor;
4082   4                }
4083   3              }
4084   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4085   2              {
4086   3                if ( gui_keycode == KEY_ASTERISK ){
4087   4                  DEF_ButtonPress_Voice;
4088   4                  TimeSettingMgr.Status = SetYearMajor;
4089   4      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4090   4                }
4091   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4092   4                  DEF_ButtonPress_Voice;
4093   4                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4094   4                  TimeSettingMgr.Status = SetSecondMajor;
4095   4                }
4096   3              }
4097   2      
4098   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4099   2              {
4100   3                if ( gui_keycode == KEY_ASTERISK ){
4101   4                  DEF_ButtonPress_Voice;
4102   4                  TimeSettingMgr.Status = SetYearMajor;
4103   4                }
4104   3                else if ( gui_keycode < KEY_SIX){
4105   4                  DEF_ButtonPress_Voice;
4106   4                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4107   4                  TimeSettingMgr.Status = SetSecondMinor;
4108   4                }
4109   3              }
4110   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4111   2              {
4112   3                if ( gui_keycode == KEY_ASTERISK ){
4113   4                  DEF_ButtonPress_Voice;
4114   4                  TimeSettingMgr.Status = SetYearMajor;
4115   4      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4116   4                }
4117   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4118   4                  DEF_ButtonPress_Voice;
4119   4                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4120   4                  TimeSettingMgr.Status = SetYearMajor;
4121   4                }
4122   3              }
4123   2      
4124   2              if ( gui_keycode == KEY_POUNDSIGN )
4125   2              {
4126   3                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4127   3                {
4128   4                  DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 68  

4129   4                  SaveSystemTime();
4130   4                  #ifdef Function_USE_Internal_RTC
                          G_SystemUTCTime = SystemTimeToUTC(SystemTime);
                          #else
4133   4                  PCF8563_WriteTime();
4134   4                  #endif
4135   4                  Hardware_DelayMs(100);
4136   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4137   4                }
4138   3                else{
4139   4                  Hardware_DelayMs(100);
4140   4                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4141   4                }
4142   3                  
4143   3                GoToSystemConfigMenu();         
4144   3              }
4145   2              else if ( gui_keycode == KEY_ASTERISK )
4146   2              {
4147   3                DEF_ButtonPress_Voice;
4148   3                Hardware_DelayMs(100);
4149   3                GoToSystemConfigMenu();   
4150   3      
4151   3                #ifdef Function_USE_Internal_RTC
                        SystemTime = UTCToSystemtime(G_SystemUTCTime);
                        #else
4154   3                PCF8563_ReadTime();
4155   3                #endif
4156   3        
4157   3                //GotSystemTime();      
4158   3              
4159   3                TimeSettingMgr.Status = SetYearMajor;
4160   3              }
4161   2      
4162   2            break;
4163   2      
4164   2            case SCREEN_RestoreFactoryDefault:
4165   2      
4166   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4167   2              {
4168   3                if ( gui_keycode == KEY_POUNDSIGN )
4169   3                {
4170   4                  DEF_ButtonPress_Voice;
4171   4                  Hardware_DelayMs(100);
4172   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4173   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4174   4                }
4175   3                else if ( gui_keycode == KEY_ASTERISK )
4176   3                {
4177   4                  DEF_ButtonPress_Voice;
4178   4                  Hardware_DelayMs(100);
4179   4                  GoToSystemConfigMenu(); 
4180   4                }
4181   3              }
4182   2      
4183   2              break;
4184   2      
4185   2      //    case SCREEN_LanguageSetting:
4186   2      
4187   2      //        if ( gui_keycode == KEY_ONE )
4188   2      //        {
4189   2      //          DEF_ButtonPress_Voice;
4190   2      //          SystemLanguage = Chinese;       
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 69  

4191   2      //          SystemConfigSave();
4192   2      //          GoToSystemConfigMenu();
4193   2      //        }
4194   2      //        else if ( gui_keycode == KEY_TWO )
4195   2      //        {
4196   2      //          DEF_ButtonPress_Voice;
4197   2      //          SystemLanguage = English;         
4198   2      //          SystemConfigSave();
4199   2      //          GoToSystemConfigMenu();
4200   2      //        }
4201   2      //        else if ( gui_keycode == KEY_ASTERISK)
4202   2      //        {
4203   2      //          DEF_ButtonPress_Voice;
4204   2      //          GoToSystemConfigMenu();
4205   2      //        }
4206   2      //      break;
4207   2      
4208   2          case SCREEN_VolumeSetting:
4209   2      
4210   2            if ( gui_keycode == KEY_ONE )
4211   2            {
4212   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4213   3              Hardware_DelayMs(100);
4214   3              VoiceMgr.Enable = bTRUE;        
4215   3              SystemConfigSave();
4216   3              GoToSystemConfigMenu();
4217   3            }
4218   2            else if ( gui_keycode == KEY_TWO )
4219   2            {
4220   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4221   3              Hardware_DelayMs(100);
4222   3              VoiceMgr.Enable = bFALSE; 
4223   3              SystemConfigSave();
4224   3              GoToSystemConfigMenu();
4225   3            }
4226   2            else if ( gui_keycode == KEY_ASTERISK )
4227   2            {
4228   3              DEF_ButtonPress_Voice;
4229   3              Hardware_DelayMs(100);
4230   3              GoToSystemConfigMenu();
4231   3            }
4232   2            break;  
4233   2      /*        
4234   2          case SCREEN_ManagerPasscodeModify:
4235   2      
4236   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4237   2            {
4238   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4239   2            }
4240   2            
4241   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4242   2            {
4243   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4244   2            }
4245   2        
4246   2            break;
4247   2      */        
4248   2          case SCREEN_MemoryCheck:
4249   2            
4250   2            
4251   2            break;
4252   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 70  

4253   2          case SCREEN_ManagerIdentify:
4254   2      
4255   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4256   2                {
4257   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4258   3                }
4259   2            break;
4260   2              
4261   2          case SCREEN_UnlockingModeSetting:
4262   2              
4263   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4264   2              {
4265   3                if ( gui_keycode == KEY_ONE )
4266   3                {
4267   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4268   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4269   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4270   4                  Hardware_DelayMs(100);
4271   4                }
4272   3                else if ( gui_keycode == KEY_TWO )
4273   3                {
4274   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4275   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4276   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4277   4                  {
4278   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4279   5                    Hardware_DelayMs(100);
4280   5                  }
4281   4                  else
4282   4                  {
4283   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4284   5                    Hardware_DelayMs(100);
4285   5                  }
4286   4                }
4287   3                else if ((gui_keycode == KEY_ASTERISK))
4288   3                {
4289   4                  DEF_ButtonPress_Voice;
4290   4                  Hardware_DelayMs(100);
4291   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4292   4                }
4293   3              }
4294   2            break;
4295   2      
4296   2            
4297   2            case SCREEN_ContinueOpenSetting:
4298   2            
4299   2                if ( gui_keycode == KEY_ONE )
4300   2                {
4301   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4302   3                  {
4303   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4304   4                    GUI_MotorContinueOpen();
4305   4                  }
4306   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4307   3                  Hardware_DelayMs(100);
4308   3                  GoToSystemConfigMenu();
4309   3                }
4310   2                else if ( gui_keycode == KEY_TWO )
4311   2                {
4312   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4313   3                  {
4314   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 71  

4315   4                    MotorMgr.CWTimer = 0;
4316   4                    MotorMgr.CWWAITTimer =  0;  
4317   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4318   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
4319   4                    MotorMgr.MotorStatus = CCW; 
4320   4                    MotorMgr.CCWSoftStart = bTRUE;
4321   4                  }
4322   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
4323   3                  Hardware_DelayMs(100);
4324   3                  GoToSystemConfigMenu();
4325   3                }
4326   2                else if ( gui_keycode == KEY_ASTERISK )
4327   2                {
4328   3                  DEF_ButtonPress_Voice;
4329   3                  Hardware_DelayMs(100);
4330   3                  GoToSystemConfigMenu();
4331   3                }
4332   2              break;
4333   2                
4334   2            case SCREEN_PickAlarmEnableSetting:
4335   2            
4336   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4337   2                {
4338   3                  if ( gui_keycode == KEY_ONE )
4339   3                  {
4340   4                    //PickAlarmEnableMgr.Selection = YES;
4341   4                    PickAlarmEnableMgr.Enable = bTRUE;
4342   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4343   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4344   4                    Hardware_DelayMs(100);
4345   4          
4346   4                  }
4347   3                  else if ( gui_keycode == KEY_TWO )
4348   3                  {
4349   4                    //PickAlarmEnableMgr.Selection = NO;
4350   4                    PickAlarmEnableMgr.Enable = bFALSE;
4351   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4352   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4353   4                    Hardware_DelayMs(100);
4354   4                    
4355   4                  }
4356   3                  else if ( gui_keycode == KEY_ASTERISK)
4357   3                  {
4358   4                    DEF_ButtonPress_Voice;
4359   4                    Hardware_DelayMs(100);
4360   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4361   4                  }
4362   3                }
4363   2                break;
4364   2      
4365   2            case SCREEN_SystemVersion:
4366   2      
4367   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4368   2                  {
4369   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4370   3                    CardIdentifyMgr.Status = ReadingCardID;
4371   3                    FpIdentifyMgr.Status = FPMcmdStart;
4372   3                    CurrentScreen = SCREEN_Main;
4373   3                  }
4374   2                break;
4375   2                  
4376   2            case SCREEN_PickLockAlarm:
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 72  

4377   2        
4378   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4379   2            {
4380   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
4381   3              {
4382   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4383   4                {
4384   5                  
4385   5                  PasscodeInputMgr.Point = 0x01;
4386   5                  PasscodeInputMgr.PasscodeLen = 16;
4387   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4388   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4389   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4390   5                  {
4391   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4392   6                  }
4393   5                  
4394   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4395   5                  //DEF_ButtonPress_Voice;
4396   5                }
4397   4               }
4398   3              else if ( gui_keycode == KEY_ASTERISK )
4399   3              {
4400   4              }
4401   3            }
4402   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4403   2            {
4404   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4405   3              {
4406   4                //DEF_ButtonPress_Voice;
4407   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4408   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4409   4              }
4410   3            }
4411   2            
4412   2            break;
4413   2      
4414   2            case SCREEN_SystemLocked:
4415   2              
4416   2              if ( gui_keycode != KEY_NONE )  
4417   2              {
4418   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4419   3                Hardware_DelayMs(100);
4420   3              }
4421   2            break;
4422   2      
4423   2            case SCREEN_CheckEventLogBySequence:
4424   2              
4425   2              #ifdef Function_EventLog
4426   2              if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
4427   2              {
4428   3                if ( gui_keycode == KEY_TWO )
4429   3                { 
4430   4                  if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
4431   4                  {
4432   5                    DEF_ButtonPress_Voice;
4433   5                    CheckEventLogBySequenceMgr.OffsetEventLogNum--;
4434   5      
4435   5                    if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
4436   6                      LogMgr.DisplayPoint++;
4437   6                    }
4438   5                    else{
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 73  

4439   6                      LogMgr.DisplayPoint = 0;
4440   6                    }
4441   5                  }
4442   4                  else
4443   4                  {
4444   5                    DEF_Fail_Beep;
4445   5                  }
4446   4                }
4447   3                else if ( gui_keycode == KEY_EIGHT )
4448   3                { 
4449   4                  if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
4450   4                  {
4451   5                    DEF_ButtonPress_Voice;
4452   5                    if ( LogMgr.DisplayPoint > 0 )
4453   5                    {
4454   6                      LogMgr.DisplayPoint--;
4455   6                    }
4456   5                    else if( LogMgr.DisplayPoint == 0 )
4457   5                    {
4458   6                      if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
4459   6                      {
4460   7                        LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
4461   7                      }
4462   6                    }
4463   5                    CheckEventLogBySequenceMgr.OffsetEventLogNum++;
4464   5                  }
4465   4                  else
4466   4                  {
4467   5                    DEF_Fail_Beep;
4468   5                  }
4469   4                }
4470   3                else if (gui_keycode == KEY_ASTERISK)
4471   3                {
4472   4                  DEF_ButtonPress_Voice;
4473   4                  Hardware_DelayMs(100);
4474   4                  GotoLogMenu();
4475   4                }
4476   3              }
4477   2              #endif
4478   2      
4479   2            break;
4480   2      
4481   2            case SCREEN_DeleteEventLog:
4482   2              
4483   2              #ifdef Function_EventLog
4484   2              if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
4485   2              {
4486   3                if ( gui_keycode == KEY_POUNDSIGN )
4487   3                {
4488   4                  DEF_ButtonPress_Voice;
4489   4                  LogDeleteMgr.Status = LogDeleting;
4490   4                }
4491   3                else if ( gui_keycode == KEY_ASTERISK )
4492   3                {
4493   4                  DEF_ButtonPress_Voice;
4494   4                  Hardware_DelayMs(100);
4495   4                  GotoLogMenu();
4496   4                }
4497   3              }
4498   2              #endif
4499   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 74  

4500   2            break;
4501   2              
4502   2          default:
4503   2      
4504   2            break;
4505   2            
4506   2        }
4507   1        
4508   1      }
4509          
4510          /*******************************************************/
4511          /*******************************************************/
4512          void GUI_Update_Screen(void)//GUI更新屏幕
4513          {
4514   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4515   1        {
4516   2          #ifdef Function_ScreenDisplay
4517   2          Clear_Screen();
4518   2          GUI_Flag_RefreshLCD = bFALSE;
4519   2          #endif
4520   2          LastScreen =  CurrentScreen;
4521   2        }
4522   1        switch ( CurrentScreen)
4523   1        {
4524   2          case SCREEN_Initialization:
4525   2      
4526   2            //SET_ALLKEYLED_OFF();
4527   2            ShowInitialization();
4528   2          break;
4529   2          
4530   2          case SCREEN_LowBattery:
4531   2      
4532   2            //SET_ALLKEYLED_OFF();
4533   2            ShowLowBattery();
4534   2          break;
4535   2      
4536   2          case SCREEN_PickLockAlarm:
4537   2      
4538   2            //SET_ALLKEYLED_ON();
4539   2            ShowPickLockAlarm();
4540   2          break;
4541   2      
4542   2          case SCREEN_Main:
4543   2            
4544   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4545   2            {
4546   3              //SET_ALLKEYLED_OFF();
4547   3            }
4548   2            else
4549   2            {
4550   3              //SET_ALLKEYLED_ON();
4551   3              GUI_UpadteMain();
4552   3            }
4553   2          break;
4554   2      
4555   2          case SCREEN_IdentifySuccess:
4556   2            
4557   2            //SET_ALLKEYLED_OFF();
4558   2            //KEYLED_WATERLIGHT_Task();
4559   2            ShowIdentifySuccessPage();
4560   2            break;
4561   2          case SCREEN_IdentifyFail:
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 75  

4562   2              
4563   2            //KEYLED_IdentifyFail_Task();
4564   2            
4565   2            ShowIdentifyFailPage();
4566   2            break;
4567   2          
4568   2          case SCREEN_DoorBell:
4569   2            ShowDoorBell();
4570   2            break;
4571   2          
4572   2          case SCREEN_MainMenu:
4573   2      
4574   2            //SET_1234A_LED_ON();
4575   2            
4576   2            ShowMainMenu();
4577   2            break;
4578   2            
4579   2          case SCREEN_EventLogMenu:
4580   2            
4581   2            //SET_12A_LED_ON();
4582   2            #ifdef Function_EventLog
4583   2            ShowLogMenu();
4584   2            #endif
4585   2            break;
4586   2            
4587   2          case SCREEN_FpMenu:
4588   2            
4589   2            //SET_123A_LED_ON();
4590   2            ShowFpMenu();
4591   2      
4592   2            break;
4593   2          case SCREEN_CardUserMenu:
4594   2      
4595   2            //SET_12A_LED_ON();
4596   2            ShowCardUserMenu();
4597   2      
4598   2            break;
4599   2          case SCREEN_PasscodeMenu:
4600   2            
4601   2            //SET_123A_LED_ON();
4602   2            ShowPasscodeMenu();
4603   2      
4604   2            break;
4605   2          case SCREEN_SystemConfigMenu:
4606   2      
4607   2            //SET_123456A_LED_ON();
4608   2            ShowSystemConfigMenu();
4609   2      
4610   2            break;
4611   2          case SCREEN_RegisterUserFp:
4612   2            //SET_ALLKEYLED_OFF();
4613   2            ShowRegisterUserFp();
4614   2      
4615   2            break;
4616   2          case SCREEN_DeleteUserFp:
4617   2            //SET_ALLKEYLED_ON();
4618   2            //ShowDeleteUserFp();
4619   2      
4620   2            break;
4621   2          case SCREEN_DeleteAllUserFp:
4622   2            //SET_AP_LED_ON();
4623   2            ShowDeleteAllUserFp();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 76  

4624   2      
4625   2            break;
4626   2          
4627   2          case SCREEN_RegisterMasterFp:
4628   2            //SET_ALLKEYLED_OFF();
4629   2            ShowRegisterMasterFp();
4630   2      
4631   2            break;
4632   2            
4633   2          case SCREEN_DeleteMasterFp:
4634   2            //SET_ALLKEYLED_ON();
4635   2            //ShowDeleteMasterFp();
4636   2      
4637   2            break;
4638   2      /*
4639   2          case SCREEN_DeleteAllMasterFp:
4640   2            SET_LRandConfirmLED_ON();
4641   2            ShowDeleteAllMasterFp();
4642   2      
4643   2            break;
4644   2      */
4645   2          case SCREEN_RegisterCardUser:
4646   2            //KEYLED_KEY5_Flash();
4647   2            ShowRegisterCardUser();
4648   2      
4649   2            break;
4650   2            
4651   2          case SCREEN_DeleteCardUser:
4652   2            //SET_ALLKEYLED_ON();
4653   2            //ShowDeleteCardUser();
4654   2      
4655   2            break;
4656   2      
4657   2          case SCREEN_DeleteAllCardUser:
4658   2            //SET_AP_LED_ON();
4659   2            ShowDeleteAllCardUser();
4660   2      
4661   2            break;
4662   2      
4663   2          case SCREEN_RegisterPasscodeUser:
4664   2            //SET_ALLKEYLED_ON();
4665   2            ShowRegisterPasscodeUser();
4666   2      
4667   2            break;
4668   2            
4669   2          case SCREEN_DeletePasscodeUser:
4670   2            //SET_ALLKEYLED_ON();
4671   2            //ShowDeletePasscodeUser();
4672   2      
4673   2            break;
4674   2      
4675   2          case SCREEN_DeleteAllPasscodeUser:
4676   2            //SET_AP_LED_ON();
4677   2            ShowDeleteAllPasscodeUser();
4678   2      
4679   2            break;
4680   2      
4681   2      
4682   2          case SCREEN_TimeSetting:
4683   2      
4684   2            ShowTimeSetting();
4685   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 77  

4686   2            break;
4687   2      /*
4688   2          case SCREEN_ManagerPasscodeModify:
4689   2          //  SET_ALLKEYLED_ON();
4690   2          //  ShowModifyManagerPasscode();
4691   2      
4692   2            break;
4693   2      */      
4694   2          case SCREEN_RestoreFactoryDefault:
4695   2            //SET_AP_LED_ON();
4696   2            ShowRestoreFactoryDefault();
4697   2      
4698   2            break;
4699   2      
4700   2      //    case SCREEN_LanguageSetting:
4701   2      //      //SET_12A_LED_ON();
4702   2      //      ShowLanguageSetting();
4703   2      
4704   2      //      break;
4705   2            
4706   2          case SCREEN_VolumeSetting:
4707   2            //SET_12A_LED_ON();
4708   2            ShowVolumeSetting();
4709   2      
4710   2            break;
4711   2      
4712   2          case SCREEN_MemoryCheck:
4713   2            //SET_UDandConfirmLED_ON();
4714   2            //ShowMemoryUsage();
4715   2      
4716   2            break;
4717   2            
4718   2          case SCREEN_ManagerIdentify:
4719   2      
4720   2            //SET_ALLKEYLED_ON();
4721   2            ShowManagerIdentify();
4722   2      
4723   2            break;
4724   2      
4725   2          case SCREEN_UnlockingModeSetting:
4726   2            //SET_12A_LED_ON();
4727   2            ShowUnlockingModeSetting();
4728   2          
4729   2            break;
4730   2            
4731   2          case SCREEN_ContinueOpenSetting:  
4732   2            //SET_12A_LED_ON();
4733   2            ShowContinuedOpenModeSetting();
4734   2            break;
4735   2            
4736   2          case SCREEN_PickAlarmEnableSetting: 
4737   2            //SET_12A_LED_ON();
4738   2            ShowPickAlarmEnableSetting();
4739   2            break;
4740   2            
4741   2          case SCREEN_SystemVersion:  
4742   2            //SET_AP_LED_ON();
4743   2            GUI_Update_Version();
4744   2            break;
4745   2      
4746   2      //    case SCREEN_SelfTest:
4747   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 78  

4748   2            //SET_ALLKEYLED_ON();
4749   2            //ShowSelfTest();
4750   2      //      break;
4751   2          
4752   2          case SCREEN_AgingTest:
4753   2      
4754   2            //KEYLED_WATERLIGHT_Task();
4755   2            ShowAgingTest();
4756   2            break;
4757   2      
4758   2          case SCREEN_SystemLocked:
4759   2      
4760   2            //KEYLED_ASTERISK_Flash();
4761   2            ShowSystemLocked();
4762   2            break;
4763   2            
4764   2          case SCREEN_CheckEventLogBySequence:
4765   2            #ifdef Function_EventLog
4766   2            ShowEventLogBySequence();
4767   2            #endif
4768   2            break;
4769   2      
4770   2          case SCREEN_DeleteEventLog:
4771   2                  
4772   2          #ifdef Function_EventLog
4773   2            ShowClearEventLog();
4774   2          #endif
4775   2            break;
4776   2          
4777   2          default:
4778   2            break;
4779   2        }
4780   1      
4781   1      }
4782          /*******************************************************/
4783          /*******************************************************/
4784          /*******************************************************/
4785          void GUI_Init(void)//
4786          {
4787   1        //uint8_t i;
4788   1      
4789   1        GUI_ToggleFlag_05s=0x00;
4790   1        GUI_ToggleFlag_1s=0x01;
4791   1        FpIdentifyMgr.BreathingLED=0x00;
4792   1      
4793   1        GUI_Flag_RefreshLCD = bFALSE;
4794   1      
4795   1        FpIdentifyMgr.Status = FPMcmdStart;
4796   1        CardIdentifyMgr.Status = ReadingCardID;
4797   1        TimeSettingMgr.Status = SetYearMajor;
4798   1        BatteryMgr.PostLowBattery = bTRUE;
4799   1        
4800   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
4801   1      
4802   1        Key_Init();
4803   1      
4804   1        ReadCardUserMemoryFromEEPROM();
4805   1      
4806   1        ReadPasscodeUserMemoryFromEEPROM();
4807   1      
4808   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
4809   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 79  

4810   1      
4811   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
4812   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
4813   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
4814   1        UserIdentifyResultMgr.VoiceDelay = 0;
4815   1      
4816   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
4817   1              
4818   1        DEBUG_MARK;
4819   1          
4820   1        #ifdef Function_USE_Internal_RTC
                SystemTime = UTCToSystemtime(G_SystemUTCTime);
                #else
4823   1        PCF8563_ReadTime();
4824   1        #endif
4825   1        
4826   1        #ifdef Function_ScreenDisplay
4827   1        Display_Init();
4828   1        #endif
4829   1      
4830   1      }
4831          
4832          /*******************************************************/
4833          /*******************************************************/
4834          /*******************************************************/
4835          void GUI_Task(void)//
4836          {
4837   1        //uint8_t *Point;
4838   1        uint8_t i,j;
4839   1        if (++GUI_TimeCnt > 63)
4840   1        {
4841   2          GUI_ToggleFlag_1s^=0x01;
4842   2          GUI_TimeCnt =0;
4843   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
4844   2          {
4845   3            if(VoiceMgr.Enable == bFALSE)
4846   3            {
4847   4              VoiceMgr.Enable = bTRUE;
4848   4              DEF_ButtonPress_Voice;
4849   4              VoiceMgr.Enable = bFALSE;
4850   4            }
4851   3            else
4852   3            {
4853   4              DEF_ButtonPress_Voice;
4854   4            }
4855   3            RefreshSystemSleepTime();
4856   3          }
4857   2          #ifdef Function_FPMbreathingLed
4858   2          if( FpIdentifyMgr.BreathingLED > 0 )
4859   2          {
4860   3            FpIdentifyMgr.BreathingLED += 1;
4861   3            if( FpIdentifyMgr.BreathingLED == 4 )
4862   3            {
4863   4              FpIdentifyMgr.BreathingLED = 0;
4864   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
4865   4            }
4866   3          }
4867   2          #endif
4868   2        }
4869   1        
4870   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
4871   2          GUI_ToggleFlag_05s^= 0x01;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 80  

4872   2        }
4873   1        
4874   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
4875   1        {
4876   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
4877   2        }
4878   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
4879   1        {
4880   2           LockBrand.BrandChangeTimeDelay--;
4881   2        }
4882   1      
4883   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
4884   1        {
4885   2          j=0;
4886   2          for (i=0;i<100;i++)
4887   2          {
4888   3            Hardware_DelayX5us(2);
4889   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
4890   3            {
4891   4              j++;
4892   4            }
4893   3          }
4894   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
4895   2          {
4896   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
4897   3          }
4898   2        }
4899   1        else
4900   1        {
4901   2          j=0;
4902   2          for (i=0;i<10;i++)
4903   2          {
4904   3            Hardware_DelayX5us(1);
4905   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
4906   3            {
4907   4              j++;
4908   4            }
4909   3          }
4910   2          if (j>8)
4911   2          {
4912   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
4913   3          }
4914   2        }
4915   1        
4916   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
4917   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
4918   1            &&( CurrentScreen != SCREEN_Initialization )
4919   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
4920   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
4921   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
4922   1        {
4923   2          CurrentScreen = SCREEN_PickLockAlarm;
4924   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
4925   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4926   2          FpIdentifyMgr.Status = FPMcmdStart;
4927   2          CardIdentifyMgr.Status = ReadingCardID;
4928   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
4929   2          #ifdef Function_FPMbreathingLed
4930   2          SetFPMbreathingLed(FPMbreathingLed_Off);
4931   2          #endif
4932   2        }
4933   1        
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:53:14 PAGE 81  

4934   1        GUI_Button_Monitor();
4935   1        
4936   1        GUI_Update_Screen();
4937   1        
4938   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  14362    ----
   CONSTANT SIZE    =    397    ----
   XDATA SIZE       =     45     165
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
