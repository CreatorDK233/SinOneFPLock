C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MFCLOGIC
OBJECT MODULE PLACED IN .\Objects\MFCLogic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\ModuleLogic\MFCLogic.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INC
                    -DIR(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protoc
                    -ol;.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\MFCLogic.lst) TABS(2) OBJEC
                    -T(.\Objects\MFCLogic.obj)

line level    source

   1          #include "MFCLogic.h"
   2          #include "global_variable.h"
   3          #include "StdTypes.h"
   4          #include "MFC_WS1850.h"
   5          #include "GUI_Function.h"
   6          #include "GUI.h"
   7          #include "EEPROM.h"
   8          #include "BeepMgr.h"
   9          #include "LCD.h"
  10          #include "Font_Menu.h"
  11          
  12          void CardUserIdentify(void)//磁卡用户确认
  13          {
  14   1        status_t GetCardID;
  15   1        uint8_t UserID;
  16   1        if (CardIdentifyMgr.Status == ReadingCardID)
  17   1        {
  18   2          GetCardID = MFC_Auto_Reader(CardIdentifyMgr.CID);
  19   2          if ( GetCardID == S_SUCCESS )
  20   2          {
  21   3            CardIdentifyMgr.Status = CheckCardIDifRegistered;
  22   3            RefreshSystemSleepTime();
  23   3          }
  24   2        }
  25   1        else if ( CardIdentifyMgr.Status == CheckCardIDifRegistered)
  26   1        {
  27   2          UserID = CompareCardIDwithMemory(CardIdentifyMgr.CID); 
  28   2          if ( UserID == 0x00 )   //Card ID is not registered
  29   2          {
  30   3            CardIdentifyMgr.Status = Fail;
  31   3            CardIdentifyMgr.TimeCnt = Def_IdendtifyFailScreenTimeDelay;
  32   3          }
  33   2          else
  34   2          {
  35   3            CardIdentifyMgr.UserID = UserID;
  36   3            CardIdentifyMgr.Status = Success; 
  37   3            CardIdentifyMgr.TimeCnt = Def_IdendtifySuccessScreenTimeDelay;
  38   3          }
  39   2        }
  40   1      }
  41          
  42          uint8_t CompareCardIDwithMemory(uint8_t *Point)//将磁卡ID与内存进行比较
  43          {
  44   1        uint8_t i;
  45   1        uint8_t CardUserID;
  46   1      
  47   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
  48   1        {
  49   2          if ( CardMemoryMgr[i].Status == CIDisValid )
  50   2          {
  51   3            if (  (CardMemoryMgr[i].CID[0] == *Point)
  52   3              &&(CardMemoryMgr[i].CID[1] == *(Point+1))
C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 2   

  53   3              &&(CardMemoryMgr[i].CID[2] == *(Point+2))
  54   3              &&(CardMemoryMgr[i].CID[3] == *(Point+3))
  55   3              //&&(CardMemoryMgr[i].CID[4] == *(Point+4))
  56   3               )
  57   3            {
  58   4              CardUserID = CardMemoryMgr[i].UserID;
  59   4              return CardUserID;
  60   4            }
  61   3          }
  62   2        }
  63   1        return 0;
  64   1      }
  65          
  66          
  67          
  68          
  69          
  70          
  71          
  72          
  73          
  74          
  75          uint8_t Get_Availabe_CardUserID(void)//获取有效磁卡ID
  76          {
  77   1        uint8_t i;
  78   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
  79   1        {
  80   2          if ( CardMemoryMgr[i].Status == CIDisInvalid ){
  81   3            return (i+1);
  82   3          }
  83   2        }
  84   1        return 0;
  85   1      }
  86          
  87          void ReadCardUserMemoryFromEEPROM(void)//从EEPROM内存读取磁卡用户
  88          {
  89   1        EEPROM_ReadSequential(CardUserMemoryStartAddr,&CardMemoryMgr[0].UserID,(6*DEF_MAX_CARDUSER));
  90   1      }
  91          
  92          void WriteCardUserMemoryToEEPROM(void)//从EEPROM内存写入磁卡用户
  93          {
  94   1        EEPROM_WriteSequential(CardUserMemoryStartAddr,&CardMemoryMgr[0].UserID,(6*DEF_MAX_CARDUSER));
  95   1      }
  96          
  97          status_t SaveCardUserToMemory(uint8_t *Point,uint8_t UserID)//保存磁卡用户到内存
  98          {
  99   1        uint8_t j;
 100   1        //uint8_t CardUserID;
 101   1      
 102   1        for (j=0;j<4;j++)
 103   1        {
 104   2          CardMemoryMgr[UserID-1].CID[j] = *(Point+j);
 105   2        }
 106   1        CardMemoryMgr[UserID-1].UserID = UserID;
 107   1        CardMemoryMgr[UserID-1].Status = CIDisValid;
 108   1        
 109   1        WriteCardUserMemoryToEEPROM();
 110   1        return S_SUCCESS;
 111   1      
 112   1      }
 113          
 114          void DeleteCardUserfromMemory(uint8_t UserID)//从内存中删除磁卡用户
C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 3   

 115          {
 116   1        uint8_t j;
 117   1      
 118   1        CardMemoryMgr[UserID-1].Status = CIDisInvalid;
 119   1        CardMemoryMgr[UserID-1].UserID = 0xFF;
 120   1        for (j=0;j<4;j++)
 121   1        {
 122   2          CardMemoryMgr[UserID-1].CID[j] = 0xFF;
 123   2        }
 124   1        WriteCardUserMemoryToEEPROM();
 125   1      }
 126          
 127          void DeleteAllCardUserfromMemory(void)//从内存中删除所有磁卡用户
 128          {
 129   1        uint8_t i,j;
 130   1      
 131   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 132   1        {
 133   2      
 134   2          CardMemoryMgr[i].Status = CIDisInvalid;
 135   2          CardMemoryMgr[i].UserID = 0xFF;
 136   2          for (j=0;j<4;j++)
 137   2          {
 138   3            CardMemoryMgr[i].CID[j] = 0xFF;
 139   3          }
 140   2      
 141   2        } 
 142   1        WriteCardUserMemoryToEEPROM();
 143   1      }
 144          
 145          bool_t IfCardUserIDisRegistered(uint8_t CardUserID)//如果磁卡用户ID已注册
 146          {
 147   1        uint8_t i;
 148   1      
 149   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 150   1        {
 151   2          if ( CardMemoryMgr[i].Status == CIDisValid )
 152   2            {
 153   3              if (  CardMemoryMgr[i].UserID == CardUserID)
 154   3              {
 155   4                return bTRUE;
 156   4              }
 157   3            }
 158   2        }
 159   1        return bFALSE;
 160   1      }
 161          
 162          uint8_t CheckHowManyRegisteredCardUser( void )//搜索检查多少注册磁卡用户
 163          {
 164   1        uint8_t i,UserNum;
 165   1        UserNum =0;
 166   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 167   1        {
 168   2          if ( CardMemoryMgr[i].Status == CIDisValid )
 169   2          {
 170   3            UserNum++;
 171   3          }
 172   2        }
 173   1        return UserNum;
 174   1      }
 175          
 176          void ShowRegisterCardUser(void)//显示注册磁卡用户
C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 4   

 177          {
 178   1        status_t GetCardID;
 179   1      
 180   1        if ( CardUserRegisterMgr.Status == StartCardUserRegister )
 181   1        {
 182   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
 183   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
 184   2          )
 185   2          {
 186   3            CardUserRegisterMgr.Status = Fail;
 187   3            CardUserRegisterMgr.ErrorType = SystemNoMaster;
 188   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 189   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
 190   3            #ifdef LED_HFG12864_SHOW
 191   3            Clear_Screen();
 192   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
 193   3            #endif
 194   3          }
 195   2          else
 196   2          {
 197   3            if ( CheckMemoryMgr.CardUserNum < DEF_MAX_CARDUSER )
 198   3            {
 199   4              CardUserRegisterMgr.Status = InputCardUserID;
 200   4              DataInputMgr.Status = InputIdle;
 201   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
 202   4              #ifdef LED_HFG12864_SHOW
 203   4              Clear_Screen();
 204   4              DisHZ16x14Str(3,0,InputUserIDStr,NormalDisplay);
 205   4              #endif
 206   4            }
 207   3            else
 208   3            {
 209   4              CardUserRegisterMgr.Status = Fail;
 210   4              CardUserRegisterMgr.ErrorType = MemoryIsFull;
 211   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 212   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 213   4              #ifdef LED_HFG12864_SHOW
 214   4              Clear_Screen();
 215   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 216   4              #endif
 217   4            }
 218   3          }
 219   2          
 220   2        }
 221   1        if ( CardUserRegisterMgr.Status == InputCardUserID )
 222   1          {
 223   2            CardUserRegisterMgr.UserID = Get_Availabe_CardUserID();
 224   2            CardUserRegisterMgr.Status = ReadingCardID; 
 225   2            CardUserRegisterMgr.TimeCnt = Def_UserSwingCardTimeDelay;   //set to 5s
 226   2            //GUI_Flag_RefreshLCD = bTRUE;
 227   2            PLAY_VOICE_ONESEGMENT(VOICE_PleaseSwingCard);
 228   2            #ifdef LED_HFG12864_SHOW
 229   2            Clear_Screen();
 230   2            DisHZ16x14Str(3,40,PleaseSwingCardStr,NormalDisplay);
 231   2            #endif
 232   2          }
 233   1        else if ( CardUserRegisterMgr.Status == ReadingCardID)
 234   1        {
 235   2          GetCardID = MFC_Auto_Reader(CardUserRegisterMgr.CID);
 236   2          if ( GetCardID == S_SUCCESS )
 237   2          {
 238   3            CardUserRegisterMgr.Status = SavedCardID;
C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 5   

 239   3          }
 240   2          if ( --CardUserRegisterMgr.TimeCnt < 1 )
 241   2          {
 242   3            CardUserRegisterMgr.Status = Fail;
 243   3            CardUserRegisterMgr.ErrorType = TimeOut;
 244   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 245   3            //GUI_Flag_RefreshLCD = bTRUE;
 246   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 247   3            #ifdef LED_HFG12864_SHOW
 248   3            Clear_Screen();
 249   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
 250   3            #endif
 251   3          }
 252   2        }
 253   1        else if ( CardUserRegisterMgr.Status ==  SavedCardID )
 254   1        {
 255   2          if (CompareCardIDwithMemory(CardUserRegisterMgr.CID) == 0x00 )    //card CID is not be used
 256   2          {
 257   3            if ( SaveCardUserToMemory(CardUserRegisterMgr.CID,CardUserRegisterMgr.UserID) == S_SUCCESS )
 258   3            {
 259   4              CardUserRegisterMgr.Status = Success;
 260   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 261   4              //GUI_Flag_RefreshLCD = bTRUE;
 262   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 263   4              #ifdef LED_HFG12864_SHOW
 264   4              Clear_Screen();
 265   4              DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
 266   4              #endif
 267   4              CheckMemoryMgr.CardUserNum+=1;
 268   4            }
 269   3            else
 270   3            {
 271   4              CardUserRegisterMgr.Status = Fail;
 272   4              CardUserRegisterMgr.ErrorType = MemoryIsFull;
 273   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 274   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 275   4              Hardware_DelayMs(100);
 276   4              #ifdef LED_HFG12864_SHOW
 277   4              Clear_Screen();
 278   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 279   4              #endif
 280   4            }
 281   3          }
 282   2          else
 283   2          {
 284   3            CardUserRegisterMgr.Status = Fail;
 285   3            CardUserRegisterMgr.ErrorType = CardCIDisBeUsed;
 286   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 287   3            //GUI_Flag_RefreshLCD = bTRUE;
 288   3            PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Card);
 289   3            #ifdef LED_HFG12864_SHOW
 290   3            DisHZ16x14Str(3,36,CardCIDisBeUsedStr,NormalDisplay);
 291   3            #endif
 292   3          }
 293   2        }
 294   1        else if ( CardUserRegisterMgr.Status ==  Success )
 295   1          {
 296   2            if ( --CardUserRegisterMgr.TimeCnt < 1 )
 297   2            {
 298   3              //CardUserRegisterMgr.Status = StartCardUserRegister;
 299   3              GoToCardMenu();
 300   3              #ifdef Function_EventLog
C51 COMPILER V9.60.0.0   MFCLOGIC                                                          02/09/2023 18:56:36 PAGE 6   

 301   3              GUI_CreatAndSaveLog(AddCardUser);
 302   3              #endif
 303   3            }
 304   2          }
 305   1        else if ( CardUserRegisterMgr.Status == Fail )
 306   1          {
 307   2            if (CardUserRegisterMgr.ErrorType == UserIDisRegistered)
 308   2            {
 309   3            
 310   3            }
 311   2            else if ( CardUserRegisterMgr.ErrorType == SystemNoMaster )
 312   2            {
 313   3              
 314   3            }
 315   2            else if ( CardUserRegisterMgr.ErrorType == MemoryIsFull )
 316   2            {
 317   3            
 318   3            }
 319   2            else if ( CardUserRegisterMgr.ErrorType == CardCIDisBeUsed )
 320   2            {
 321   3              
 322   3            }
 323   2            else
 324   2            {
 325   3              
 326   3            }
 327   2            if ( CardUserRegisterMgr.TimeCnt-- < 1 )
 328   2            {
 329   3              GoToCardMenu();
 330   3            }
 331   2          }
 332   1      }
 333          
 334          
 335          
 336          
 337          
 338          
 339          
 340          
 341          
 342          
 343          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1091    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
