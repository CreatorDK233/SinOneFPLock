C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic;.\Drivers\Protocol\YC_NFC;.\Drivers\Protocol\WIFI_Tuya) 
                    -DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Objects\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          #include "TuyaWIFI.h"
   8          //Logic layer
   9          #include "AppUnlock.h"
  10          #include "KeyScan.h"
  11          #include "Motor.h"
  12          #include "Log.h"
  13          #include "FP.h"
  14          #include "LCD.h"
  15          #include "MFC.h"
  16          #include "RTC.h"
  17          //Application layer
  18          #include "GUI.h"
  19          #include "GUI_Function.h"
  20          #include "Basic_Function.h"
  21          #include "Voice_Menu.h"
  22          #include "Font_Menu.h"
  23          #include "Font.h"
  24          
  25          struct
  26          {
  27            enum{
  28              SetYearMajor=0,
  29              SetYearMinor=1,
  30              SetMonthMajor,
  31              SetMonthMinor,
  32              SetDateMajor,
  33              SetDateMinor,
  34              SetHourMajor,
  35              SetHourMinor,
  36              SetMinuteMajor,
  37              SetMinuteMinor,
  38              SetSecondMajor,
  39              SetSecondMinor
  40            }Status;
  41          
  42          }TimeSettingMgr;
  43          
  44          screen_t LastScreen;
  45          VoiceMenuMgr_t VoiceMenuMgr;
  46          DataInputMgr_t DataInputMgr;
  47          PasscodeInputMgr_t PasscodeInputMgr;
  48          uint8_t GUI_TimeCnt;
  49          uint8_t GUI_ToggleFlag_1s;
  50          uint8_t GUI_ToggleFlag_05s;
  51          bool_t GUI_Flag_RefreshLCD;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 2   

  53          keycode_t gui_keycode = KEY_NONE;
  54          
  55          uint8_t PasscodeBUFF1[12];
  56          
  57          /*******************************************************/
  58          /*******************************************************
  59          /*******************************************************/
  60          void ShowIdentifySuccessPage(void)//认证成功页面
  61          {
  62   1        #ifdef Function_ScreenDisplay
                uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
                uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
                uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
              //  uint8_t InitialStatusStrEn[]={"Initial"};
                #endif  
  70   1      
  71   1        if ( MotorMgr.MotorStatus != IDLE )
  72   1        {
  73   2          #ifdef Function_ScreenDisplay
                  DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
                  
                  if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
                    {
                        DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
                        DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    else*/
                    {
                      DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
                      DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
                  {
                    
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 3   

                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
                  {
                  
                      DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
                  }
                  DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
                  
                  #endif 
 138   2          
 139   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 140   2          {
 141   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 142   3            
 143   3            #ifdef Function_TuyaWifi
 144   3            if( UserIdentifyResultMgr.IdentifyType == WIFITEMPPASSCODE )
 145   3            {
 146   4              WifiMgr.PostMgr.Flag.Bits.TempPasswordUnlock = 1;
 147   4            }
 148   3            else if( UserIdentifyResultMgr.IdentifyType != RemoteUnlock )
 149   3            {
 150   4              WifiMgr.PostMgr.Flag.Bits.Unlock = 1;
 151   4            }
 152   3            #endif
 153   3            
 154   3            #ifdef Function_FPMbreathingLed
 155   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 156   3            //{
 157   3              SetFPMbreathingLed(FPMbreathingLed_Green);
 158   3            //}
 159   3            #endif  
 160   3                  
 161   3          }
 162   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 163   2          {
 164   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 165   3            {
 166   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 167   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 168   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 169   4              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(OpenDoor);
                      #endif
 172   4            }
 173   3            else if ( MotorMgr.CCWWAITTimer == 1)
 174   3            {
 175   4              //EMAGNET_RelaseTrigger();
 176   4            }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 4   

 177   3          }
 178   2        }
 179   1        else
 180   1        {
 181   2          #ifdef Function_ScreenDisplay
                  GUI_Flag_RefreshLCD = bTRUE;
                  DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
                    DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
                  #endif
 186   2          
 187   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 188   2          {
 189   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 190   3            {
 191   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 192   4            }
 193   3            UserIdentifyResultMgr.TimeCnt--;
 194   3          }
 195   2          else
 196   2          {
 197   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 198   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 199   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 200   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 201   3            CardIdentifyMgr.Status = ReadingCardID;
 202   3            FpIdentifyMgr.Status = FPMcmdStart;
 203   3            CurrentScreen = SCREEN_Main;  
 204   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 205   3            
 206   3      //      #ifdef Function_FPMbreathingLed
 207   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 208   3      //      #endif  
 209   3          }
 210   2        }
 211   1      
 212   1      }
 213          /*******************************************************/
 214          /*******************************************************/
 215          /*******************************************************/
 216          void ShowIdentifyFailPage(void)//认证失败页面
 217          {
 218   1        #ifdef Function_ScreenDisplay
                DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
                
                if ( UserIdentifyResultMgr.IdentifyType == CARD )
                {
                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                {
                  if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
                  {
                    DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
                    DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
                  }
                  else
                  {
                    DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                  }
                }
                else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 5   

                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                #endif
 242   1        
 243   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 244   1        {
 245   2          #ifdef Function_FPMbreathingLed
 246   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 247   2          //{
 248   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 249   2          //}
 250   2          #endif
 251   2          #ifdef Function_TuyaWifi
 252   2          WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
 253   2          if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 254   2          {
 255   3            WifiMgr.PostMgr.AlarmType = FingerErrorAlarm;
 256   3          }
 257   2          else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
 258   2          {
 259   3            WifiMgr.PostMgr.AlarmType = PasswordErrorAlarm;
 260   3          }
 261   2          else if ( UserIdentifyResultMgr.IdentifyType == CARD )
 262   2          {
 263   3            WifiMgr.PostMgr.AlarmType = CardErrorAlarm;
 264   3          }
 265   2          #endif
 266   2        }
 267   1      
 268   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 269   1        {
 270   2          UserIdentifyResultMgr.TimeCnt--;
 271   2        }
 272   1        else
 273   1        {
 274   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 275   2          CardIdentifyMgr.Status = ReadingCardID;
 276   2          FpIdentifyMgr.Status = FPMcmdStart;
 277   2          CurrentScreen = SCREEN_Main;
 278   2          RefreshSystemSleepTime();
 279   2          
 280   2          #ifdef Function_FPMbreathingLed
 281   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 282   2          #endif
 283   2        }
 284   1      }
 285          
 286          /*******************************************************/
 287          /*******************************************************/
 288          /*******************************************************/
 289          void DisplayMainPage(void)//界面_主页面
 290          {
 291   1        #ifdef Function_ScreenDisplay
                code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
              //  code uint8_t Str1En[]={"Sys without"};
                code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t Str2En[]={"admin."};
                code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t Str3En[]={"Input 2nd ID"};
                code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 6   

             -HZ_end};
              //  code uint8_t Str4En[]={"Press # to menu"};
              
                uint8_t Empty32X20[80]={
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                };
              
                DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
                DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
                DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
                DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
                DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
                  
                  if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
                  {
                    if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
                        ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
                      )
                    {
                      DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                      
                    else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisHZ16x14Str(3,4,Str4,NormalDisplay);          
                    }
                    
                    else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
                    {
                      Clear_Screen_Page(2);
                      Clear_Screen_Page(3);
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
                      DisHZ16x14Str(2,40,Str1,NormalDisplay);
                      DisHZ16x14Str(4,40,Str2,NormalDisplay);
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                    else
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
                      DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
              //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        if (GUI_ToggleFlag_05s == 0 )
                        {
                          DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
                        }
                        else
                        {
                          DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        }
                    }
                    //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 7   

                    ShowLockBrand();
                  }
                #endif
 365   1      }
 366          
 367          /*******************************************************/
 368          void GUI_UpadteMain(void)//GUI_主界面
 369          {
 370   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 371   1        {
 372   2          CurrentScreen = SCREEN_SystemLocked;
 373   2          #ifdef Function_FPMbreathingLed
 374   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 375   2          #endif
 376   2        }
 377   1        
 378   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 379   1        {
 380   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 381   2          CardUserIdentify();
 382   2        }
 383   1      
 384   1        
 385   1        if ( CardIdentifyMgr.Status == Success)
 386   1        {
 387   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 388   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 389   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 390   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 391   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 392   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 393   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 394   2          {
 395   3            UnlockSuccess(CARD);
 396   3          }
 397   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 398   2          {
 399   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 400   3            {
 401   4              UnlockSuccess(CARDandPASSCODE);
 402   4            }
 403   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 404   3            { 
 405   4              UnlockSuccess(FINGERPRINTandCARD);
 406   4            }
 407   3            else{ 
 408   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 409   4              {
 410   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 411   5                //CardIdentifyMgr.Status = ReadingCardID;
 412   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 413   5              }
 414   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 415   4              {
 416   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 417   5                {
 418   6                  CardIdentifyMgr.Status = ReadingCardID;
 419   6                }
 420   5                UserIdentifyResultMgr.VoiceDelay--;
 421   5              }
 422   4            }
 423   3          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 8   

 424   2        }
 425   1        else if ( CardIdentifyMgr.Status == Fail)
 426   1        {
 427   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 428   2          {
 429   3      //      if ( (CardIdentifyMgr.CID[0] == 0x16)
 430   3      //        &&(CardIdentifyMgr.CID[1] == 0xD4)
 431   3      //        &&(CardIdentifyMgr.CID[2] == 0xDB)
 432   3      //        &&(CardIdentifyMgr.CID[3] == 0x3C) )
 433   3      //      {
 434   3      //        DEBUG_MARK;
 435   3      //        if ( LockBrand.BrandChangeTimeDelay == 0 )
 436   3      //        {
 437   3      //          WriteLockBrand();
 438   3      //          if ( LockBrand.GotBrandData == bTRUE )
 439   3      //          {
 440   3      //            DEBUG_MARK;
 441   3      //            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 442   3      //            LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 443   3      //            RefreshSystemSleepTime();
 444   3      //          }
 445   3      //        }
 446   3      //        CardIdentifyMgr.Status = ReadingCardID;
 447   3      //      }
 448   3      //      else
 449   3      //      {
 450   3              UnlockSuccess(INITIALSTATUS);
 451   3              RefreshSystemSleepTime();
 452   3      //      }
 453   3          }
 454   2          else
 455   2          {
 456   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 457   3            UserIdentifyResultMgr.IdentifyType = CARD;
 458   3            UserIdentifyResultMgr.CardUserID = 0x00;
 459   3            //Enable_KEYLED_IdentifyFail();
 460   3            CurrentScreen = SCREEN_IdentifyFail;
 461   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 462   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 463   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 464   3            {
 465   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 466   4            }
 467   3            else
 468   3            {
 469   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 470   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 471   4            }
 472   3          }
 473   2        }
 474   1      
 475   1        FpUserIdentify();
 476   1        if ( FpIdentifyMgr.Status == success)
 477   1        {
 478   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 479   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 480   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 481   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 482   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 483   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 484   2          {
 485   3            UnlockSuccess(FINGERPRINT);
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 9   

 486   3          }
 487   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 488   2          {
 489   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 490   3            {
 491   4              UnlockSuccess(FINGERPRINTandCARD);
 492   4            }
 493   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 494   3            {
 495   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 496   4            }
 497   3            else
 498   3            {
 499   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 500   4              {
 501   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 502   5                //FpIdentifyMgr.Status = FPMcmdStart;
 503   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 504   5              }
 505   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 506   4              {
 507   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 508   5                {
 509   6                  FpIdentifyMgr.Status = FPMcmdStart;
 510   6                }
 511   5                UserIdentifyResultMgr.VoiceDelay--;
 512   5              }
 513   4            }
 514   3          }
 515   2        }
 516   1        else if ( FpIdentifyMgr.Status == fail)
 517   1        {
 518   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 519   2          {
 520   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 521   3          }
 522   2          else{
 523   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 524   3          }
 525   2          
 526   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 527   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 528   2            )
 529   2          {
 530   3            UnlockSuccess(INITIALSTATUS);
 531   3          }
 532   2          else
 533   2          {
 534   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 535   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 536   3            UserIdentifyResultMgr.FPUserID = 0x00;
 537   3            //Enable_KEYLED_IdentifyFail();
 538   3            CurrentScreen = SCREEN_IdentifyFail;
 539   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 540   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 541   3            
 542   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 543   3            {
 544   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 545   4            }
 546   3            else
 547   3            {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 10  

 548   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 549   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 550   4            }
 551   3          
 552   3          }
 553   2      
 554   2        }
 555   1      
 556   1        PasscodeUserIdentify();
 557   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 558   1        {
 559   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 560   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 561   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 562   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 563   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 564   2          if ( (UserIdentifyResultMgr.UnlockingMode == SingalMode)
 565   2            || (UserIdentifyResultMgr.PasscodeType == AppPasscode)
 566   2            || (UserIdentifyResultMgr.PasscodeType == WifiTempPasscode) )
 567   2          {
 568   3            #ifdef Function_TuyaWifi
 569   3            if(UserIdentifyResultMgr.PasscodeType == WifiTempPasscode){
 570   4              UnlockSuccess(WIFITEMPPASSCODE);
 571   4            }
 572   3            else
 573   3            #endif
 574   3            {
 575   4              UnlockSuccess(PASSCODE);
 576   4            }
 577   3          }
 578   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 579   2          {
 580   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 581   3            {
 582   4              UnlockSuccess(CARDandPASSCODE);
 583   4            }
 584   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 585   3            { 
 586   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 587   4            }
 588   3            else
 589   3            {
 590   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 591   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 592   4              UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 593   4            }
 594   3          }
 595   2        }
 596   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 597   1        {
 598   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 599   2          {
 600   3            UnlockSuccess(INITIALSTATUS);
 601   3          }
 602   2          else
 603   2          {
 604   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 605   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 606   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 607   3            //Enable_KEYLED_IdentifyFail();
 608   3            CurrentScreen = SCREEN_IdentifyFail;
 609   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 11  

 610   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 611   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 612   3            {
 613   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 614   4            }
 615   3            else
 616   3            {
 617   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 618   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 619   4            }
 620   3          }
 621   2        }
 622   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 623   1        {
 624   2          AgingTestMgr.TestTimes=0x0000;    
 625   2          CurrentScreen = SCREEN_AgingTest;
 626   2        }
 627   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 628   1        {
 629   2          GoToSystemVersion();
 630   2        }
 631   1        else if (PasscodeUserIdentifyMgr.Status == DeleteWifiTempPasscodeSuccess )
 632   1        {
 633   2          PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 634   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 635   2        }
 636   1        
 637   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 638   1        {
 639   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 640   2                ( (UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 641   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 642   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ) )
 643   2              )
 644   2          {
 645   3          }
 646   2        }
 647   1        #ifdef Function_TuyaWifi
 648   1        if( WifiMgr.WifiConnection.Status == JustConnected )
 649   1        {
 650   2          WifiMgr.WifiConnection.Status = Connected;
 651   2          //PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
 652   2        }
 653   1        #endif
 654   1        #ifdef Function_ScreenDisplay
                  DisplayMainPage();
                #endif
 657   1      
 658   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 659   1        {
 660   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  #endif
 663   2          //SET_ALLKEYLED_OFF();
 664   2        }
 665   1        
 666   1      }
 667          
 668          /*******************************************************/
 669          void ShowDoorBell(void)
 670          {
 671   1        #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 12  

                DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
                #endif
 674   1        if ( DoorBellMgr.TimeCnt > 0 )
 675   1        {
 676   2          #ifdef Function_TuyaWifi
 677   2          if( DoorBellMgr.TimeCnt == 150 )
 678   2          {
 679   3            WifiMgr.RemoteUnlockMgr.WaitRequestRemoteUnlock = bTRUE;
 680   3          }
 681   2          #endif
 682   2          DoorBellMgr.TimeCnt--;
 683   2        }
 684   1        else
 685   1        {
 686   2          CurrentScreen = SCREEN_Main;
 687   2        }
 688   1      }
 689          
 690          
 691          /*******************************************************/
 692          /*******************************************************/
 693          /*******************************************************/
 694          void ShowMainMenu(void)//界面-主菜单
 695          {
 696   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<1;j++)
                  {
                    DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 714   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 715   1        {
 716   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 717   2          {
 718   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 719   3            VoiceMenuMgr.MenuPoint++;
 720   3          }
 721   2        }
 722   1      }
 723          /*******************************************************/
 724          /*******************************************************/
 725          /*******************************************************/
 726          void ShowLogMenu(void)//界面-日志菜单
 727          {
 728   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                  DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
                }   
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 13  

                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 736   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 737   1        {
 738   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 739   2          {
 740   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 741   3            VoiceMenuMgr.MenuPoint++;
 742   3          }
 743   2        }
 744   1        
 745   1      }
 746          
 747          /*******************************************************/
 748          /*******************************************************/
 749          /*******************************************************/
 750          void ShowFpMenu(void)//界面-指纹菜单
 751          {
 752   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 760   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 761   1        {
 762   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 763   2          {
 764   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 765   3            VoiceMenuMgr.MenuPoint++;
 766   3          }
 767   2        }
 768   1      }
 769          
 770          
 771          /*******************************************************/
 772          /*******************************************************/
 773          /*******************************************************/
 774          void ShowPasscodeMenu(void)//界面-密码菜单
 775          {
 776   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
                } 
                #endif
 783   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 784   1        {
 785   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 786   2          {
 787   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 788   3            VoiceMenuMgr.MenuPoint++;
 789   3          }
 790   2        } 
 791   1      
 792   1      }
 793          
 794          /*******************************************************/
 795          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 14  

 796          /*******************************************************/
 797          void ShowCardUserMenu(void)//界面-磁卡菜单
 798          {
 799   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                    DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
                } 
                #endif
 806   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 807   1        {
 808   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 809   2          {
 810   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 811   3            VoiceMenuMgr.MenuPoint++;
 812   3          }
 813   2        } 
 814   1      }
 815          
 816          /*******************************************************/
 817          /*******************************************************/
 818          /*******************************************************/
 819          void ShowSystemConfigMenu(void)//系统配置菜单
 820          {
 821   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<2;j++)
                  {
                    DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 839   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 840   1        {
 841   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 842   2          {
 843   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 844   3            VoiceMenuMgr.MenuPoint++;
 845   3          }
 846   2        }   
 847   1      }
 848          /*******************************************************/
 849          /*******************************************************/
 850          /*******************************************************/
 851          void ShowNetWorkConnecting(void)//联网中
 852          {
 853   1        #ifdef Function_TuyaWifi
 854   1        if ( WifiMgr.Link.Status == LinkStart )
 855   1        {
 856   2          WifiMgr.Link.Status = LinkWait;
 857   2          WifiMgr.Link.TimeCnt = 120*64;  //120S
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 15  

 858   2          WifiMgr.PostMgr.Flag.Bits.StartNetwork = 1;
 859   2          PLAY_VOICE_ONESEGMENT(VOICE_NetworkingConfiguration);
 860   2        }
 861   1        else if ( WifiMgr.Link.Status == LinkWait )
 862   1        {
 863   2          if( WifiMgr.WifiConnection.Status == JustConnected )
 864   2          {
 865   3            WifiMgr.WifiConnection.Status = Connected;
 866   3            WifiMgr.Link.Status = LinkSuccess;
 867   3          }
 868   2          RefreshSystemSleepTime();
 869   2        }
 870   1        else if ( WifiMgr.Link.Status == LinkSuccess )
 871   1        {
 872   2          PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
 873   2          WifiMgr.Link.Status = LinkIdle;
 874   2          WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
 875   2        }
 876   1        else if ( WifiMgr.Link.Status == LinkFail )
 877   1        {
 878   2          //if ( WifiMgr.Link.errorcode == 0x02 ) //wifi module not be found
 879   2          PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Fail);
 880   2          WifiMgr.Link.Status = LinkIdle;
 881   2          WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
 882   2        }
 883   1        
 884   1        if( WifiMgr.Link.TimeCnt > 0){
 885   2          WifiMgr.Link.TimeCnt--;
 886   2        }
 887   1        else
 888   1        {
 889   2          if ( WifiMgr.Link.Status == LinkWait )
 890   2          {
 891   3            WifiMgr.Link.Status = LinkFail;
 892   3            //WifiMgr.Link.errorcode = 0x01;
 893   3          }
 894   2          else
 895   2          {
 896   3            GoToMainMenu();
 897   3          }
 898   2        }
 899   1        #endif
 900   1      }
 901          
 902          /*******************************************************/
 903          /*******************************************************/
 904          /*******************************************************/
 905          void ShowRegisterMasterFp(void)//界面-注册管理员指纹
 906          {
 907   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
 911   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 912   1        {
 913   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 914   2          {
 915   3            FpUserRegisterMgr.Status = AddUserToFPM;
 916   3            FpRegisterMgr.Status = FPMcmdStart;
 917   3            DataInputMgr.Status = InputIdle;
 918   3          }
 919   2          else
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 16  

 920   2          {
 921   3            FpUserRegisterMgr.Status = RegisterUserFail;
 922   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 923   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 924   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 925   3            Hardware_DelayMs(100);
 926   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
 930   3          }
 931   2        }
 932   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 933   1        {
 934   2          FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 935   2          
 936   2          RegisterFp(FpUserRegisterMgr.UserID-1);
 937   2          
 938   2          if (FpRegisterMgr.Status == success)
 939   2          {
 940   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
 941   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 942   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 943   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
 947   3            //GUI_Flag_RefreshLCD = bTRUE;
 948   3            CheckMemoryMgr.FpMasterNum+=1;
 949   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 950   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 951   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 952   3      //      #ifdef Function_TuyaWifi
 953   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
 954   3      //      #endif
 955   3          }
 956   2          else if (FpRegisterMgr.Status == fail)
 957   2          {
 958   3            FpUserRegisterMgr.Status = RegisterUserFail;
 959   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 960   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 961   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 962   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 963   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
 967   4            }
 968   3            else
 969   3            {
 970   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 971   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
 975   4            }
 976   3            //GUI_Flag_RefreshLCD = bTRUE;
 977   3          }
 978   2        }
 979   1      
 980   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 981   1        {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 17  

 982   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 983   2          {
 984   3            GoToFpMenu();
 985   3            RefreshSystemSleepTime();
 986   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
 989   3      
 990   3            DEBUG_MARK;
 991   3          }
 992   2        }
 993   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
 994   1        {
 995   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
 996   2          {
 997   3            
 998   3          }
 999   2          
1000   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1001   2          {
1002   3          
1003   3          }
1004   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1005   2          {
1006   3        
1007   3          }
1008   2          else
1009   2          {
1010   3      
1011   3          }
1012   2          
1013   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1014   2          {
1015   3            GoToFpMenu();
1016   3          }
1017   2          DEBUG_MARK;
1018   2        }
1019   1      }
1020          
1021          /*******************************************************/
1022          /*******************************************************/
1023          /*******************************************************/
1024          void ShowDeleteMasterFp(void)//删除管理员指纹
1025          {
1026   1        //uint8_t i;
1027   1      
1028   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1029   1        {
1030   2          FpUserDeleteMgr.Status = InputUserID;
1031   2          DataInputMgr.Status = InputIdle;
1032   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1033   2        }
1034   1        
1035   1        if ( FpUserDeleteMgr.Status == InputUserID )
1036   1        {
1037   2          
1038   2          GUI_DataInputCreat(5,72,2,0x0000);
1039   2      
1040   2          if (DataInputMgr.Status == InputEnd)
1041   2          {
1042   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
1043   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 18  

1044   3            {
1045   4              DataInputMgr.Status = InputIdle;    //Reinput
1046   4            }
1047   3            else
1048   3            {
1049   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1050   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1051   4              DataInputMgr.Status = InputIdle;  
1052   4            }
1053   3          }
1054   2          else if  (DataInputMgr.Status == InputExit)
1055   2          {
1056   3            FpUserDeleteMgr.Status = DeleteUserFail;
1057   3            FpUserDeleteMgr.ErrorType = QUIT;
1058   3            FpUserDeleteMgr.TimeCnt = 0;  
1059   3          }
1060   2        }
1061   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1062   1        {
1063   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1064   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1065   2          {
1066   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1067   3            {
1068   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
1069   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
1070   4              {
1071   5                FpUserDeleteMgr.Status = DeleteUserFail;
1072   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
1073   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1074   5                //GUI_Flag_RefreshLCD = bTRUE;
1075   5                DEF_Fail_Beep;
1076   5              }
1077   4              else
1078   4              {
1079   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1080   5                DataInputMgr.Status = InputIdle;  
1081   5                //GUI_Flag_RefreshLCD = bTRUE;
1082   5              }
1083   4            }
1084   3            else
1085   3            {
1086   4              FpUserDeleteMgr.Status = DeleteUserFail;
1087   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1088   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1089   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1090   4              //GUI_Flag_RefreshLCD = bTRUE;
1091   4            }
1092   3          }
1093   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1094   2          {
1095   3            FpUserDeleteMgr.Status = DeleteUserFail;
1096   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1097   3            FpUserDeleteMgr.ErrorType = QUIT;
1098   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1099   3            //GUI_Flag_RefreshLCD = bTRUE;
1100   3          }
1101   2        }
1102   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1103   1        {
1104   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1105   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 19  

1106   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1107   2          FpmAckMgr.Status = WaitACK;
1108   2        }
1109   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1110   1          {
1111   2            if (FpmAckMgr.Status == GotACK)
1112   2              {
1113   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1114   3                {
1115   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1116   4                  //GUI_Flag_RefreshLCD = bTRUE;
1117   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1118   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1119   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1120   4                  {
1121   5                    CheckMemoryMgr.FpMasterNum-=1;
1122   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1123   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1124   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1125   5                  }
1126   4                }
1127   3                else
1128   3                {
1129   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1130   4                  //GUI_Flag_RefreshLCD = bTRUE;
1131   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1132   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1133   4                }
1134   3                DEBUG_MARK;
1135   3              }
1136   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1137   2              {
1138   3                FpUserDeleteMgr.Status = DeleteUserFail;
1139   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1140   3                //GUI_Flag_RefreshLCD = bTRUE;
1141   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1142   3              }
1143   2      
1144   2          }
1145   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1146   1          {
1147   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1148   2            {
1149   3              CurrentScreen = SCREEN_MasterFpMenu;
1150   3              UnlockModeJudgment();
1151   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1154   3            }
1155   2            DEBUG_MARK;
1156   2          }
1157   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1158   1          {
1159   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1160   2            {
1161   3              
1162   3            }
1163   2            /*
1164   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1165   2            {
1166   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1167   2            }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 20  

1168   2            */
1169   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1170   2            {
1171   3              
1172   3            }
1173   2            else
1174   2            {
1175   3      
1176   3            }
1177   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1178   2            {
1179   3              CurrentScreen = SCREEN_MasterFpMenu;
1180   3            }
1181   2            DEBUG_MARK;
1182   2          }
1183   1        
1184   1      }
1185          /*******************************************************/
1186          /*******************************************************/
1187          /*******************************************************/
1188          void ShowRegisterUserFp(void)//界面-注册用户指纹
1189          {
1190   1        //uint8_t i;
1191   1        //uint16_t UserID;  
1192   1        //~{Lm<SV8NFSC;'~}
1193   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
1197   1        
1198   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1199   1        {
1200   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1201   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1202   2          )
1203   2          {
1204   3            FpUserRegisterMgr.Status = RegisterUserFail;
1205   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1206   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1207   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1208   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1212   3            //GUI_Flag_RefreshLCD = bTRUE;
1213   3          } 
1214   2          else
1215   2          {
1216   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1217   3            {
1218   4              FpUserRegisterMgr.Status = AddUserToFPM;
1219   4              FpRegisterMgr.Status = FPMcmdStart;
1220   4              DataInputMgr.Status = InputIdle;
1221   4            }
1222   3            else
1223   3            {
1224   4              FpUserRegisterMgr.Status = RegisterUserFail;
1225   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1226   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1227   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1228   4              Hardware_DelayMs(100);
1229   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 21  

                      Clear_Screen();
                      DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                      #endif
1233   4              //GUI_Flag_RefreshLCD = bTRUE;
1234   4            }
1235   3          }
1236   2        }
1237   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1238   1        {
1239   2          FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1240   2          
1241   2          RegisterFp(FpUserRegisterMgr.UserID-1);
1242   2          
1243   2          if (FpRegisterMgr.Status == success)
1244   2          {
1245   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
1246   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1247   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1248   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1252   3            CheckMemoryMgr.FpUserNum+=1;
1253   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1254   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1255   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1256   3      //      #ifdef Function_TuyaWifi
1257   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
1258   3      //      #endif
1259   3          }
1260   2          else if (FpRegisterMgr.Status == fail)
1261   2          {
1262   3            FpUserRegisterMgr.Status = RegisterUserFail;
1263   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1264   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1265   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1266   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1267   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
1271   4              //GUI_Flag_RefreshLCD = bTRUE;
1272   4            }
1273   3            else
1274   3            {
1275   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1276   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
1280   4              //GUI_Flag_RefreshLCD = bTRUE;
1281   4            }
1282   3          }
1283   2        }
1284   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1285   1        {
1286   2          
1287   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1288   2          {
1289   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
1290   3            GoToFpMenu();
1291   3            RefreshSystemSleepTime();
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 22  

1292   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
1295   3          }
1296   2          DEBUG_MARK;
1297   2        }
1298   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1299   1        {   
1300   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1301   2          {
1302   3          
1303   3          }
1304   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1305   2          {
1306   3            
1307   3          }
1308   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1309   2          {
1310   3            
1311   3          }
1312   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1313   2          {
1314   3            
1315   3          }
1316   2          else
1317   2          {
1318   3            
1319   3          }
1320   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1321   2          {
1322   3            GoToFpMenu();
1323   3          }
1324   2          DEBUG_MARK;
1325   2        }
1326   1      }
1327          
1328          /*******************************************************/
1329          /*******************************************************/
1330          /*******************************************************/
1331          void ShowDeleteUserFp(void)//界面-删除用户指纹
1332          {
1333   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1334   1        {
1335   2          FpUserDeleteMgr.Status = InputUserID;
1336   2          DataInputMgr.Status = InputIdle;
1337   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1338   2        }
1339   1        if ( FpUserDeleteMgr.Status == InputUserID )
1340   1        {
1341   2            
1342   2            GUI_DataInputCreat(5,80,3,0x0000);
1343   2        
1344   2            if (DataInputMgr.Status == InputEnd)
1345   2            {
1346   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1347   3              if ((FpUserDeleteMgr.UserID >DEF_MAX_FPMASTER )&&( FpUserDeleteMgr.UserID < (DEF_MAX_FPMASTER+DEF_MAX_
             -FPUSER+1)) )
1348   3              {
1349   4                FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1350   4                CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1351   4                DataInputMgr.Status = InputIdle;
1352   4              }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 23  

1353   3              else        
1354   3              {
1355   4                DataInputMgr.Status = InputIdle;    //Reinput
1356   4              }
1357   3      
1358   3            }
1359   2            else if  (DataInputMgr.Status == InputExit)
1360   2            {
1361   3              FpUserDeleteMgr.Status = DeleteUserFail;
1362   3              FpUserDeleteMgr.ErrorType = QUIT;
1363   3              FpUserDeleteMgr.TimeCnt = 0;
1364   3            }
1365   2        }
1366   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1367   1        {
1368   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1369   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1370   2          {
1371   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1372   3            {
1373   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1374   4              DataInputMgr.Status = InputIdle;  
1375   4              //GUI_Flag_RefreshLCD = bTRUE;
1376   4            }
1377   3            else
1378   3            {
1379   4              FpUserDeleteMgr.Status = DeleteUserFail;
1380   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1381   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1382   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1383   4              //GUI_Flag_RefreshLCD = bTRUE;
1384   4            }
1385   3          }
1386   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1387   2          {
1388   3            FpUserDeleteMgr.Status = DeleteUserFail;
1389   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1390   3            FpUserDeleteMgr.ErrorType = QUIT;
1391   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1392   3            //GUI_Flag_RefreshLCD = bTRUE;
1393   3          }
1394   2        }
1395   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1396   1        {
1397   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1398   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1399   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1400   2          FpmAckMgr.Status = WaitACK;
1401   2        }
1402   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1403   1          {
1404   2            if (FpmAckMgr.Status == GotACK)
1405   2              {
1406   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1407   3                {
1408   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1409   4                  //GUI_Flag_RefreshLCD = bTRUE;
1410   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1411   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1412   4                  if ( CheckMemoryMgr.FpUserNum > 0 )
1413   4                  {
1414   5                    CheckMemoryMgr.FpUserNum-=1;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 24  

1415   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1416   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1417   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1418   5                  }
1419   4                }
1420   3                else
1421   3                {
1422   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1423   4                  //GUI_Flag_RefreshLCD = bTRUE;
1424   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1425   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1426   4                }
1427   3                DEBUG_MARK;
1428   3              }
1429   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1430   2              {
1431   3                FpUserDeleteMgr.Status = DeleteUserFail;
1432   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1433   3                //GUI_Flag_RefreshLCD = bTRUE;
1434   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1435   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1436   3              }
1437   2      
1438   2          }
1439   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1440   1          {
1441   2            
1442   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1443   2            {
1444   3              CurrentScreen = SCREEN_UserFpMenu;
1445   3              UnlockModeJudgment();
1446   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1449   3            }
1450   2            DEBUG_MARK;
1451   2          }
1452   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1453   1          {
1454   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1455   2            {
1456   3      
1457   3            }
1458   2            else
1459   2            {
1460   3      
1461   3            }
1462   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1463   2            {
1464   3              CurrentScreen = SCREEN_UserFpMenu;
1465   3            }
1466   2            DEBUG_MARK;
1467   2          }
1468   1        
1469   1      }
1470          
1471          
1472          /*******************************************************/
1473          /*******************************************************/
1474          /*******************************************************/
1475          void ShowDeleteAllUserFp(void)//界面-删除所有用户指纹
1476          {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 25  

1477   1        uint16_t i;
1478   1        
1479   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1480   1        {
1481   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1482   2          AllUserFpDeleteMgr.Selection = NO;
1483   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1484   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1485   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1489   2        }
1490   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1491   1        {
1492   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1493   2          //{
1494   2            
1495   2          //}
1496   2        }
1497   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1498   1        {
1499   2          
1500   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1501   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
1502   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1503   2          //GUI_Flag_RefreshLCD = bTRUE;
1504   2          FpmAckMgr.Status = WaitACK;
1505   2        }
1506   1        
1507   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1508   1            {
1509   2              if (FpmAckMgr.Status == GotACK)
1510   2              {
1511   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1512   3                {
1513   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1514   4                  //GUI_Flag_RefreshLCD = bTRUE;
1515   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1516   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1517   4                  CheckMemoryMgr.FpUserNum=0;
1518   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1519   4                  {
1520   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1521   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1522   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1523   5                  }
1524   4                }
1525   3                else
1526   3                {
1527   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1528   4                  //GUI_Flag_RefreshLCD = bTRUE;
1529   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1530   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1531   4                }
1532   3                DEBUG_MARK;
1533   3              }
1534   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1535   2              {
1536   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1537   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1538   3                //GUI_Flag_RefreshLCD = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 26  

1539   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1540   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1541   3              }
1542   2            }
1543   1        
1544   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1545   1          {
1546   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1550   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1551   2            {
1552   3              GoToFpMenu();
1553   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllFpUser);
                      #endif
1556   3            }
1557   2          }
1558   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1559   1          {
1560   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1564   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1565   2            {
1566   3              GoToFpMenu();
1567   3            }
1568   2          }
1569   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1570   1          {
1571   2            GoToFpMenu();
1572   2          }
1573   1        
1574   1      }
1575          
1576          /*******************************************************/
1577          /*******************************************************/
1578          /*******************************************************/
1579          /*******************************************************/
1580          /*******************************************************/
1581          /*******************************************************/
1582          void ShowDeleteCardUser(void)//界面-删除磁卡用户
1583          {
1584   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1585   1        {
1586   2          CardUserDeleteMgr.Status = InputCardUserID;
1587   2          DataInputMgr.Status = InputIdle;
1588   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1589   2        }
1590   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1591   1        {
1592   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1593   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1594   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1595   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1596   2          
1597   2          GUI_DataInputCreat(6,68,3,0x0000);
1598   2      
1599   2          if (DataInputMgr.Status == InputEnd)
1600   2          {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 27  

1601   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1602   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1603   3            {
1604   4              DataInputMgr.Status = InputIdle;    //Reinput
1605   4            }
1606   3            else if ( IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE )
1607   3            {
1608   4              DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1609   4              CardUserDeleteMgr.Status = Success; 
1610   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1611   4              //GUI_Flag_RefreshLCD = bTRUE;
1612   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1613   4              if ( CheckMemoryMgr.CardUserNum > 0 )
1614   4              {
1615   5                CheckMemoryMgr.CardUserNum-=1;
1616   5              }
1617   4                
1618   4            }
1619   3            else
1620   3            {
1621   4              CardUserDeleteMgr.Status = Fail;
1622   4              CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1623   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1624   4              //GUI_Flag_RefreshLCD = bTRUE;
1625   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1626   4            }
1627   3          }
1628   2          else if  (DataInputMgr.Status == InputExit)
1629   2          {
1630   3            CardUserDeleteMgr.Status = Fail;
1631   3            CardUserDeleteMgr.ErrorType = QUIT;
1632   3            CardUserDeleteMgr.TimeCnt = 0;
1633   3          }
1634   2        }
1635   1        
1636   1        else if  ( CardUserDeleteMgr.Status == Success)
1637   1        {
1638   2          
1639   2          if (--CardUserDeleteMgr.TimeCnt < 1 )
1640   2          {
1641   3            CurrentScreen = SCREEN_CardUserMenu;
1642   3            UnlockModeJudgment();
1643   3      //      #ifdef Function_TuyaWifi
1644   3      //      WifiMgr.PostMgr.Flag.Bits.CardSync = 1;
1645   3      //      #endif
1646   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteCardUser);
                    #endif
1649   3          }
1650   2        }
1651   1        else if ( CardUserDeleteMgr.Status == Fail)
1652   1        {
1653   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1654   2          {
1655   3      
1656   3          }
1657   2          else
1658   2          {
1659   3          
1660   3      
1661   3          }
1662   2          if ( CardUserDeleteMgr.TimeCnt-- < 1 )
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 28  

1663   2          {
1664   3            CurrentScreen = SCREEN_CardUserMenu;
1665   3          }
1666   2        }
1667   1      }
1668          
1669          /*******************************************************/
1670          /*******************************************************/
1671          /*******************************************************/
1672          void ShowDeleteAllCardUser(void)//界面-删除全部磁卡用户
1673          {
1674   1        
1675   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1676   1        {
1677   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1678   2          AllCardUserDeleteMgr.Selection = NO;
1679   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1680   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1681   2        }
1682   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1683   1        { 
1684   2          #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                    DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1688   2        }
1689   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1690   1        {
1691   2          
1692   2          DeleteAllCardUserfromMemory();
1693   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1694   2          AllCardUserDeleteMgr.Status = Success;
1695   2          //GUI_Flag_RefreshLCD = bTRUE;
1696   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1697   2          CheckMemoryMgr.CardUserNum =0;
1698   2        }
1699   1        else if ( AllCardUserDeleteMgr.Status == Success )
1700   1        {
1701   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                  #endif
1705   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1706   2          {
1707   3            GoToCardMenu();
1708   3            UnlockModeJudgment();
1709   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteAllCardUser);
                    #endif
1712   3          }
1713   2        }
1714   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1715   1        {
1716   2          GoToCardMenu();
1717   2        }
1718   1      }
1719          
1720          
1721          /*******************************************************/
1722          /*******************************************************/
1723          /*******************************************************/
1724          void ShowRegisterPasscodeUser(void)//注册密码用户
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 29  

1725          {
1726   1        uint8_t i;
1727   1        
1728   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1729   1        {
1730   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1731   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1732   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1733   2            )
1734   2          {
1735   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1736   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1737   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1738   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1739   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1743   3          }
1744   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1745   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1746   2          {
1747   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1748   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1749   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1750   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1751   3            Hardware_DelayMs(100);
1752   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
1756   3          }
1757   2          else
1758   2          {
1759   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1760   3            DataInputMgr.Status = InputIdle;
1761   3          }
1762   2        }
1763   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1764   1        {
1765   2          PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1766   2          PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1767   2          DataInputMgr.Status = InputIdle;
1768   2          //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1769   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1770   2          {
1771   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1772   3          }
1773   2          else
1774   2          {
1775   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1776   3          }
1777   2          
1778   2          PasscodeInputMgr.Point = 0x00;
1779   2          PasscodeInputMgr.PasscodeLen = 12;
1780   2          PasscodeInputMgr.Status = PasscodeInputStart;
1781   2          for (i=0;i<12;i++)
1782   2          {
1783   3            PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1784   3          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 30  

1785   2          PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1786   2          //GUI_Flag_RefreshLCD = bTRUE;
1787   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1788   2          {
1789   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1790   3          }
1791   2          else
1792   2          {
1793   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1794   3          }
1795   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1799   2        }
1800   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1801   1        {
1802   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_PasscodeInputCreat(5,0);
                  #endif
1806   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1807   2          {
1808   3            if ( PasscodeInputMgr.Point > 5 )
1809   3            {
1810   4              for (i=0;i<12;i++)
1811   4              {
1812   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1813   5              }
1814   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1815   4              PasscodeInputMgr.Point = 0x00;
1816   4              PasscodeInputMgr.PasscodeLen = 12;
1817   4              PasscodeInputMgr.Status = PasscodeInputStart;
1818   4              for (i=0;i<12;i++)
1819   4              {
1820   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1821   5              }
1822   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1823   4              //GUI_Flag_RefreshLCD = bTRUE;
1824   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1825   4              {
1826   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1827   5              }
1828   4              else
1829   4              {
1830   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1831   5              }
1832   4            }
1833   3            else
1834   3            {
1835   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1836   4              PasscodeInputMgr.Point = 0x00;
1837   4              PasscodeInputMgr.PasscodeLen = 12;
1838   4              PasscodeInputMgr.Status = PasscodeInputStart;
1839   4              for (i=0;i<12;i++)
1840   4              {
1841   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1842   5              }
1843   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1844   4              //GUI_Flag_RefreshLCD = bTRUE;
1845   4            }
1846   3          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 31  

1847   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1848   2          {
1849   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1850   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1851   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1852   3          }
1853   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1856   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1857   2          {
1858   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1859   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1860   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1861   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1862   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1866   3          } 
1867   2        }
1868   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1869   1        {
1870   2          GUI_PasscodeInputCreat(5,0);
1871   2      
1872   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1873   2          {
1874   3            if ( PasscodeInputMgr.Point > 5 )
1875   3              {
1876   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1877   4                //GUI_Flag_RefreshLCD = bTRUE;
1878   4              }
1879   3            else
1880   3              {
1881   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1882   4                PasscodeInputMgr.Point = 0x00;
1883   4                PasscodeInputMgr.PasscodeLen = 12;
1884   4                PasscodeInputMgr.Status = PasscodeInputStart;
1885   4                for (i=0;i<12;i++)
1886   4                {
1887   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1888   5                }
1889   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1890   4                //GUI_Flag_RefreshLCD = bTRUE;
1891   4              }
1892   3          }
1893   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1894   2          {
1895   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1896   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1897   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1898   3          }
1899   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1900   2          {
1901   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1902   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1903   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1904   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1905   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 32  

1909   3          } 
1910   2        }
1911   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1912   1        {
1913   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1914   2          {
1915   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1916   3            {
1917   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1918   4              {
1919   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1920   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1921   5                //GUI_Flag_RefreshLCD = bTRUE;
1922   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1923   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                        #endif
1927   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1928   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1929   6                }
1930   5                else{
1931   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1932   6                }
1933   5              }
1934   4              else
1935   4              {
1936   5                //目前不返回失败
1937   5              }
1938   4            }
1939   3            else
1940   3            {
1941   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1942   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
1943   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1944   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
1945   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
                      #endif
1949   4            }
1950   3          }
1951   2          else
1952   2          {
1953   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1954   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
1955   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1956   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1957   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1961   3          }
1962   2        }
1963   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
1964   1        {
1965   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1966   2          {
1967   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
                    #else
1970   3            
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 33  

1971   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1972   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1973   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
1974   4              /*
1975   4              FpUserRegisterMgr.Status = AddUserToFPM;  
1976   4              FpRegisterMgr.Status = FPMcmdStart;
1977   4              FpUserRegisterMgr.UserID=0x01;
1978   4              CurrentScreen = SCREEN_RegisterMasterFp;
1979   4              */
1980   4              GoToMainMenu();
1981   4            }
1982   3            else
1983   3            {
1984   4              GoToPasswordMenu();
1985   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1986   4            }
1987   3            #endif
1988   3            
1989   3      //      #ifdef Function_TuyaWifi
1990   3      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
1991   3      //      #endif
1992   3            
1993   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddPasscodeUser);
                    #endif
1996   3          }
1997   2        }
1998   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
1999   1        {
2000   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
2001   2          {
2002   3      
2003   3          }
2004   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2005   2          {
2006   3      
2007   3          }
2008   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
2009   2          {
2010   3      
2011   3          }
2012   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2013   2          {
2014   3      
2015   3          }
2016   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
2017   2          {
2018   3          
2019   3          }
2020   2          else
2021   2          {
2022   3      
2023   3          }
2024   2        
2025   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
2026   2          {
2027   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
2028   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
2029   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2030   3              )
2031   3            {
2032   4              CurrentScreen = SCREEN_Main;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 34  

2033   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2034   4              FpIdentifyMgr.Status = FPMcmdStart;
2035   4              CardIdentifyMgr.Status = ReadingCardID;
2036   4            }
2037   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2038   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
2039   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2040   3            )
2041   3            {
2042   4              CurrentScreen = SCREEN_Main;
2043   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2044   4              FpIdentifyMgr.Status = FPMcmdStart;
2045   4              CardIdentifyMgr.Status = ReadingCardID;
2046   4            }
2047   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2048   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
2049   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2050   3              )
2051   3            {
2052   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
2053   4              {
2054   5                GoToPasswordMenu();
2055   5              }
2056   4              else{
2057   5                GoToPasswordMenu();
2058   5              }
2059   4            }
2060   3            else
2061   3            {
2062   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
2063   4              GoToPasswordMenu();
2064   4            }
2065   3          }
2066   2        }
2067   1      }
2068          
2069          /*******************************************************/
2070          /*******************************************************/
2071          /*******************************************************/
2072          void ShowDeletePasscodeUser(void)//界面-删除密码用户
2073          {
2074   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
2075   1        {
2076   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
2077   2          DataInputMgr.Status = InputIdle;
2078   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
2079   2        }
2080   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
2081   1          {
2082   2            if (PasscodeUserDeleteMgr.UserPriority == Master)
2083   2            {
2084   3      //        DisOneDigital16x8(6,8,1,NormalDisplay);
2085   3      //        DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
2086   3            }
2087   2            else
2088   2            {
2089   3      //        DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
2090   3      //        DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
2091   3      //        DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
2092   3            }
2093   2            
2094   2            GUI_DataInputCreat(6,56,2,0x0000);
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 35  

2095   2      
2096   2            if (DataInputMgr.Status == InputEnd)
2097   2            {
2098   3              PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
2099   3              if (  (((PasscodeUserDeleteMgr.UserID>(DEF_MAX_PASSCODEMASTER+DEF_MAX_PASSCODEUSER))||(PasscodeUserDel
             -eteMgr.UserID<(DEF_MAX_PASSCODEMASTER+1)))&&(PasscodeUserDeleteMgr.UserPriority == User))   
2100   3                ||(((PasscodeUserDeleteMgr.UserID > DEF_MAX_PASSCODEMASTER)||(PasscodeUserDeleteMgr.UserID<1))&&(Pas
             -scodeUserDeleteMgr.UserPriority == Master))
2101   3               )      
2102   3              {
2103   4                DataInputMgr.Status = InputIdle;    //Reinput
2104   4              }
2105   3              else
2106   3              {
2107   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
2108   4                DataInputMgr.Status = InputIdle;  
2109   4              }
2110   3            }
2111   2            else if  (DataInputMgr.Status == InputExit)
2112   2            {
2113   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2114   3              PasscodeUserDeleteMgr.ErrorType = QUIT;
2115   3              PasscodeUserDeleteMgr.TimeCnt = 0;
2116   3            }
2117   2          }
2118   1        else if ( PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2119   1        {
2120   2          if ( IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE )
2121   2            {
2122   3              if (PasscodeUserDeleteMgr.UserPriority == Master)
2123   3              {
2124   4                if ((CheckMemoryMgr.PasscodeMasterNum==0x01))
2125   4                //&&(CheckMemoryMgr.FpMasterNum == 0x00))
2126   4                {
2127   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2128   5                  PasscodeUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
2129   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2130   5                  //GUI_Flag_RefreshLCD = bTRUE;
2131   5                  DEF_Fail_Beep;
2132   5                }
2133   4                else
2134   4                {
2135   5                  DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2136   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2137   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2138   5                  //GUI_Flag_RefreshLCD = bTRUE;
2139   5                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2140   5                  if ( CheckMemoryMgr.PasscodeMasterNum > 0 )
2141   5                  {
2142   6                    CheckMemoryMgr.PasscodeMasterNum-=1;
2143   6                  }
2144   5                }
2145   4              }
2146   3              else
2147   3              {
2148   4                DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2149   4                PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2150   4                PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2151   4                //GUI_Flag_RefreshLCD = bTRUE;
2152   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2153   4                if ( CheckMemoryMgr.PasscodeUserNum > 0 )
2154   4                {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 36  

2155   5                  CheckMemoryMgr.PasscodeUserNum-=1;
2156   5                }
2157   4              }
2158   3                
2159   3            }
2160   2          else
2161   2            {
2162   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2163   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2164   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2165   3              //GUI_Flag_RefreshLCD = bTRUE;
2166   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
2167   3            }
2168   2        }
2169   1        else if  ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2170   1          {
2171   2            
2172   2            if (--PasscodeUserDeleteMgr.TimeCnt < 1 )
2173   2              {
2174   3                //CurrentScreen = SCREEN_PasscodeUserMenu;
2175   3                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2176   3                //GUI_Flag_RefreshLCD = bTRUE;
2177   3                UnlockModeJudgment();
2178   3                #ifdef Function_EventLog
                        GUI_CreatAndSaveLog(DeletePasscodeUser);
                        #endif
2181   3              }
2182   2          }
2183   1        else if ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2184   1          {
2185   2            if ( PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2186   2            {
2187   3      
2188   3            }
2189   2            else if ( PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
2190   2            {
2191   3      
2192   3            }
2193   2            else
2194   2            {
2195   3        
2196   3            }
2197   2            
2198   2            if (PasscodeUserDeleteMgr.TimeCnt-- < 1 )
2199   2            {
2200   3              if ( PasscodeUserDeleteMgr.ErrorType == QUIT )
2201   3              {
2202   4                if (PasscodeUserDeleteMgr.UserPriority == Master)
2203   4                {
2204   5                  CurrentScreen = SCREEN_PasscodeMasterMenu;
2205   5                }
2206   4                else{
2207   5                  CurrentScreen = SCREEN_PasscodeUserMenu;
2208   5                }
2209   4              }
2210   3              else
2211   3              {
2212   4                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2213   4                //GUI_Flag_RefreshLCD = bTRUE;
2214   4              }
2215   3            }
2216   2          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 37  

2217   1        
2218   1      }
2219          
2220          /*******************************************************/
2221          /*******************************************************/
2222          /*******************************************************/
2223          void ShowDeleteAllPasscodeUser(void)//界面-删除全部密码用户
2224          {
2225   1        //uint8_t i;
2226   1        
2227   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2228   1        {
2229   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2230   2          AllPasscodeUserDeleteMgr.Selection = NO;
2231   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2232   2        }
2233   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2234   1        {
2235   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
2239   2        }
2240   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2241   1        {
2242   2          DeleteAllPasscodeUserfromMemory();
2243   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2244   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2245   2          GUI_Flag_RefreshLCD = bTRUE;
2246   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2247   2          CheckMemoryMgr.PasscodeUserNum = 0;
2248   2      //    #ifdef Function_TuyaWifi
2249   2      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
2250   2      //    #endif
2251   2        }
2252   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2253   1          {
2254   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
2257   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2258   2            {
2259   3              GoToPasswordMenu();
2260   3              UnlockModeJudgment();
2261   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
                      #endif
2264   3            }
2265   2          }
2266   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2267   1          {
2268   2            GoToPasswordMenu();
2269   2          }
2270   1      }
2271          
2272          /*******************************************************/
2273          /*******************************************************/
2274          /*******************************************************/
2275          void ShowTimeSetting(void)//界面-时间设定
2276          {
2277   1        #ifdef Function_ScreenDisplay
                code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 38  

              
                code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
                
                code uint8_t TimeStrEn[]={"23:01:01"};
              
                DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
              
                DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
                DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
                DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
                DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
                
                DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
                DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
                DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
                DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
              
                if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
                }
                else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
                }
                else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
                }
                else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
                }
                else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
                }
                
                else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
                }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 39  

                else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
                }
                #endif
2346   1      }
2347          
2348          
2349          /*******************************************************/
2350          /*******************************************************/
2351          /*******************************************************/
2352          #ifdef Function_ScreenDisplay
              //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
              //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
              #endif
2356          void ShowLowBattery(void)//低电压界面
2357          {
2358   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
                DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
                #endif  
2362   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2363   1        {
2364   2          if (--BatteryMgr.TimeCnt < 1 )
2365   2          {
2366   3            CurrentScreen = SCREEN_Main;
2367   3            FpIdentifyMgr.Status = FPMcmdStart;
2368   3            CardIdentifyMgr.Status = ReadingCardID;
2369   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2370   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2371   3            {
2372   4              RefreshSystemSleepTime();
2373   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2374   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                      #endif
2378   4            }
2379   3            else
2380   3            {
2381   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2382   4            }
2383   3          }
2384   2        }
2385   1      }
2386          
2387          
2388          /*******************************************************/
2389          /*******************************************************/
2390          /*******************************************************/
2391          void ShowLanguageSetting(void)//语言设定
2392          {
2393   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2394   1        {
2395   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2396   2          {
2397   3            if ( VoiceMenuMgr.MenuPoint < 2 )
2398   3            {
2399   4              PLAY_VOICE_MULTISEGMENTS_FIXED(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2400   4            }
2401   3            else
2402   3            {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 40  

2403   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2404   4            }
2405   3            VoiceMenuMgr.MenuPoint++;
2406   3          }
2407   2        }
2408   1      }
2409          
2410          /*******************************************************/
2411          /*******************************************************/
2412          //uint8_t VoiceWait=0;
2413          /*******************************************************/
2414          void ShowVolumeSetting(void)//声音设定
2415          { 
2416   1        #ifdef Function_ScreenDisplay
                code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
              //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
                code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
              //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
                
                DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
                DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
                #endif
2425   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2426   1        {
2427   2          {
2428   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2429   3            {
2430   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2431   4              VoiceMenuMgr.MenuPoint++;
2432   4            }
2433   3          }
2434   2        } 
2435   1      }
2436          
2437          /*******************************************************/
2438          /*******************************************************/
2439          /*******************************************************/
2440          void ShowMemoryUsage(void)//内存使用情况
2441          {
2442   1        
2443   1      }
2444          
2445          /*******************************************************/
2446          /*******************************************************/
2447          /*******************************************************/
2448          void ShowManagerIdentify(void)//管理员认证
2449          {
2450   1        uint8_t i;
2451   1        #ifdef Function_ScreenDisplay
                code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
                code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
              //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
                //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
                #endif
2458   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
2459   1        {
2460   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2461   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2462   2            )
2463   2          {
2464   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 41  

                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2467   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2468   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2469   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2470   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2471   3            DataInputMgr.Status = InputIdle;
2472   3            PasscodeUserRegisterMgr.UserID = 0x01;
2473   3            PasscodeUserRegisterMgr.UserPriority = Master;
2474   3            
2475   3            PasscodeInputMgr.Point = 0x00;
2476   3            PasscodeInputMgr.PasscodeLen = 12;
2477   3            PasscodeInputMgr.Status = PasscodeInputStart;
2478   3            for (i=0;i<12;i++)
2479   3            {
2480   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2481   4            }
2482   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2483   3            //GUI_Flag_RefreshLCD = bTRUE;
2484   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2485   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                      #endif
2489   3            #endif
2490   3            
2491   3          }
2492   2          else
2493   2          {
2494   3            PasscodeInputMgr.Point = 0x00;
2495   3            PasscodeInputMgr.PasscodeLen = 12;
2496   3            PasscodeInputMgr.Status = PasscodeInputStart;
2497   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2498   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2499   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2500   3            {
2501   4              PasscodeInputMgr.InputBuff[i]=0xff;
2502   4            }
2503   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2504   3            FpIdentifyMgr.Status = FPMcmdStart;
2505   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2506   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
                    #endif
2510   3          }
2511   2        }
2512   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
2513   1        {
2514   2      
2515   2          GUI_PasscodeInputCreat(6,16);
2516   2          
2517   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2518   2          { 
2519   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2520   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
2521   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2522   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2523   3               )
2524   3            {
2525   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2526   4            }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 42  

2527   3            //GUI_Flag_RefreshLCD = bTRUE;
2528   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2529   3      
2530   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2531   3            {
2532   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2533   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                      #endif
2537   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2538   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2539   4              {
2540   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2541   5              } 
2542   4            }
2543   3            else
2544   3            {
2545   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2546   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                      #endif
2550   4            }
2551   3            
2552   3          }
2553   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2554   2          {
2555   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2556   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2557   3          }
2558   2      
2559   2          FpUserIdentify();
2560   2          if ( (FpIdentifyMgr.Status == success)
2561   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2562   2            )
2563   2          {
2564   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2565   3            FpIdentifyMgr.Status = FPMcmdStart;
2566   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2567   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                    #endif
2571   3            #ifdef Function_FPMbreathingLed
2572   3            FpIdentifyMgr.BreathingLED = 1;
2573   3            SetFPMbreathingLed(FPMbreathingLed_Green);
2574   3            #endif  
2575   3          }
2576   2          else if (( FpIdentifyMgr.Status == fail)
2577   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
2578   2            )
2579   2          {
2580   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2581   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
2582   4            }
2583   3            else{
2584   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2585   4            }
2586   3            FpIdentifyMgr.Status = FPMcmdStart;
2587   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 43  

2588   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2589   3            //GUI_Flag_RefreshLCD = bTRUE;
2590   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2591   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                    #endif
2595   3            #ifdef Function_FPMbreathingLed
2596   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2597   3            #endif
2598   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2599   3            {
2600   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2601   4            } 
2602   3          }
2603   2        }
2604   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2605   1        {
2606   2          GoToMainMenu();
2607   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
2608   2        }
2609   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2610   1        {
2611   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2612   2          {
2613   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2614   3            {
2615   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2616   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2617   4            }
2618   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2619   3            CardIdentifyMgr.Status = ReadingCardID;
2620   3            FpIdentifyMgr.Status = FPMcmdStart;
2621   3            CurrentScreen = SCREEN_Main;
2622   3            #ifdef Function_FPMbreathingLed
2623   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2624   3            #endif
2625   3          }
2626   2        }
2627   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2628   1        {
2629   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2630   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2631   2          CardIdentifyMgr.Status = ReadingCardID;
2632   2          FpIdentifyMgr.Status = FPMcmdStart;
2633   2          CurrentScreen = SCREEN_Main;
2634   2          #ifdef Function_FPMbreathingLed
2635   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2636   2          #endif
2637   2        }
2638   1      
2639   1      }
2640          /*******************************************************/
2641          /*******************************************************/
2642          /*******************************************************/
2643          void ShowUnlockingModeSetting(void)//界面-解锁模式设置
2644          {
2645   1        #ifdef Function_ScreenDisplay
                code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 44  

                code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
                code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
                #endif
2653   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2654   1        {
2655   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2656   2        }
2657   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2658   1        { 
2659   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
                    DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
                    #endif
2663   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2664   2            {
2665   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2666   3              {
2667   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2668   4                VoiceMenuMgr.MenuPoint++;
2669   4              }
2670   3            }
2671   2        }
2672   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2673   1        {
2674   2          UnlockingModeMgr.TimeCnt = 0;
2675   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2676   2          { 
2677   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2678   3            {
2679   4              #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
                      #endif
2683   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2684   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2685   4            }
2686   3          }
2687   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2688   2        }
2689   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2690   1        {
2691   2          if (UnlockingModeMgr.TimeCnt > 0)
2692   2          {
2693   3            UnlockingModeMgr.TimeCnt--;
2694   3          }
2695   2          else
2696   2          {
2697   3            SystemConfigSave();
2698   3            GoToSystemConfigMenu();
2699   3          }
2700   2        }
2701   1      }
2702          
2703          /*******************************************************/
2704          /*******************************************************/
2705          /*******************************************************/
2706          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2707          {
2708   1        #ifdef Function_ScreenDisplay
                //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 45  

              //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
                code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
              //  code uint8_t EnabledStrEn[]={"1. ON"};
                code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
              //  code uint8_t DisabledStrEn[]={"2. OFF"};
              
                DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
                DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
                #endif
2719   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2720   1        {
2721   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2722   2          {
2723   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2724   3            VoiceMenuMgr.MenuPoint++;
2725   3          }
2726   2        }
2727   1      }
2728          
2729          /*******************************************************/
2730          /*******************************************************/
2731          /*******************************************************/
2732          void ShowPickAlarmEnableSetting(void)//界面-防撬告警使能设置
2733          {
2734   1        #ifdef Function_ScreenDisplay
                code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
              //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
                code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
              //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
              
                DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
                DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
                #endif
2743   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2744   1        {
2745   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2746   2          {
2747   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2748   3            VoiceMenuMgr.MenuPoint++;
2749   3          }
2750   2          /*
2751   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2752   2          
2753   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2754   2          {
2755   2            VoiceMenuMgr.MenuPoint = 0;
2756   2          }
2757   2          */
2758   2        }
2759   1      
2760   1        
2761   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2762   1          {
2763   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2764   2          }
2765   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2766   1          {
2767   2            
2768   2          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 46  

2769   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2770   1          {     
2771   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2772   2            SystemConfigSave();
2773   2            Config_AntiPrying_Interrupt();
2774   2            GoToSystemConfigMenu(); 
2775   2          }
2776   1      }
2777          
2778          /*******************************************************/
2779          /*******************************************************/
2780          extern uint16_t KeyHoldTimeCnt;
2781          /*******************************************************/
2782          void ShowRestoreFactoryDefault(void)//界面-恢复出厂
2783          {
2784   1        uint8_t i;
2785   1        #ifdef Function_ScreenDisplay
                code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
              //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
                #endif
2789   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2790   1      
2791   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2792   1        {
2793   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2794   2          //GUI_Flag_RefreshLCD = bTRUE;
2795   2          RestoreFactoryDefaultMgr.Selection = NO;
2796   2          //SET_LRandConfirmLED_ON();
2797   2          //SET_AP_LED_ON();
2798   2        }
2799   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2800   1        {
2801   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
                  DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
                  #endif
2806   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2807   2          {
2808   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2809   3            {
2810   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2811   4              VoiceMenuMgr.MenuPoint++;
2812   4            }
2813   3          }
2814   2        }
2815   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
2816   1        { 
2817   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
                  #endif
2821   2          //SET_ALLKEYLED_OFF();
2822   2          
2823   2          RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
2824   2      
2825   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2826   2      
2827   2        }
2828   1        else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2829   1        {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 47  

2830   2          if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2831   2            {
2832   3              RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2833   3              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2834   3              RestoreFactoryDefaultMgr.FailTimes = 0x00;
2835   3            }
2836   2          else{ 
2837   3            RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2838   3            PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2839   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
2843   3          }
2844   2        } 
2845   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2846   1          {
2847   2        
2848   2            DeleteAllFpFromFPM();
2849   2            if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2850   2            {
2851   3              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2852   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2853   3              CheckMemoryMgr.FpUserNum = 0x00;
2854   3              CheckMemoryMgr.FpMasterNum = 0x00;  
2855   3              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2856   3              {
2857   4                FpUserMemoryMgr[i].UserID = 0xFFFF;
2858   4                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2859   4                FpUserMemoryMgr[i].UserPriority = Undefined;
2860   4              }
2861   3            }
2862   2            else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2863   2            {
2864   3              if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2865   3              {
2866   4                RestoreFactoryDefaultMgr.FailTimes++;
2867   4                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2868   4                RefreshSystemSleepTime();
2869   4              }
2870   3              else
2871   3              {
2872   4                RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2873   4                PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2874   4                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                        #endif
2878   4              }
2879   3            } 
2880   2          }
2881   1        
2882   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2883   1          {     
2884   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2885   2            {
2886   3              DeleteAllCardUserfromMemory();
2887   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2888   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2889   3              CheckMemoryMgr.CardUserNum = 0x00;
2890   3            } 
2891   2          }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 48  

2892   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2893   1          { 
2894   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2895   2            {
2896   3              RestoreFactory_Managerdata();
2897   3              DeleteAllPasscodeMasterfromMemory();
2898   3              DeleteAllPasscodeUserfromMemory();
2899   3              SystemConfigReset();
2900   3              #ifdef Function_EventLog
                      DeleteAllLog();
                      #endif
2903   3              
2904   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2905   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2906   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2907   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2908   3              //GUI_Flag_RefreshLCD = bTRUE;
2909   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2910   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
2914   3            }
2915   2          }
2916   1        
2917   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2918   1          {
2919   2      
2920   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2921   2            {
2922   3              CurrentScreen = SCREEN_Main;
2923   3              RefreshSystemSleepTime();
2924   3              KeyHoldTimeCnt=0;
2925   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2926   3              FpIdentifyMgr.Status = FPMcmdStart;
2927   3              CardIdentifyMgr.Status = ReadingCardID;
2928   3      
2929   3            }
2930   2          }
2931   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2932   1          {
2933   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2934   2            {
2935   3              CurrentScreen = SCREEN_Main;
2936   3              KeyHoldTimeCnt=0;
2937   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2938   3              FpIdentifyMgr.Status = FPMcmdStart;
2939   3              CardIdentifyMgr.Status = ReadingCardID;
2940   3            }
2941   2          }
2942   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2943   1          {
2944   2            GoToSystemConfigMenu();
2945   2          }
2946   1      
2947   1      }
2948          
2949          /*******************************************************/
2950          /*******************************************************/
2951          /*******************************************************/
2952          void ShowInitialization(void)//界面-初始化
2953          {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 49  

2954   1        
2955   1        uint8_t i;
2956   1        #ifdef Function_ScreenDisplay
                code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
              //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
                code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
                code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
              //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
                code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
              //  code uint8_t EepromStr_En[]={"Memory"}; 
                code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
              //  code uint8_t TouchStr_En[]={"Touch"}; 
                code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
                code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
                #endif  
2972   1        
2973   1        if ( InitializationMgr.Status == StartInitialization )
2974   1        {
2975   2          //SET_ALLKEYLED_OFF();
2976   2          #ifdef Function_ScreenDisplay
                  DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
                  DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
                  DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
                  #endif
2981   2          CheckMemoryMgr.Status = StartCheckMemory;
2982   2          InitializationMgr.Status = MemoryCheck;
2983   2        }
2984   1        else if ( InitializationMgr.Status == MemoryCheck )
2985   1        {
2986   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
                  #endif
2989   2          SystemConfigLoad();
2990   2          ReadLockBrand();
2991   2          InitializationMgr.MemoryCheckPass = bTRUE;
2992   2          InitializationMgr.Status = MemoryCheckWait;
2993   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2994   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2995   2        }
2996   1        else if ( InitializationMgr.Status == MemoryCheckWait )
2997   1        {
2998   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.MemoryCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3008   2          if (--InitializationMgr.TimeCnt < 1 )
3009   2          {
3010   3            InitializationMgr.Status = FingerPrintCheck;
3011   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5);
                    DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
                    #endif
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 50  

3016   3          }
3017   2        }
3018   1        else if ( InitializationMgr.Status == FingerPrintCheck )
3019   1        {
3020   2      
3021   2          GUI_GetUserNumList();   //read user number
3022   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
3023   2          {
3024   3            //SET_KEYLED_ON(KEY_TWO);
3025   3            #ifdef Function_FPMbreathingLed
3026   3            FpmAckMgr.Status = WaitACK;
3027   3            FPM_SetSecurityLevel(1);  //
3028   3            for (i=0;i<25;i++)
3029   3            {
3030   4              Hardware_DelayMs(10);
3031   4              FPM_Mgr_Task();
3032   4              if ( FpmAckMgr.Status == GotACK )
3033   4              {
3034   5                break;
3035   5              }
3036   4            }
3037   3            #endif
3038   3      
3039   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
3040   3            InitializationMgr.Status = FingerPrintCheckWait;
3041   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3042   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3043   3            
3044   3          }
3045   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
3046   2          { 
3047   3            //CheckMemoryMgr.Status = StartCheckMemory;
3048   3            //InitializationMgr.Status = StartInitialization;//redo
3049   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
3050   3            InitializationMgr.Status = FingerPrintCheckWait;
3051   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3052   3            DEF_Fail_Beep;
3053   3          }
3054   2        }
3055   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
3056   1        {
3057   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.FingerPrintCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3067   2          if (--InitializationMgr.TimeCnt < 1 )
3068   2          {
3069   3            InitializationMgr.Status = CardReaderCheck;
3070   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
                    #endif
3075   3          }
3076   2        }
3077   1        else if ( InitializationMgr.Status == CardReaderCheck )
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 51  

3078   1        {
3079   2          //SET_KEYLED_ON(KEY_THREE);
3080   2          InitializationMgr.CardReaderCheckPass = bTRUE;
3081   2          InitializationMgr.Status = CardReaderCheckWait;
3082   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3083   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3084   2        }
3085   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
3086   1        {
3087   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.CardReaderCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3097   2          if (--InitializationMgr.TimeCnt < 1 )
3098   2          {
3099   3            InitializationMgr.Status = TouchCheck;
3100   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
                    #endif
3105   3          }
3106   2        }
3107   1        else if ( InitializationMgr.Status == TouchCheck )
3108   1          {
3109   2            //SET_KEYLED_ON(KEY_FOUR);
3110   2            InitializationMgr.TouchCheckPass = bTRUE;
3111   2            InitializationMgr.Status = TouchCheckWait;
3112   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3113   2       
3114   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3115   2          }
3116   1        else if ( InitializationMgr.Status == TouchCheckWait )
3117   1          {
3118   2            #ifdef Function_ScreenDisplay
                    if (InitializationMgr.TouchCheckPass == bTRUE)
                    { 
                      DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                    }
                    else
                    {
                      DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                    }
                    #endif
3128   2            if (--InitializationMgr.TimeCnt < 1 )
3129   2            {
3130   3              InitializationMgr.Status = CheckFinished;
3131   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3132   3              #ifdef Function_ScreenDisplay
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
                        &&(InitializationMgr.MemoryCheckPass == bTRUE )
                        &&(InitializationMgr.CardReaderCheckPass == bTRUE )
                        &&(InitializationMgr.TouchCheckPass == bTRUE ) )
                      {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 52  

                        DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
                      }
                      else
                      {
                        DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
                      }
                      #endif
3147   3            }
3148   2          }
3149   1      
3150   1        else if ( InitializationMgr.Status == CheckFinished )
3151   1        {
3152   2          if (--InitializationMgr.TimeCnt < 1 )
3153   2          {
3154   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3155   3            {
3156   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3157   4              BatteryMgr.PostLowBattery = bFALSE;
3158   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3159   4              CurrentScreen = SCREEN_LowBattery;  
3160   4            }
3161   3            else
3162   3            {
3163   4              CurrentScreen = SCREEN_Main;
3164   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3165   4              FpIdentifyMgr.Status = FPMcmdStart;
3166   4              CardIdentifyMgr.Status = ReadingCardID;
3167   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3168   4            }
3169   3          }
3170   2        }
3171   1      }
3172          
3173          /*******************************************************/
3174          /*******************************************************/
3175          /*******************************************************/
3176          void ShowSystemLocked(void)//界面-系统锁定
3177          {
3178   1        #ifdef Function_ScreenDisplay
                uint16_t Temp;
                code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
              //  code uint8_t SystemLockedStrEn[]={"System Lock"};
                #endif
3183   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3184   1        {
3185   2          #ifdef Function_TuyaWifi
3186   2          if( SafetyMonitorMgr.SystemLockedTimeDelay == DEF_SystemLockedTime )
3187   2          {
3188   3            WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
3189   3            WifiMgr.PostMgr.AlarmType = ErrorAlarm;
3190   3          }
3191   2          #endif
3192   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3193   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-625))
3194   2          {
3195   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3196   3            {
3197   4              if(VoiceMgr.Enable == bFALSE)
3198   4              {
3199   5                VoiceMgr.Enable = bTRUE;
3200   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3201   5                VoiceMgr.Enable = bFALSE;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 53  

3202   5              }
3203   4              else
3204   4              {
3205   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3206   5              }
3207   4            }
3208   3          }
3209   2        }
3210   1        else
3211   1        {
3212   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3213   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3214   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3215   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
3216   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3217   2          CurrentScreen = SCREEN_Main;
3218   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3219   2          FpIdentifyMgr.Status = FPMcmdStart;
3220   2          CardIdentifyMgr.Status = ReadingCardID;
3221   2          STOP_VOICEPLAY();
3222   2        }
3223   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
                DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
                Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
                DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
                DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
                DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
                #endif
3231   1      }
3232          
3233          /*******************************************************/
3234          /*******************************************************/
3235          /*******************************************************/
3236          #ifdef Function_ScreenDisplay
               code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
              // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
               //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
               //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
               code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
              // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
              #endif
3244          void ShowPickLockAlarm(void)//界面-防撬告警
3245          {
3246   1        bool_t Flag_ExitPickLockAlarm;
3247   1      
3248   1        RefreshSystemSleepTime();   //reset system sleep time
3249   1      
3250   1        #ifdef Function_ScreenDisplay
                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
                {
                  DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
                  Clear_Screen_Page(5);
                  DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
                }
                #endif  
3258   1        
3259   1        Flag_ExitPickLockAlarm = bFALSE;
3260   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 54  

3261   1        {
3262   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3263   2          
3264   2          CardUserIdentify();
3265   2        }
3266   1      
3267   1          
3268   1        if ( CardIdentifyMgr.Status == Success)
3269   1        {
3270   2          Flag_ExitPickLockAlarm = bTRUE;
3271   2        }
3272   1        else if ( CardIdentifyMgr.Status == Fail)
3273   1        {
3274   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3275   2          {
3276   3            Flag_ExitPickLockAlarm = bTRUE;
3277   3          }
3278   2          else
3279   2          {
3280   3            CardIdentifyMgr.Status = ReadingCardID;
3281   3          }
3282   2        }
3283   1      
3284   1        FpUserIdentify();
3285   1        if ( FpIdentifyMgr.Status == success)
3286   1        {
3287   2          Flag_ExitPickLockAlarm = bTRUE; 
3288   2        }
3289   1        else if ( FpIdentifyMgr.Status == fail)
3290   1        {
3291   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3292   2          {
3293   3            Flag_ExitPickLockAlarm = bTRUE;   
3294   3          }
3295   2          else
3296   2          {
3297   3            FpIdentifyMgr.Status = FPMcmdStart;
3298   3          }
3299   2        }
3300   1      
3301   1        PasscodeUserIdentify();
3302   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3303   1        {
3304   2          Flag_ExitPickLockAlarm = bTRUE;
3305   2        }
3306   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3307   1        {
3308   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3309   2          {
3310   3            Flag_ExitPickLockAlarm = bTRUE;
3311   3          }
3312   2          else
3313   2          {
3314   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3315   3          }
3316   2        }
3317   1      
3318   1        if ( AntiPryingMgr.TimeCnt > 0 )
3319   1        {
3320   2          #ifdef Function_TuyaWifi
3321   2          if( AntiPryingMgr.TimeCnt == DEF_AntiPryingTime )
3322   2          {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 55  

3323   3            WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
3324   3            WifiMgr.PostMgr.AlarmType = PryAlarm;
3325   3          }
3326   2          #endif
3327   2          AntiPryingMgr.TimeCnt--;
3328   2        }
3329   1        else{
3330   2          Flag_ExitPickLockAlarm = bTRUE;
3331   2        }
3332   1        
3333   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3334   1        {
3335   2          STOP_VOICEPLAY();
3336   2          #ifdef Function_FPMbreathingLed
3337   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3338   2          #endif
3339   2          INT1_RST();
3340   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3341   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3342   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3343   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3344   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3345   2          CurrentScreen = SCREEN_Main;
3346   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3347   2          FpIdentifyMgr.Status = FPMcmdStart;
3348   2          CardIdentifyMgr.Status = ReadingCardID;
3349   2          RefreshSystemSleepTime();   //reset system sleep time
3350   2        }
3351   1        else
3352   1        {
3353   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3354   2          {
3355   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3356   3          }
3357   2        }
3358   1      }
3359          
3360          /*******************************************************/
3361          /*******************************************************/
3362          void ShowAgingTest(void)//界面-老化测试
3363          {
3364   1        #ifdef Function_ScreenDisplay
                uint8_t Str1[]={"AGING TEST"}; 
                uint8_t Str2[]={"MOTOR:"}; 
                uint8_t Str3[]={"INPUT:  . V"};
                uint8_t Str4[]={"SLIDE:"};
              
                DisEN16x8Str(0,16,Str1,NormalDisplay);
                #endif
3372   1        GUI_MotorAgingTest();
3373   1        #ifdef Function_ScreenDisplay
                DisEN16x8Str(4,0,Str2,NormalDisplay);
                DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
                DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
                DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
                DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
              
                DisEN16x8Str(6,0,Str3,NormalDisplay); 
                DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
                DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
                #endif
3384   1      }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 56  

3385          /*******************************************************/
3386          /*******************************************************/
3387          /*******************************************************/
3388          
3389          void ShowEventLogBySequence(void)//界面-按顺序界面-事件日志
3390          {
3391   1        #ifdef Function_EventLog
                code uint8_t VoiceReportLogBuff[][5]=
                { 
                  {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
                  {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
                  {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
                  {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
                };
                  
                uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
                uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
              
                if (CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
                {
                  SearchEventLogBySequence();
                  CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
                  {
                    LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
                    LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
                    CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
                    VoiceMenuMgr.MenuPoint = 0;
                    VoiceMenuMgr.TotalMenuNum = 3;    
                  }
                  else
                  {
                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
                  }
                }
                else if (CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                {
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
                  {
                      DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
                  }
                  else
                  {
                    if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
                    {
                      LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
                      LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
                      VoiceReportLogMgr.Status = ReportLogInit;
                      Clear_Screen();
                    }
                    
                    DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    
                    if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
                    {
                      if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
                      {
                        PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
                        VoiceMenuMgr.MenuPoint++;
                      }
                      SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
                    }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 57  

                    else
                    {
                     // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    }
                  }
                }
                #endif
3454   1      }
3455          
3456          /*******************************************************/
3457          /*******************************************************/
3458          /*******************************************************/
3459          void ShowClearEventLog(void)//界面-清除事件日志
3460          {
3461   1        #ifdef Function_EventLog
                uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
                if (LogDeleteMgr.Status == StartLogDelete)
                {
                  LogDeleteMgr.DeleteSectorNum = 0;
                  LogDeleteMgr.Percentage = 0;
                  LogDeleteMgr.Status = WaitforLogDeleteCofirm;
                  PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
                }
                else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
                {
                  #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
                }
                else if (LogDeleteMgr.Status == LogDeleting)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    if ( LogDeleteMgr.Percentage == 0 )
                    {
                      #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,DELing,NormalDisplay);
                      #endif
                      if ( DeleteAllLog() != S_SUCCESS )
                      {
                        if ( DeleteAllLog() != S_SUCCESS )
                        {
                          DeleteAllLog();
                        }
                      }
                    }
                    LogDeleteMgr.Percentage++;
                  }
                  else
                  {
                    LogDeleteMgr.Status = LogDeleteSuccess;
                    LogDeleteMgr.Percentage = 0;
                    RefreshSystemSleepTime();
                    PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
                    #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
                  }
                }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 58  

                else if (LogDeleteMgr.Status == LogDeleteSuccess)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    LogDeleteMgr.Percentage++;
                  }
                  else 
                  {
                    LogDeleteMgr.Status = QuitLogDelete;
                  }
                }
                else
                {
                  GotoLogMenu();
                }
                #endif
3525   1      }
3526          
3527          /*******************************************************/
3528          /*******************************************************/
3529          
3530          
3531          /*******************************************************/
3532          /*******************************************************/
3533          void GUI_Button_Monitor(void)//GUI按钮监视器
3534          {
3535   1        //DEBUG_MARK;
3536   1        uint8_t i;
3537   1        uint8_t Offset;
3538   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3539   1        {
3540   2          //return;
3541   2        }
3542   1        
3543   1        if ( MotorMgr.MotorStatus != IDLE )
3544   1        {
3545   2          return;
3546   2        }
3547   1      
3548   1        gui_keycode = Key_Scan();
3549   1      
3550   1        DEBUG_MARK;
3551   1      
3552   1        if ( gui_keycode != KEY_NONE )
3553   1        {
3554   2          RefreshSystemSleepTime();
3555   2        }
3556   1        switch ( CurrentScreen)
3557   1        {
3558   2          case SCREEN_Main:
3559   2      
3560   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3561   2            {
3562   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3567   3            }
3568   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
3569   2            {
3570   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 59  

3571   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3572   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
3573   3            }
3574   2            #ifdef Function_DoorBellTouchIndependented
                    else if ( gui_keycode == KEY_DOORBELL )
                    { 
                      PLAY_VOICE_DOORBELL();
                      DoorBellMgr.TimeCnt = 150;
                      CurrentScreen = SCREEN_DoorBell;
                    }
                    #endif
3582   2      
3583   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3584   2            {
3585   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3586   3              {
3587   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3588   4                {
3589   5                  
3590   5                  PasscodeInputMgr.Point = 0x01;
3591   5                  PasscodeInputMgr.PasscodeLen = 16;
3592   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3593   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3594   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3595   5                  {
3596   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3597   6                  }
3598   5                  
3599   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3600   5                  DEF_ButtonPress_Voice;
3601   5                }
3602   4               }
3603   3              else if ( gui_keycode == KEY_ASTERISK )
3604   3              {
3605   4                DEF_ButtonPress_Voice;
3606   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3607   4                {
3608   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3609   5                }
3610   4                else 
3611   4                {
3612   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3613   5                  SystemPowerMgr.SleepSource = UserForced;
3614   5                }
3615   4              }
3616   3              else if ( gui_keycode == KEY_POUNDSIGN )
3617   3              {
3618   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3619   4                { 
3620   5                   DEF_ButtonPress_Voice;
3621   5                   CurrentScreen = SCREEN_ManagerIdentify;
3622   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3623   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3624   5                }
3625   4                else
3626   4                {
3627   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
3628   5                  PLAY_VOICE_DOORBELL();  //DOORBELL
3629   5                  DoorBellMgr.TimeCnt = 150;
3630   5                  CurrentScreen = SCREEN_DoorBell;
3631   5                  #else
                          DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 60  

                          #endif
3634   5                } 
3635   4              }
3636   3            }
3637   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3638   2                      &&( gui_keycode != KEY_DOORBELL )
3639   2                    )
3640   2            {
3641   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3642   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3643   3              {
3644   4                DEF_ButtonPress_Voice;
3645   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3646   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
3647   4              }
3648   3            }
3649   2            
3650   2            break;
3651   2            
3652   2          case SCREEN_MainMenu:
3653   2      
3654   2              if ( gui_keycode == KEY_ONE )
3655   2              {
3656   3                DEF_ButtonPress_Voice;
3657   3                Hardware_DelayMs(100);
3658   3                GoToFpMenu();
3659   3              }
3660   2              else if ( gui_keycode == KEY_TWO )
3661   2              {
3662   3                DEF_ButtonPress_Voice;
3663   3                Hardware_DelayMs(100);
3664   3                GoToPasswordMenu();
3665   3              }
3666   2              else if ( gui_keycode == KEY_THREE )
3667   2              {
3668   3                DEF_ButtonPress_Voice;
3669   3                Hardware_DelayMs(100);
3670   3                GoToCardMenu();
3671   3              }
3672   2              else if ( gui_keycode == KEY_FOUR )
3673   2              {
3674   3                DEF_ButtonPress_Voice;
3675   3                Hardware_DelayMs(100);
3676   3                GoToSystemConfigMenu();
3677   3              }
3678   2              #ifdef Function_TuyaWifi
3679   2              else if (gui_keycode == KEY_FIVE)
3680   2              {
3681   3                DEF_ButtonPress_Voice;
3682   3                Hardware_DelayMs(100);
3683   3                CurrentScreen = SCREEN_NetWorkLink;
3684   3                WifiMgr.Link.Status = LinkStart;
3685   3                Wifi_Rst();
3686   3              }
3687   2              #endif
3688   2      //        else if ( gui_keycode == KEY_FIVE )
3689   2      //        {
3690   2      //          DEF_ButtonPress_Voice;
3691   2      //          Hardware_DelayMs(100);
3692   2      //          GotoLogMenu();
3693   2      //        }
3694   2              else if ( gui_keycode == KEY_ASTERISK )
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 61  

3695   2              {
3696   3                #ifdef Function_FPMbreathingLed
3697   3                FpIdentifyMgr.BreathingLED = 0;
3698   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3699   3                #endif
3700   3                //DEF_ButtonPress_Voice;
3701   3                //FpmAckMgr.Status = WaitACK;
3702   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3703   3                CardIdentifyMgr.Status = ReadingCardID;
3704   3                FpIdentifyMgr.Status = FPMcmdStart;
3705   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3706   3                Hardware_DelayMs(100);
3707   3                CurrentScreen = SCREEN_Main;
3708   3                RefreshSystemSleepTime();
3709   3              }
3710   2      
3711   2              break;
3712   2              
3713   2          case SCREEN_EventLogMenu:
3714   2            
3715   2              #ifdef Function_EventLog
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_CheckEventLogBySequence;
                        CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_DeleteEventLog;
                        LogDeleteMgr.Status = StartLogDelete;
                      }
                      else if ( gui_keycode == KEY_ASTERISK )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToMainMenu();
                      }
                      #endif
3737   2              
3738   2              break;  
3739   2              
3740   2          case SCREEN_FpMenu:
3741   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3742   2              {
3743   3                #ifdef Function_FPMbreathingLed
3744   3                FpIdentifyMgr.BreathingLED = 0;
3745   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3746   3                #endif
3747   3              }
3748   2            
3749   2              if ( gui_keycode == KEY_ONE )
3750   2              {
3751   3                DEF_ButtonPress_Voice;
3752   3                Hardware_DelayMs(100);
3753   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3754   3                CurrentScreen = SCREEN_RegisterMasterFp;
3755   3                
3756   3              }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 62  

3757   2              else if ( gui_keycode == KEY_TWO )
3758   2              {
3759   3                DEF_ButtonPress_Voice;
3760   3                Hardware_DelayMs(100);
3761   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3762   3                CurrentScreen = SCREEN_RegisterUserFp;
3763   3              }
3764   2              else if ( gui_keycode == KEY_THREE )
3765   2              {
3766   3                DEF_ButtonPress_Voice;
3767   3                Hardware_DelayMs(100);
3768   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3769   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3770   3              }
3771   2              else if ( gui_keycode == KEY_ASTERISK )
3772   2              {
3773   3                DEF_ButtonPress_Voice;
3774   3                Hardware_DelayMs(100);
3775   3                GoToMainMenu();
3776   3              }
3777   2              break;
3778   2                
3779   2          case SCREEN_CardUserMenu:
3780   2      
3781   2              if ( gui_keycode == KEY_ONE )
3782   2              {
3783   3                DEF_ButtonPress_Voice;
3784   3                Hardware_DelayMs(100);
3785   3                CurrentScreen = SCREEN_RegisterCardUser;
3786   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3787   3              }
3788   2              else if ( gui_keycode == KEY_TWO )
3789   2              {
3790   3                DEF_ButtonPress_Voice;
3791   3                Hardware_DelayMs(100);
3792   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3793   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3794   3              }
3795   2              else if ( gui_keycode == KEY_ASTERISK )
3796   2              {
3797   3                DEF_ButtonPress_Voice;
3798   3                Hardware_DelayMs(100);
3799   3                GoToMainMenu(); 
3800   3              }
3801   2              break;
3802   2              
3803   2          case SCREEN_PasscodeMenu: 
3804   2      
3805   2              if ( gui_keycode == KEY_ONE )
3806   2              {
3807   3                DEF_ButtonPress_Voice;
3808   3                Hardware_DelayMs(100);
3809   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3810   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3811   3                PasscodeUserRegisterMgr.UserPriority = Master;
3812   3              }
3813   2              
3814   2              else if ( gui_keycode == KEY_TWO )
3815   2              {
3816   3                DEF_ButtonPress_Voice;
3817   3                Hardware_DelayMs(100);
3818   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 63  

3819   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3820   3                PasscodeUserRegisterMgr.UserPriority = User;
3821   3              }
3822   2              else if ( gui_keycode == KEY_THREE )
3823   2              {
3824   3                DEF_ButtonPress_Voice;
3825   3                Hardware_DelayMs(100);
3826   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3827   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3828   3              }
3829   2              else if ( gui_keycode == KEY_ASTERISK )
3830   2              {
3831   3                DEF_ButtonPress_Voice;
3832   3                Hardware_DelayMs(100);
3833   3                GoToMainMenu();
3834   3              }
3835   2            break;
3836   2                
3837   2          case SCREEN_SystemConfigMenu:
3838   2            
3839   2              Offset = 0;
3840   2                
3841   2      //          if ( gui_keycode == KEY_ONE  )
3842   2      //          {
3843   2      //            DEF_ButtonPress_Voice;
3844   2      //            Hardware_DelayMs(100);
3845   2      //            CurrentScreen = SCREEN_TimeSetting;
3846   2      //              #ifdef Function_USE_Internal_RTC
3847   2      //              SystemTime = UTCToSystemtime(G_SystemUTCTime);
3848   2      //              #elif defined Function_USE_External_RTC
3849   2      //              PCF8563_ReadTime();
3850   2      //              #endif
3851   2      //              GotSystemTime();  
3852   2      //          }
3853   2          #ifdef Function_VoiceEnabledEnglish
3854   2                Offset = 1;
3855   2                if ( gui_keycode == KEY_ONE )
3856   2                {
3857   3                  DEF_ButtonPress_Voice;
3858   3                  Hardware_DelayMs(100);
3859   3                  CurrentScreen = SCREEN_LanguageSetting;
3860   3                  VoiceMenuMgr.MenuPoint=0;
3861   3                  VoiceMenuMgr.TotalMenuNum = 3;
3862   3                } 
3863   2          #endif
3864   2                if ( gui_keycode == KEY_ONE+Offset )
3865   2                {
3866   3                  DEF_ButtonPress_Voice;
3867   3                  Hardware_DelayMs(100);
3868   3                  CurrentScreen = SCREEN_VolumeSetting;
3869   3                  VoiceMenuMgr.MenuPoint=0;
3870   3                  VoiceMenuMgr.TotalMenuNum = 3;
3871   3                }         
3872   2                else if ( gui_keycode == KEY_TWO+Offset )
3873   2                {
3874   3                  DEF_ButtonPress_Voice;
3875   3                  Hardware_DelayMs(100);
3876   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3877   3                  VoiceMenuMgr.MenuPoint=0;
3878   3                  VoiceMenuMgr.TotalMenuNum = 3;
3879   3                }
3880   2                else if ( gui_keycode == KEY_THREE+Offset )
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 64  

3881   2                {
3882   3                  DEF_ButtonPress_Voice;
3883   3                  Hardware_DelayMs(100);
3884   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3885   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3886   3                  VoiceMenuMgr.MenuPoint=0;
3887   3                  VoiceMenuMgr.TotalMenuNum = 3;
3888   3                }
3889   2                else if ( gui_keycode == KEY_FOUR+Offset )
3890   2                {
3891   3                  DEF_ButtonPress_Voice;
3892   3                  Hardware_DelayMs(100);
3893   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3894   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3895   3                  VoiceMenuMgr.MenuPoint=0;
3896   3                  VoiceMenuMgr.TotalMenuNum = 3;
3897   3                }
3898   2                else if ( gui_keycode == KEY_FIVE+Offset )
3899   2                {
3900   3                  DEF_ButtonPress_Voice;
3901   3                  Hardware_DelayMs(100);
3902   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3903   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3904   3                  VoiceMenuMgr.MenuPoint=0;
3905   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3906   3                }
3907   2                else if ( gui_keycode == KEY_ASTERISK )
3908   2                {
3909   3                  DEF_ButtonPress_Voice;
3910   3                  Hardware_DelayMs(100);
3911   3                  GoToMainMenu(); 
3912   3                }
3913   2      
3914   2              break;
3915   2              
3916   2          #ifdef Function_TuyaWifi          
3917   2          case SCREEN_NetWorkLink:
3918   2      
3919   2            if (gui_keycode == KEY_ASTERISK)
3920   2            {
3921   3              DEF_ButtonPress_Voice;
3922   3              Hardware_DelayMs(100);
3923   3              WifiMgr.Link.Status = LinkIdle;
3924   3              GoToMainMenu();
3925   3            }
3926   2      
3927   2            break;
3928   2          #endif
3929   2      
3930   2          case SCREEN_RegisterUserFp:
3931   2              
3932   2              if ( FpUserRegisterMgr.Status == InputUserID )
3933   2              {
3934   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3935   3              }
3936   2              if ( gui_keycode == KEY_ASTERISK )
3937   2              {
3938   3                DEF_ButtonPress_Voice;
3939   3                Hardware_DelayMs(100);
3940   3                GoToFpMenu(); 
3941   3              }
3942   2              
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 65  

3943   2            break;
3944   2            
3945   2          case SCREEN_DeleteUserFp:
3946   2              if ( FpUserDeleteMgr.Status == InputUserID )
3947   2              {
3948   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3949   3              }
3950   2      
3951   2            break;
3952   2      
3953   2          case SCREEN_DeleteAllUserFp:
3954   2            
3955   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3956   2              {
3957   3                 if ( gui_keycode == KEY_POUNDSIGN )
3958   3                {
3959   4                  AllUserFpDeleteMgr.Selection = YES;
3960   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3961   4                }
3962   3                else if ( gui_keycode == KEY_ASTERISK )
3963   3                {
3964   4                  DEF_ButtonPress_Voice;
3965   4                  Hardware_DelayMs(100);
3966   4                  GoToFpMenu(); 
3967   4                }
3968   3              }
3969   2      
3970   2            break;
3971   2      
3972   2          case SCREEN_RegisterMasterFp:
3973   2              
3974   2              if ( FpUserRegisterMgr.Status == InputUserID )
3975   2              {
3976   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3977   3              }
3978   2              if ( gui_keycode == KEY_ASTERISK )
3979   2              {
3980   3                DEF_ButtonPress_Voice;
3981   3                Hardware_DelayMs(100);
3982   3                GoToFpMenu(); 
3983   3              }
3984   2              
3985   2            break;
3986   2            
3987   2          case SCREEN_DeleteMasterFp:
3988   2              if ( FpUserDeleteMgr.Status == InputUserID )
3989   2              {
3990   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3991   3              }
3992   2      
3993   2            break;
3994   2      
3995   2          case SCREEN_DeleteAllMasterFp:
3996   2            
3997   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3998   2              {
3999   2                if ( gui_keycode == KEY_FOUR )
4000   2                {
4001   2                  DEF_ButtonPress_Voice;
4002   2                  AllUserFpDeleteMgr.Selection = YES;
4003   2                }
4004   2                else if ( gui_keycode == KEY_SIX )
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 66  

4005   2                {
4006   2                  DEF_ButtonPress_Voice;
4007   2                  AllUserFpDeleteMgr.Selection = NO;
4008   2                }
4009   2                else if ( gui_keycode == KEY_POUNDSIGN )
4010   2                {
4011   2                  DEF_ButtonPress_Voice;
4012   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
4013   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
4014   2                  }
4015   2                  else{
4016   2                    AllUserFpDeleteMgr.Status = EXIT;
4017   2                  }
4018   2                }
4019   2              }*/
4020   2      
4021   2            break;
4022   2      
4023   2          case SCREEN_RegisterCardUser:
4024   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
4025   2              {
4026   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4027   3              }
4028   2              if ( gui_keycode == KEY_ASTERISK )
4029   2              {
4030   3                DEF_ButtonPress_Voice;
4031   3                Hardware_DelayMs(100);
4032   3                GoToCardMenu(); 
4033   3              }
4034   2      
4035   2            break;
4036   2            
4037   2          case SCREEN_DeleteCardUser:
4038   2      
4039   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
4040   2              {
4041   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4042   3              }
4043   2            break;
4044   2      
4045   2          case SCREEN_DeleteAllCardUser:
4046   2              
4047   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
4048   2              {
4049   3                if ( gui_keycode == KEY_POUNDSIGN )
4050   3                {
4051   4                  AllCardUserDeleteMgr.Selection = YES;
4052   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
4053   4                }
4054   3                else if ( gui_keycode == KEY_ASTERISK )
4055   3                {
4056   4                  DEF_ButtonPress_Voice;
4057   4                  Hardware_DelayMs(100);
4058   4                  GoToCardMenu(); 
4059   4                }
4060   3              }
4061   2      
4062   2            break;  
4063   2      
4064   2      
4065   2          case SCREEN_RegisterPasscodeUser:
4066   2      
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 67  

4067   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
4068   2              {
4069   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4070   3              }
4071   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
4072   2              {
4073   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4074   3              }
4075   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
4076   2              {
4077   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4078   3              }
4079   2              
4080   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
4081   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
4082   2              {
4083   3                if ( gui_keycode == KEY_ASTERISK )
4084   3                {
4085   4                  DEF_ButtonPress_Voice;
4086   4                  Hardware_DelayMs(100);
4087   4                  GoToPasswordMenu(); 
4088   4                }
4089   3              }
4090   2          
4091   2            break;
4092   2            
4093   2          case SCREEN_DeletePasscodeUser:
4094   2      
4095   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
4096   2              {
4097   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4098   3              }
4099   2      
4100   2            break;
4101   2      
4102   2          case SCREEN_DeleteAllPasscodeUser:
4103   2            
4104   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
4105   2            {
4106   3              if ( gui_keycode == KEY_POUNDSIGN )
4107   3              {
4108   4                AllPasscodeUserDeleteMgr.Selection = YES;
4109   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
4110   4              }
4111   3              else if ( gui_keycode == KEY_ASTERISK )
4112   3              {
4113   4                DEF_ButtonPress_Voice;
4114   4                Hardware_DelayMs(100);
4115   4                GoToPasswordMenu(); 
4116   4              }
4117   3            }
4118   2            break;
4119   2            
4120   2      
4121   2          case SCREEN_TimeSetting:
4122   2            
4123   2          /*if ( TimeSettingMgr.Status == SetYearMajor)
4124   2              {
4125   2                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4126   2                {
4127   2                  DEF_ButtonPress_Voice;
4128   2                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 68  

4129   2                  TimeSettingMgr.Status = SetYearMinor;
4130   2                }
4131   2              }
4132   2              else if ( TimeSettingMgr.Status == SetYearMinor)
4133   2              {
4134   2                if ( gui_keycode == KEY_ASTERISK )
4135   2                {
4136   2                  DEF_ButtonPress_Voice;
4137   2                  TimeSettingMgr.Status = SetYearMajor;
4138   2                }
4139   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4140   2                {
4141   2                  DEF_ButtonPress_Voice;
4142   2                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
4143   2                  TimeSettingMgr.Status = SetMonthMajor;
4144   2                }
4145   2              }
4146   2              
4147   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
4148   2              {
4149   2                if ( (gui_keycode < KEY_TWO) )
4150   2                {
4151   2                  DEF_ButtonPress_Voice;
4152   2                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
4153   2                  TimeSettingMgr.Status = SetMonthMinor;
4154   2                }
4155   2              }
4156   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
4157   2              {
4158   2                if ( gui_keycode == KEY_ASTERISK )
4159   2                {
4160   2                  DEF_ButtonPress_Voice;
4161   2                  TimeSettingMgr.Status = SetYearMajor;
4162   2                }
4163   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4164   2                {
4165   2                  DEF_ButtonPress_Voice;
4166   2                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
4167   2                  if ( TempSystemTime.month > 0x12 ){
4168   2                    TempSystemTime.month = 0x12;
4169   2                  }
4170   2                  if(TempSystemTime.month == 0x00)
4171   2                  {
4172   2                   TempSystemTime.month = 0x01;
4173   2                  }
4174   2                  TimeSettingMgr.Status = SetDateMajor;
4175   2                }
4176   2              }
4177   2              
4178   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4179   2              {
4180   2                if ( gui_keycode == KEY_ASTERISK ){
4181   2                  DEF_ButtonPress_Voice;
4182   2                  TimeSettingMgr.Status = SetYearMajor;
4183   2                }
4184   2                else if ( (gui_keycode < KEY_FOUR) )
4185   2                {
4186   2                  DEF_ButtonPress_Voice;
4187   2                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4188   2                  TimeSettingMgr.Status = SetDateMinor;
4189   2                }
4190   2              }
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 69  

4191   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4192   2              {
4193   2                if ( gui_keycode == KEY_ASTERISK ){
4194   2                  DEF_ButtonPress_Voice;
4195   2                  TimeSettingMgr.Status = SetYearMajor;
4196   2                }
4197   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4198   2                {
4199   2                  DEF_ButtonPress_Voice;
4200   2                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4201   2                  if ( TempSystemTime.date > 0x31 ){
4202   2                    TempSystemTime.date = 0x31;
4203   2                  }
4204   2                  if(TempSystemTime.date == 0x00)
4205   2                  {
4206   2                   TempSystemTime.date = 0x01;
4207   2                  }
4208   2                  TimeSettingMgr.Status = SetHourMajor;
4209   2                }
4210   2              }
4211   2      
4212   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4213   2              {
4214   2                if ( gui_keycode == KEY_ASTERISK ){
4215   2                  DEF_ButtonPress_Voice;
4216   2                  TimeSettingMgr.Status = SetYearMajor;
4217   2                }
4218   2                else if ( (gui_keycode < KEY_THREE )){
4219   2                  DEF_ButtonPress_Voice;
4220   2                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4221   2                  TimeSettingMgr.Status = SetHourMinor;
4222   2                }
4223   2              }
4224   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4225   2              {
4226   2                if ( gui_keycode == KEY_ASTERISK ){
4227   2                  DEF_ButtonPress_Voice;
4228   2                  TimeSettingMgr.Status = SetYearMajor;
4229   2                }
4230   2                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4231   2                {
4232   2                  DEF_ButtonPress_Voice;
4233   2                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
4234   2                  if (TempSystemTime.hour > 0x23){
4235   2                    TempSystemTime.hour = 0x23;
4236   2                  }
4237   2                  TimeSettingMgr.Status = SetMinuteMajor;
4238   2                }
4239   2              }
4240   2      
4241   2      
4242   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4243   2              {
4244   2                if ( gui_keycode == KEY_ASTERISK ){
4245   2                  DEF_ButtonPress_Voice;
4246   2                  TimeSettingMgr.Status = SetYearMajor;
4247   2                }
4248   2                else if ( gui_keycode < KEY_SIX)
4249   2                {
4250   2                  DEF_ButtonPress_Voice;
4251   2                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4252   2                  TimeSettingMgr.Status = SetMinuteMinor;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 70  

4253   2                }
4254   2              }
4255   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4256   2              {
4257   2                if ( gui_keycode == KEY_ASTERISK ){
4258   2                  DEF_ButtonPress_Voice;
4259   2                  TimeSettingMgr.Status = SetYearMajor;
4260   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4261   2                }
4262   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4263   2                  DEF_ButtonPress_Voice;
4264   2                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4265   2                  TimeSettingMgr.Status = SetSecondMajor;
4266   2                }
4267   2              }
4268   2      
4269   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4270   2              {
4271   2                if ( gui_keycode == KEY_ASTERISK ){
4272   2                  DEF_ButtonPress_Voice;
4273   2                  TimeSettingMgr.Status = SetYearMajor;
4274   2                }
4275   2                else if ( gui_keycode < KEY_SIX){
4276   2                  DEF_ButtonPress_Voice;
4277   2                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4278   2                  TimeSettingMgr.Status = SetSecondMinor;
4279   2                }
4280   2              }
4281   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4282   2              {
4283   2                if ( gui_keycode == KEY_ASTERISK ){
4284   2                  DEF_ButtonPress_Voice;
4285   2                  TimeSettingMgr.Status = SetYearMajor;
4286   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4287   2                }
4288   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4289   2                  DEF_ButtonPress_Voice;
4290   2                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4291   2                  TimeSettingMgr.Status = SetYearMajor;
4292   2                }
4293   2              }
4294   2      
4295   2              if ( gui_keycode == KEY_POUNDSIGN )
4296   2              {
4297   2                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4298   2                {
4299   2                  DEF_ButtonPress_Voice;
4300   2                  SaveSystemTime();
4301   2                  #ifdef Function_USE_Internal_RTC
4302   2                  G_SystemUTCTime = SystemTimeToUTC(SystemTime);
4303   2                  #elif defined Function_USE_External_RTC
4304   2                  PCF8563_WriteTime();
4305   2                  #endif
4306   2                  Hardware_DelayMs(100);
4307   2                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4308   2                }
4309   2                else{
4310   2                  Hardware_DelayMs(100);
4311   2                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4312   2                }
4313   2                  
4314   2                GoToSystemConfigMenu();         
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 71  

4315   2              }
4316   2              else if ( gui_keycode == KEY_ASTERISK )
4317   2              {
4318   2                DEF_ButtonPress_Voice;
4319   2                Hardware_DelayMs(100);
4320   2                GoToSystemConfigMenu();   
4321   2      
4322   2                #ifdef Function_USE_Internal_RTC
4323   2                SystemTime = UTCToSystemtime(G_SystemUTCTime);
4324   2                #elif defined Function_USE_External_RTC
4325   2                PCF8563_ReadTime();
4326   2                #endif
4327   2        
4328   2                //GotSystemTime();      
4329   2              
4330   2                TimeSettingMgr.Status = SetYearMajor;
4331   2              }*/
4332   2      
4333   2            break;
4334   2      
4335   2            case SCREEN_RestoreFactoryDefault:
4336   2      
4337   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4338   2              {
4339   3                if ( gui_keycode == KEY_POUNDSIGN )
4340   3                {
4341   4                  DEF_ButtonPress_Voice;
4342   4                  Hardware_DelayMs(100);
4343   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4344   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4345   4                }
4346   3                else if ( gui_keycode == KEY_ASTERISK )
4347   3                {
4348   4                  DEF_ButtonPress_Voice;
4349   4                  Hardware_DelayMs(100);
4350   4                  GoToSystemConfigMenu(); 
4351   4                }
4352   3              }
4353   2      
4354   2              break;
4355   2      
4356   2          #ifdef Function_VoiceEnabledEnglish
4357   2          case SCREEN_LanguageSetting:
4358   2      
4359   2              if ( gui_keycode == KEY_ONE )
4360   2              {
4361   3                DEF_ButtonPress_Voice;
4362   3                Hardware_DelayMs(100);
4363   3                SystemLanguage = Chinese;       
4364   3                SystemConfigSave();
4365   3                GoToSystemConfigMenu();
4366   3              }
4367   2              else if ( gui_keycode == KEY_TWO )
4368   2              {
4369   3                DEF_ButtonPress_Voice;
4370   3                Hardware_DelayMs(100);
4371   3                SystemLanguage = English;         
4372   3                SystemConfigSave();
4373   3                GoToSystemConfigMenu();
4374   3              }
4375   2              else if ( gui_keycode == KEY_ASTERISK)
4376   2              {
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 72  

4377   3                DEF_ButtonPress_Voice;
4378   3                Hardware_DelayMs(100);
4379   3                GoToSystemConfigMenu();
4380   3              }
4381   2            break;
4382   2          #endif
4383   2      
4384   2          case SCREEN_VolumeSetting:
4385   2      
4386   2            if ( gui_keycode == KEY_ONE )
4387   2            {
4388   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4389   3              Hardware_DelayMs(100);
4390   3              VoiceMgr.Enable = bTRUE;        
4391   3              SystemConfigSave();
4392   3              GoToSystemConfigMenu();
4393   3            }
4394   2            else if ( gui_keycode == KEY_TWO )
4395   2            {
4396   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4397   3              Hardware_DelayMs(100);
4398   3              VoiceMgr.Enable = bFALSE; 
4399   3              SystemConfigSave();
4400   3              GoToSystemConfigMenu();
4401   3            }
4402   2            else if ( gui_keycode == KEY_ASTERISK )
4403   2            {
4404   3              DEF_ButtonPress_Voice;
4405   3              Hardware_DelayMs(100);
4406   3              GoToSystemConfigMenu();
4407   3            }
4408   2            break;  
4409   2      /*        
4410   2          case SCREEN_ManagerPasscodeModify:
4411   2      
4412   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4413   2            {
4414   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4415   2            }
4416   2            
4417   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4418   2            {
4419   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4420   2            }
4421   2        
4422   2            break;
4423   2      */        
4424   2          case SCREEN_MemoryCheck:
4425   2            
4426   2            
4427   2            break;
4428   2            
4429   2          case SCREEN_ManagerIdentify:
4430   2      
4431   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4432   2                {
4433   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4434   3                }
4435   2            break;
4436   2              
4437   2          case SCREEN_UnlockingModeSetting:
4438   2              
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 73  

4439   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4440   2              {
4441   3                if ( gui_keycode == KEY_ONE )
4442   3                {
4443   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4444   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4445   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4446   4                  Hardware_DelayMs(100);
4447   4                }
4448   3                else if ( gui_keycode == KEY_TWO )
4449   3                {
4450   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4451   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4452   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4453   4                  {
4454   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4455   5                    Hardware_DelayMs(100);
4456   5                  }
4457   4                  else
4458   4                  {
4459   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4460   5                    Hardware_DelayMs(100);
4461   5                  }
4462   4                }
4463   3                else if ((gui_keycode == KEY_ASTERISK))
4464   3                {
4465   4                  DEF_ButtonPress_Voice;
4466   4                  Hardware_DelayMs(100);
4467   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4468   4                }
4469   3              }
4470   2            break;
4471   2      
4472   2            
4473   2            case SCREEN_ContinueOpenSetting:
4474   2            
4475   2                if ( gui_keycode == KEY_ONE )
4476   2                {
4477   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4478   3                  {
4479   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4480   4                    GUI_MotorContinueOpen();
4481   4                  }
4482   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4483   3                  Hardware_DelayMs(100);
4484   3                  GoToSystemConfigMenu();
4485   3                }
4486   2                else if ( gui_keycode == KEY_TWO )
4487   2                {
4488   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4489   3                  {
4490   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
4491   4                    MotorMgr.CWTimer = 0;
4492   4                    MotorMgr.CWWAITTimer =  0;  
4493   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4494   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
4495   4                    MotorMgr.MotorStatus = CCW; 
4496   4                    MotorMgr.CCWSoftStart = bTRUE;
4497   4                  }
4498   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
4499   3                  Hardware_DelayMs(100);
4500   3                  GoToSystemConfigMenu();
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 74  

4501   3                }
4502   2                else if ( gui_keycode == KEY_ASTERISK )
4503   2                {
4504   3                  DEF_ButtonPress_Voice;
4505   3                  Hardware_DelayMs(100);
4506   3                  GoToSystemConfigMenu();
4507   3                }
4508   2              break;
4509   2                
4510   2            case SCREEN_PickAlarmEnableSetting:
4511   2            
4512   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4513   2                {
4514   3                  if ( gui_keycode == KEY_ONE )
4515   3                  {
4516   4                    //PickAlarmEnableMgr.Selection = YES;
4517   4                    PickAlarmEnableMgr.Enable = bTRUE;
4518   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4519   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4520   4                    Hardware_DelayMs(100);
4521   4          
4522   4                  }
4523   3                  else if ( gui_keycode == KEY_TWO )
4524   3                  {
4525   4                    //PickAlarmEnableMgr.Selection = NO;
4526   4                    PickAlarmEnableMgr.Enable = bFALSE;
4527   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4528   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4529   4                    Hardware_DelayMs(100);
4530   4                    
4531   4                  }
4532   3                  else if ( gui_keycode == KEY_ASTERISK)
4533   3                  {
4534   4                    DEF_ButtonPress_Voice;
4535   4                    Hardware_DelayMs(100);
4536   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4537   4                  }
4538   3                }
4539   2                break;
4540   2      
4541   2            case SCREEN_SystemVersion:
4542   2      
4543   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4544   2                  {
4545   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4546   3                    CardIdentifyMgr.Status = ReadingCardID;
4547   3                    FpIdentifyMgr.Status = FPMcmdStart;
4548   3                    CurrentScreen = SCREEN_Main;
4549   3                  }
4550   2                break;
4551   2                  
4552   2            case SCREEN_PickLockAlarm:
4553   2        
4554   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4555   2            {
4556   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
4557   3              {
4558   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4559   4                {
4560   5                  
4561   5                  PasscodeInputMgr.Point = 0x01;
4562   5                  PasscodeInputMgr.PasscodeLen = 16;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 75  

4563   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4564   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4565   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4566   5                  {
4567   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4568   6                  }
4569   5                  
4570   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4571   5                  //DEF_ButtonPress_Voice;
4572   5                }
4573   4               }
4574   3              else if ( gui_keycode == KEY_ASTERISK )
4575   3              {
4576   4              }
4577   3            }
4578   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4579   2            {
4580   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4581   3              {
4582   4                //DEF_ButtonPress_Voice;
4583   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4584   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4585   4              }
4586   3            }
4587   2            
4588   2            break;
4589   2      
4590   2            case SCREEN_SystemLocked:
4591   2              
4592   2              if ( gui_keycode != KEY_NONE )  
4593   2              {
4594   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4595   3                Hardware_DelayMs(100);
4596   3              }
4597   2            break;
4598   2      
4599   2            case SCREEN_CheckEventLogBySequence:
4600   2              
4601   2              #ifdef Function_EventLog
                      if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                      {
                        if ( gui_keycode == KEY_TWO )
                        { 
                          if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
                          {
                            DEF_ButtonPress_Voice;
                            CheckEventLogBySequenceMgr.OffsetEventLogNum--;
              
                            if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
                              LogMgr.DisplayPoint++;
                            }
                            else{
                              LogMgr.DisplayPoint = 0;
                            }
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if ( gui_keycode == KEY_EIGHT )
                        { 
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 76  

                          if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
                          {
                            DEF_ButtonPress_Voice;
                            if ( LogMgr.DisplayPoint > 0 )
                            {
                              LogMgr.DisplayPoint--;
                            }
                            else if( LogMgr.DisplayPoint == 0 )
                            {
                              if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
                              {
                                LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
                              }
                            }
                            CheckEventLogBySequenceMgr.OffsetEventLogNum++;
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if (gui_keycode == KEY_ASTERISK)
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4654   2      
4655   2            break;
4656   2      
4657   2            case SCREEN_DeleteEventLog:
4658   2              
4659   2              #ifdef Function_EventLog
                      if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
                      {
                        if ( gui_keycode == KEY_POUNDSIGN )
                        {
                          DEF_ButtonPress_Voice;
                          LogDeleteMgr.Status = LogDeleting;
                        }
                        else if ( gui_keycode == KEY_ASTERISK )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4675   2      
4676   2            break;
4677   2              
4678   2          default:
4679   2      
4680   2            break;
4681   2            
4682   2        }
4683   1        
4684   1      }
4685          
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 77  

4686          /*******************************************************/
4687          /*******************************************************/
4688          void GUI_Update_Screen(void)//GUI更新屏幕
4689          {
4690   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4691   1        {
4692   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_Flag_RefreshLCD = bFALSE;
                  #endif
4696   2          LastScreen =  CurrentScreen;
4697   2        }
4698   1        switch (CurrentScreen)
4699   1        {
4700   2          case SCREEN_Initialization:
4701   2      
4702   2            //SET_ALLKEYLED_OFF();
4703   2            ShowInitialization();
4704   2            break;
4705   2          
4706   2          case SCREEN_LowBattery:
4707   2      
4708   2            //SET_ALLKEYLED_OFF();
4709   2            ShowLowBattery();
4710   2            break;
4711   2      
4712   2          case SCREEN_PickLockAlarm:
4713   2      
4714   2            //SET_ALLKEYLED_ON();
4715   2            ShowPickLockAlarm();
4716   2            break;
4717   2      
4718   2          case SCREEN_Main:
4719   2            
4720   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4721   2            {
4722   3              //SET_ALLKEYLED_OFF();
4723   3            }
4724   2            else
4725   2            {
4726   3              //SET_ALLKEYLED_ON();
4727   3              GUI_UpadteMain();
4728   3            }
4729   2            break;
4730   2      
4731   2          case SCREEN_IdentifySuccess:
4732   2            
4733   2            //SET_ALLKEYLED_OFF();
4734   2            //KEYLED_WATERLIGHT_Task();
4735   2            ShowIdentifySuccessPage();
4736   2            break;
4737   2          
4738   2          case SCREEN_IdentifyFail:
4739   2              
4740   2            //KEYLED_IdentifyFail_Task();
4741   2            ShowIdentifyFailPage();
4742   2            break;
4743   2          
4744   2          case SCREEN_DoorBell:
4745   2            
4746   2            ShowDoorBell();
4747   2            break;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 78  

4748   2          
4749   2          case SCREEN_MainMenu:
4750   2      
4751   2            //SET_1234A_LED_ON();
4752   2            ShowMainMenu();
4753   2            break;
4754   2            
4755   2          case SCREEN_EventLogMenu:
4756   2            
4757   2            //SET_12A_LED_ON();
4758   2            #ifdef Function_EventLog
                    ShowLogMenu();
                    #endif
4761   2            break;
4762   2            
4763   2          case SCREEN_FpMenu:
4764   2            
4765   2            //SET_123A_LED_ON();
4766   2            ShowFpMenu();
4767   2            break;
4768   2          
4769   2          case SCREEN_CardUserMenu:
4770   2      
4771   2            //SET_12A_LED_ON();
4772   2            ShowCardUserMenu();
4773   2            break;
4774   2          
4775   2          case SCREEN_PasscodeMenu:
4776   2            
4777   2            //SET_123A_LED_ON();
4778   2            ShowPasscodeMenu();
4779   2            break;
4780   2          
4781   2          case SCREEN_SystemConfigMenu:
4782   2      
4783   2            //SET_123456A_LED_ON();
4784   2            ShowSystemConfigMenu();
4785   2            break;
4786   2          
4787   2          #ifdef Function_TuyaWifi
4788   2          case SCREEN_NetWorkLink:
4789   2            
4790   2            ShowNetWorkConnecting();
4791   2            break;
4792   2          #endif
4793   2          
4794   2          case SCREEN_RegisterUserFp:
4795   2            
4796   2            //SET_ALLKEYLED_OFF();
4797   2            ShowRegisterUserFp();
4798   2            break;
4799   2          
4800   2          case SCREEN_DeleteUserFp:
4801   2            
4802   2            //SET_ALLKEYLED_ON();
4803   2            //ShowDeleteUserFp();
4804   2            break;
4805   2          
4806   2          case SCREEN_DeleteAllUserFp:
4807   2            
4808   2            //SET_AP_LED_ON();
4809   2            ShowDeleteAllUserFp();
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 79  

4810   2            break;
4811   2          
4812   2          case SCREEN_RegisterMasterFp:
4813   2            
4814   2            //SET_ALLKEYLED_OFF();
4815   2            ShowRegisterMasterFp();
4816   2            break;
4817   2            
4818   2          case SCREEN_DeleteMasterFp:
4819   2            
4820   2            //SET_ALLKEYLED_ON();
4821   2            //ShowDeleteMasterFp();
4822   2            break;
4823   2      /*
4824   2          case SCREEN_DeleteAllMasterFp:
4825   2            SET_LRandConfirmLED_ON();
4826   2            ShowDeleteAllMasterFp();
4827   2      
4828   2            break;
4829   2      */
4830   2          case SCREEN_RegisterCardUser:
4831   2            //KEYLED_KEY5_Flash();
4832   2            ShowRegisterCardUser();
4833   2      
4834   2            break;
4835   2            
4836   2          case SCREEN_DeleteCardUser:
4837   2            //SET_ALLKEYLED_ON();
4838   2            //ShowDeleteCardUser();
4839   2      
4840   2            break;
4841   2      
4842   2          case SCREEN_DeleteAllCardUser:
4843   2            //SET_AP_LED_ON();
4844   2            ShowDeleteAllCardUser();
4845   2      
4846   2            break;
4847   2      
4848   2          case SCREEN_RegisterPasscodeUser:
4849   2            //SET_ALLKEYLED_ON();
4850   2            ShowRegisterPasscodeUser();
4851   2      
4852   2            break;
4853   2            
4854   2          case SCREEN_DeletePasscodeUser:
4855   2            //SET_ALLKEYLED_ON();
4856   2            //ShowDeletePasscodeUser();
4857   2      
4858   2            break;
4859   2      
4860   2          case SCREEN_DeleteAllPasscodeUser:
4861   2            //SET_AP_LED_ON();
4862   2            ShowDeleteAllPasscodeUser();
4863   2      
4864   2            break;
4865   2      
4866   2      
4867   2          case SCREEN_TimeSetting:
4868   2      
4869   2            //ShowTimeSetting();
4870   2      
4871   2            break;
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 80  

4872   2      /*
4873   2          case SCREEN_ManagerPasscodeModify:
4874   2          //  SET_ALLKEYLED_ON();
4875   2          //  ShowModifyManagerPasscode();
4876   2      
4877   2            break;
4878   2      */      
4879   2          case SCREEN_RestoreFactoryDefault:
4880   2            //SET_AP_LED_ON();
4881   2            ShowRestoreFactoryDefault();
4882   2      
4883   2            break;
4884   2          
4885   2          #ifdef Function_VoiceEnabledEnglish
4886   2          case SCREEN_LanguageSetting:
4887   2            //SET_12A_LED_ON();
4888   2            ShowLanguageSetting();
4889   2      
4890   2            break;
4891   2          #endif
4892   2            
4893   2          case SCREEN_VolumeSetting:
4894   2            //SET_12A_LED_ON();
4895   2            ShowVolumeSetting();
4896   2      
4897   2            break;
4898   2      
4899   2          case SCREEN_MemoryCheck:
4900   2            //SET_UDandConfirmLED_ON();
4901   2            //ShowMemoryUsage();
4902   2      
4903   2            break;
4904   2            
4905   2          case SCREEN_ManagerIdentify:
4906   2      
4907   2            //SET_ALLKEYLED_ON();
4908   2            ShowManagerIdentify();
4909   2      
4910   2            break;
4911   2      
4912   2          case SCREEN_UnlockingModeSetting:
4913   2            //SET_12A_LED_ON();
4914   2            ShowUnlockingModeSetting();
4915   2          
4916   2            break;
4917   2            
4918   2          case SCREEN_ContinueOpenSetting:  
4919   2            //SET_12A_LED_ON();
4920   2            ShowContinuedOpenModeSetting();
4921   2            break;
4922   2            
4923   2          case SCREEN_PickAlarmEnableSetting: 
4924   2            //SET_12A_LED_ON();
4925   2            ShowPickAlarmEnableSetting();
4926   2            break;
4927   2            
4928   2          case SCREEN_SystemVersion:  
4929   2            //SET_AP_LED_ON();
4930   2            GUI_Update_Version();
4931   2            break;
4932   2      
4933   2      //    case SCREEN_SelfTest:
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 81  

4934   2      
4935   2            //SET_ALLKEYLED_ON();
4936   2            //ShowSelfTest();
4937   2      //      break;
4938   2          
4939   2          case SCREEN_AgingTest:
4940   2      
4941   2            //KEYLED_WATERLIGHT_Task();
4942   2            ShowAgingTest();
4943   2            break;
4944   2      
4945   2          case SCREEN_SystemLocked:
4946   2      
4947   2            //KEYLED_ASTERISK_Flash();
4948   2            ShowSystemLocked();
4949   2            break;
4950   2            
4951   2          case SCREEN_CheckEventLogBySequence:
4952   2            #ifdef Function_EventLog
                    ShowEventLogBySequence();
                    #endif
4955   2            break;
4956   2      
4957   2          case SCREEN_DeleteEventLog:
4958   2                  
4959   2          #ifdef Function_EventLog
                    ShowClearEventLog();
                  #endif
4962   2            break;
4963   2          
4964   2          default:
4965   2            break;
4966   2        }
4967   1      
4968   1      }
4969          /*******************************************************/
4970          /*******************************************************/
4971          /*******************************************************/
4972          void GUI_Init(void)//
4973          {
4974   1        //uint8_t i;
4975   1      
4976   1        GUI_ToggleFlag_05s=0x00;
4977   1        GUI_ToggleFlag_1s=0x01;
4978   1        FpIdentifyMgr.BreathingLED=0x00;
4979   1      
4980   1        GUI_Flag_RefreshLCD = bFALSE;
4981   1      
4982   1        FpIdentifyMgr.Status = FPMcmdStart;
4983   1        CardIdentifyMgr.Status = ReadingCardID;
4984   1        TimeSettingMgr.Status = SetYearMajor;
4985   1        BatteryMgr.PostLowBattery = bTRUE;
4986   1        
4987   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
4988   1      
4989   1        Key_Init();
4990   1        
4991   1        init_Managerdata();
4992   1      
4993   1        ReadCardUserMemoryFromEEPROM();
4994   1      
4995   1        ReadPasscodeUserMemoryFromEEPROM();
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 82  

4996   1      
4997   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
4998   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
4999   1      
5000   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
5001   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
5002   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
5003   1        UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
5004   1        UserIdentifyResultMgr.VoiceDelay = 0;
5005   1      
5006   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
5007   1              
5008   1        DEBUG_MARK;
5009   1          
5010   1        #ifdef Function_USE_Internal_RTC
                SystemTime = UTCToSystemtime(G_SystemUTCTime);
                #elif defined Function_USE_External_RTC
                PCF8563_ReadTime();
                #endif
5015   1        
5016   1        #ifdef Function_ScreenDisplay
                Display_Init();
                #endif
5019   1      
5020   1      }
5021          
5022          /*******************************************************/
5023          /*******************************************************/
5024          /*******************************************************/
5025          void GUI_Task(void)//
5026          {
5027   1        //uint8_t *Point;
5028   1        uint8_t i,j;
5029   1        if (++GUI_TimeCnt > 63)
5030   1        {
5031   2          GUI_ToggleFlag_1s^=0x01;
5032   2          GUI_TimeCnt =0;
5033   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
5034   2          {
5035   3            if(VoiceMgr.Enable == bFALSE)
5036   3            {
5037   4              VoiceMgr.Enable = bTRUE;
5038   4              DEF_ButtonPress_Voice;
5039   4              VoiceMgr.Enable = bFALSE;
5040   4            }
5041   3            else
5042   3            {
5043   4              DEF_ButtonPress_Voice;
5044   4            }
5045   3            RefreshSystemSleepTime();
5046   3          }
5047   2          #ifdef Function_FPMbreathingLed
5048   2          if( FpIdentifyMgr.BreathingLED > 0 )
5049   2          {
5050   3            FpIdentifyMgr.BreathingLED += 1;
5051   3            if( FpIdentifyMgr.BreathingLED == 4 )
5052   3            {
5053   4              FpIdentifyMgr.BreathingLED = 0;
5054   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
5055   4            }
5056   3          }
5057   2          #endif
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 83  

5058   2        }
5059   1        
5060   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
5061   2          GUI_ToggleFlag_05s^= 0x01;
5062   2        }
5063   1        
5064   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
5065   1        {
5066   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
5067   2        }
5068   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
5069   1        {
5070   2           LockBrand.BrandChangeTimeDelay--;
5071   2        }
5072   1      
5073   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
5074   1        {
5075   2          j=0;
5076   2          for (i=0;i<100;i++)
5077   2          {
5078   3            Hardware_DelayX5us(2);
5079   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
5080   3            {
5081   4              j++;
5082   4            }
5083   3          }
5084   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
5085   2          {
5086   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
5087   3          }
5088   2        }
5089   1        else
5090   1        {
5091   2          j=0;
5092   2          for (i=0;i<10;i++)
5093   2          {
5094   3            Hardware_DelayX5us(1);
5095   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
5096   3            {
5097   4              j++;
5098   4            }
5099   3          }
5100   2          if (j>8)
5101   2          {
5102   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
5103   3          }
5104   2        }
5105   1        
5106   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
5107   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
5108   1            &&( CurrentScreen != SCREEN_Initialization )
5109   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
5110   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
5111   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
5112   1        {
5113   2          CurrentScreen = SCREEN_PickLockAlarm;
5114   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
5115   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
5116   2          FpIdentifyMgr.Status = FPMcmdStart;
5117   2          CardIdentifyMgr.Status = ReadingCardID;
5118   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
5119   2          #ifdef Function_FPMbreathingLed
C51 COMPILER V9.60.0.0   GUI                                                               04/19/2023 13:57:32 PAGE 84  

5120   2          SetFPMbreathingLed(FPMbreathingLed_Off);
5121   2          #endif
5122   2        }
5123   1        
5124   1        GUI_Button_Monitor();
5125   1        
5126   1        GUI_Update_Screen();
5127   1        
5128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9556    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     45       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
