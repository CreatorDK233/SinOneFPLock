C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LOG
OBJECT MODULE PLACED IN .\Objects\Log.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\ModuleLogic\Log.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\Log.lst) TABS(2) OBJECT(.\Object
                    -s\Log.obj)

line level    source

   1          #include "Project.h"
   2          #include "RTC.h"
   3          #include "LCD.h"
   4          #include "Font.h"
   5          #include "Font_Menu.h"
   6          #include "Flash.h"
   7          
   8          code uint8_t DEF_LogFlagHighByte = 0x55;
   9          code uint8_t DEF_LogFlagLowByte = 0xAA;
  10          
  11          code uint16_t DEF_MaxRecordedLogID = 512;  //512*8=4K   TOTAL 4K
  12          code uint16_t DEF_MaxSearchLogID = 500; 
  13          
  14          #define DEF_EachLogAddrIncrease 64/DEF_InternalFlash_MemoryBit
  15          
  16          void LogMgr_WriteLog(uint16_t LogPoint)
  17          {
  18   1      #ifdef Function_EventLog
  19   1        uint16_t Addr;
  20   1        uint8_t *point;
  21   1        
  22   1        Addr = LogPoint*DEF_EachLogAddrIncrease+DEF_InternalFlash_LogMemoryStartAddr;
  23   1        point = &LogMgr.NewLog.FlagHighByte;
  24   1        FLASH_WriteSequential(Addr,point,DEF_EachLogAddrIncrease);
  25   1      #endif
  26   1      }
  27          
  28          void LogMgr_ReadLog(uint16_t LogPoint,uint8_t *point)
  29          {
  30   1      #ifdef Function_EventLog
  31   1        uint16_t Addr;
  32   1      
  33   1        Addr = LogPoint*DEF_EachLogAddrIncrease+DEF_InternalFlash_LogMemoryStartAddr;
  34   1        FLASH_ReadSequential(Addr,point,DEF_EachLogAddrIncrease);
  35   1      #endif
  36   1      }
  37          
  38          
  39          status_t JudgeLogSaved(uint16_t LogPoint)
  40          {
  41   1        #ifndef Function_EventLog
                          return S_FAIL;
                #else
  44   1        Log_t TempLog;
  45   1        LogMgr_ReadLog(LogPoint,&TempLog.FlagHighByte);
  46   1        if ( (TempLog.FlagHighByte == DEF_LogFlagHighByte)
  47   1           &&(TempLog.FlagLowByte == DEF_LogFlagLowByte) )
  48   1        {
  49   2          return S_SUCCESS;
  50   2        }
  51   1        return S_FAIL;
  52   1        #endif
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 2   

  53   1      }
  54          
  55          status_t DeleteAllLog(void)
  56          {
  57   1        #ifndef Function_EventLog
                          return S_FAIL;
                #else
  60   1        uint8_t i;
  61   1        uint16_t SectorAddr;
  62   1        
  63   1        for (i=0;i<DEF_InternalFlash_SectorNum;i++)
  64   1        {
  65   2          SectorAddr=(DEF_InternalFlash_LogMemoryStartPage+i)*DEF_InternalFlash_SectorSize;
  66   2          if ( Flash_EraseOnePage(SectorAddr) == S_FAIL )
  67   2          {
  68   3            DEBUG_MARK;
  69   3            return S_FAIL;
  70   3          }
  71   2        }
  72   1        return S_SUCCESS;
  73   1        #endif
  74   1      }
  75          
  76          void SearchEventLogBySequence(void)
  77          {
  78   1        #ifndef Function_EventLog
                          return;
                #else
  81   1        uint16_t LogID,i;
  82   1        Log_t TempLog; 
  83   1      
  84   1        if ( LogMgr.LastPoint >0 )
  85   1        {
  86   2          LogID = LogMgr.LastPoint-1;
  87   2        }
  88   1        else{
  89   2          LogID = DEF_MaxRecordedLogID-1;
  90   2        }
  91   1      
  92   1        CheckEventLogBySequenceMgr.MatchedEventLogNum = 0;
  93   1        
  94   1        for (i=0;i<DEF_MaxSearchLogID;i++)
  95   1        {
  96   2          CLRWDT();
  97   2          
  98   2          LogMgr_ReadLog(LogID,&TempLog.FlagHighByte);
  99   2          if (  (TempLog.FlagHighByte == DEF_LogFlagHighByte)
 100   2              &&(TempLog.FlagLowByte == DEF_LogFlagLowByte)
 101   2            )
 102   2          { 
 103   3            if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0 )
 104   3            {
 105   4              CheckEventLogBySequenceMgr.StartEventLogPoint = LogID;  //first matched Log, saved to start point memor
             -y
 106   4            }
 107   3            CheckEventLogBySequenceMgr.MatchedEventLogNum++;
 108   3          }
 109   2          else if ( (TempLog.FlagHighByte != DEF_LogFlagHighByte)
 110   2              ||(TempLog.FlagLowByte != DEF_LogFlagLowByte)
 111   2              )
 112   2          {
 113   3            break;
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 3   

 114   3          }
 115   2      
 116   2          if (LogID>0)
 117   2          {
 118   3            LogID--;
 119   3          }
 120   2          else
 121   2          {
 122   3            if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
 123   3            {
 124   4              LogID = DEF_MaxRecordedLogID-1;
 125   4            }
 126   3            else
 127   3            {
 128   4              break;
 129   4            }
 130   3          }
 131   2        }
 132   1        #endif
 133   1      }
 134          
 135          void GUI_CreatAndSaveLog(EventLogType_t LogType)//GUI创建和保存日志
 136          {
 137   1        uint32_t TempUTC;
 138   1        if ( LogType == OpenDoor )
 139   1        {
 140   2          if ( UserIdentifyResultMgr.IdentifyType == CARD ){
 141   3            LogMgr.NewLog.LogOrType._Bit.UserType = CARDUSER;
 142   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.CardUserID;
 143   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
 144   3            //LogMgr.NewLog.EventParameter = 0x00;
 145   3          }
 146   2          else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT ){
 147   3            LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 148   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.FPUserID;
 149   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
 150   3            //LogMgr.NewLog.EventParameter = 0x00;
 151   3          }
 152   2          else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
 153   2          {
 154   3            LogMgr.NewLog.LogOrType._Bit.UserType = PASSCODEUSER;
 155   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.PasscodeUserID;
 156   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
 157   3            //LogMgr.NewLog.EventParameter = 0x00;  
 158   3          }
 159   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD ){
 160   3            LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 161   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.FPUserID;
 162   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
 163   3            //LogMgr.NewLog.EventParameter = 0x00;  
 164   3          }
 165   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE ){
 166   3            LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 167   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.FPUserID;
 168   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
 169   3            //LogMgr.NewLog.EventParameter = 0x00;
 170   3      
 171   3          }
 172   2          else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE ){
 173   3            LogMgr.NewLog.LogOrType._Bit.UserType = PASSCODEUSER;
 174   3            LogMgr.NewLog.UserID = UserIdentifyResultMgr.PasscodeUserID;
 175   3            LogMgr.NewLog.LogOrType._Bit.EventType = OpenDoor;
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 4   

 176   3            //LogMgr.NewLog.EventParameter = 0x00;  
 177   3          }
 178   2          else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
 179   2          {
 180   3            return;   //do nothing
 181   3          }
 182   2          else
 183   2          {
 184   3            return;   //do nothing
 185   3          }
 186   2        }
 187   1        else if ( LogType == AddFpUser )
 188   1        {
 189   2          LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 190   2          LogMgr.NewLog.UserID = FpUserRegisterMgr.UserID;
 191   2          LogMgr.NewLog.LogOrType._Bit.EventType = AddFpUser;
 192   2          //LogMgr.NewLog.EventParameter = 0x00;  
 193   2        }
 194   1        else if ( LogType == DeleteFpUser )
 195   1        {
 196   2          LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 197   2          LogMgr.NewLog.UserID = FpUserDeleteMgr.UserID;
 198   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteFpUser;
 199   2          //LogMgr.NewLog.EventParameter = 0x00;  
 200   2        }
 201   1        else if ( LogType == DeleteAllFpUser )
 202   1        {
 203   2          LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 204   2          LogMgr.NewLog.UserID = 0x00;
 205   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteAllFpUser;
 206   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 207   2        }
 208   1        else if ( LogType == DeleteAllStressFpUser )
 209   1        {
 210   2          LogMgr.NewLog.LogOrType._Bit.UserType = FPUSER;
 211   2          LogMgr.NewLog.UserID = 0x00;
 212   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteAllStressFpUser;
 213   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 214   2        }
 215   1        else if ( LogType == AddPasscodeUser )
 216   1        {
 217   2          LogMgr.NewLog.LogOrType._Bit.UserType = PASSCODEUSER;
 218   2          LogMgr.NewLog.UserID = PasscodeUserRegisterMgr.UserID;
 219   2          LogMgr.NewLog.LogOrType._Bit.EventType = AddPasscodeUser;
 220   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 221   2        }
 222   1        else if ( LogType == DeletePasscodeUser )
 223   1        {
 224   2          LogMgr.NewLog.LogOrType._Bit.UserType = PASSCODEUSER;
 225   2          LogMgr.NewLog.UserID = PasscodeUserDeleteMgr.UserID;
 226   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeletePasscodeUser;
 227   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 228   2        }
 229   1        else if ( LogType == DeleteAllPasscodeUser )
 230   1        {
 231   2          LogMgr.NewLog.LogOrType._Bit.UserType = PASSCODEUSER;
 232   2          LogMgr.NewLog.UserID = 0x00;
 233   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteAllPasscodeUser;
 234   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 235   2        }
 236   1        else if ( LogType == AddCardUser )
 237   1        {
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 5   

 238   2          LogMgr.NewLog.LogOrType._Bit.UserType = CARDUSER;
 239   2          LogMgr.NewLog.UserID = CardUserRegisterMgr.UserID;
 240   2          LogMgr.NewLog.LogOrType._Bit.EventType = AddCardUser;
 241   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 242   2        }
 243   1        else if ( LogType == DeleteCardUser )
 244   1        {
 245   2          LogMgr.NewLog.LogOrType._Bit.UserType = CARDUSER;
 246   2          LogMgr.NewLog.UserID = CardUserDeleteMgr.UserID;
 247   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteCardUser;
 248   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 249   2        }
 250   1        else if ( LogType == DeleteAllCardUser )
 251   1        {
 252   2          LogMgr.NewLog.LogOrType._Bit.UserType = CARDUSER;
 253   2          LogMgr.NewLog.UserID = 0x00;
 254   2          LogMgr.NewLog.LogOrType._Bit.EventType = DeleteAllCardUser;
 255   2      //    LogMgr.NewLog.EventParameter = 0x00;  
 256   2        }
 257   1        else
 258   1        {
 259   2          return;   
 260   2          //do nothing
 261   2        }
 262   1        TempUTC = SystemTimeToUTC(SystemTime);
 263   1        LogMgr.NewLog.UTC = TempUTC;
 264   1      
 265   1        LogMgr.NewLog.FlagHighByte = DEF_LogFlagHighByte;
 266   1        LogMgr.NewLog.FlagLowByte = DEF_LogFlagLowByte;
 267   1        
 268   1        LogMgr_WriteLog(LogMgr.LastPoint);
 269   1          
 270   1        if ( LogMgr.LastPoint < (DEF_MaxRecordedLogID-1) )
 271   1        {
 272   2          LogMgr.LastPoint++;
 273   2          //LogMgr.DisplayPoint = LogMgr.LastPoint-1;
 274   2        }
 275   1        else
 276   1        {
 277   2          LogMgr.NewLog.LogOrType._Bit.LogIDmajor = ~ LogMgr.NewLog.LogOrType._Bit.LogIDmajor;
 278   2          LogMgr.LastPoint=0x0000;
 279   2          //LogMgr.DisplayPoint = 999;
 280   2        }
 281   1        
 282   1      }
 283          
 284          void DisplayOneEventLog(uint16_t EventLogID)//显示一个事件日志
 285          {
 286   1        #ifdef Function_ScreenDisplay
 287   1        systemtime_t LogTime;
 288   1        
 289   1        if ( LogMgr.DisplayLog.LogOrType._Bit.EventType == OpenDoor ) 
 290   1        {
 291   2            DisHZ16x14Str(0,24,UnlockLogStr,NormalDisplay);
 292   2        }
 293   1        else if (( LogMgr.DisplayLog.LogOrType._Bit.EventType == AddFpUser )
 294   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == AddPasscodeUser )
 295   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == AddCardUser ))
 296   1        {
 297   2            DisHZ16x14Str(0,24,AddUserStr,NormalDisplay);
 298   2        }
 299   1      
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 6   

 300   1        else if (( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteFpUser )
 301   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllStressFpUser )
 302   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeletePasscodeUser )
 303   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteCardUser )
 304   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllFpUser )
 305   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllCardUser )
 306   1            ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllPasscodeUser ) 
 307   1            )
 308   1        {
 309   2            DisHZ16x14Str(0,24,DeleteUserStr,NormalDisplay);
 310   2        }
 311   1      
 312   1        DisDigital16x8Str(0,88,EventLogID,NormalDisplay);
 313   1        
 314   1        LogTime = UTCToSystemtime(LogMgr.DisplayLog.UTC);
 315   1        DisBcdDigital16x8(2,28,LogTime.year,NormalDisplay);
 316   1        DisZF16x8(2,44,ZF_hengan,NormalDisplay);
 317   1        DisBcdDigital16x8(2,52,LogTime.month,NormalDisplay);
 318   1        DisZF16x8(2,68,ZF_hengan,NormalDisplay);
 319   1        DisBcdDigital16x8(2,76,LogTime.date,NormalDisplay);
 320   1        
 321   1        DisBcdDigital16x8(4,28,LogTime.hour,NormalDisplay);
 322   1        DisZF16x8(4,44,ZF_maohao,NormalDisplay);
 323   1        DisBcdDigital16x8(4,52,LogTime.minute,NormalDisplay);
 324   1        DisZF16x8(4,68,ZF_maohao,NormalDisplay);
 325   1        DisBcdDigital16x8(4,76,LogTime.second,NormalDisplay);
 326   1      
 327   1        if ( LogMgr.DisplayLog.LogOrType._Bit.UserType == CARDUSER )
 328   1        {
 329   2            DisHZ16x14Str(6,20,CardUserStr,NormalDisplay);
 330   2        }
 331   1        else if ( LogMgr.DisplayLog.LogOrType._Bit.UserType ==  FPUSER )
 332   1        {
 333   2            DisHZ16x14Str(6,20,FpUserStr,NormalDisplay);
 334   2        }
 335   1        else if (LogMgr.DisplayLog.LogOrType._Bit.UserType == PASSCODEUSER )
 336   1        {
 337   2            DisHZ16x14Str(6,20,PasscodeUserStr,NormalDisplay);
 338   2        }
 339   1        else if (LogMgr.DisplayLog.LogOrType._Bit.UserType == ONLINEPASSCODEUSER )
 340   1        {
 341   2            DisHZ16x14Str(6,20,TemporaryPasswordStr,NormalDisplay);
 342   2        }
 343   1        DisEN16x8Str(6,80,":",NormalDisplay);
 344   1        
 345   1        if (( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllFpUser )
 346   1          ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllStressFpUser )
 347   1          ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllCardUser )
 348   1          ||( LogMgr.DisplayLog.LogOrType._Bit.EventType == DeleteAllPasscodeUser )
 349   1          )
 350   1        {
 351   2            DisHZ16x14Str(6,92,LotStr,NormalDisplay);
 352   2        }
 353   1        else
 354   1        {
 355   2          DisDigital16x8Str(6,92,LogMgr.DisplayLog.UserID,NormalDisplay);
 356   2        }
 357   1        #endif
 358   1      }
 359          
 360          //void SearchEventLogByDate(void)
 361          //{
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 7   

 362          //  #ifndef Function_EventLog
 363          //            return;
 364          //  #else
 365          //  uint16_t LogID,i;
 366          //  Log_t TempLog; 
 367          
 368          //  if ( LogMgr.LastPoint >0 )
 369          //  {
 370          //    LogID = LogMgr.LastPoint-1;
 371          //  }
 372          //  else{
 373          //    LogID = 511;
 374          //  }
 375          
 376          //  CheckEventLogByDateMgr.MatchedEventLogNum = 0;
 377          //  
 378          //  for (i=0;i<DEF_MaxSearchLogID;i++)
 379          //  {
 380          //    LogMgr_ReadLog(LogID,&TempLog.FlagHighByte);
 381          //    if (  (TempLog.FlagHighByte == DEF_LogFlagHighByte)
 382          //        &&(TempLog.FlagLowByte == DEF_LogFlagLowByte)
 383          //        &&(TempLog.year == CheckEventLogByDateMgr.year)
 384          //        &&(TempLog.month == CheckEventLogByDateMgr.month)
 385          //        &&(TempLog.date == CheckEventLogByDateMgr.date)
 386          //      )
 387          //    { 
 388          //      if ( CheckEventLogByDateMgr.MatchedEventLogNum == 0 )
 389          //      {
 390          //        CheckEventLogByDateMgr.StartEventLogPoint = LogID;  //first matched Log, saved to start point memory
 391          //      }
 392          //      CheckEventLogByDateMgr.MatchedEventLogNum++;
 393          //    }
 394          //    else if ( (TempLog.FlagHighByte != DEF_LogFlagHighByte)
 395          //        ||(TempLog.FlagLowByte != DEF_LogFlagLowByte) )
 396          //    {
 397          //      break;
 398          //    }
 399          //    if (LogID>0)
 400          //    {
 401          //      LogID--;
 402          //    }
 403          //    else
 404          //    {
 405          //      if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
 406          //      {
 407          //        LogID = DEF_MaxRecordedLogID-1;
 408          //      }
 409          //      else
 410          //      {
 411          //        break;
 412          //      }
 413          //    }
 414          //  }
 415          //  #endif
 416          //}
 417          
 418          void LogMgr_Init(void)
 419          {
 420   1        #ifndef Function_EventLog
                          return;
                #else
 423   1        uint16_t LogID=0;
C51 COMPILER V9.60.0.0   LOG                                                               04/21/2023 14:26:38 PAGE 8   

 424   1        bit FirstLogIDmajor;
 425   1        bool_t OneTurn = bTRUE;
 426   1        Log_t TempLog; 
 427   1        LogMgr.LastPoint = 0x0000;
 428   1        LogMgr_ReadLog(LogID,&TempLog.FlagHighByte);
 429   1        FirstLogIDmajor = TempLog.LogOrType._Bit.LogIDmajor;
 430   1        LogMgr.NewLog.LogOrType._Bit.LogIDmajor = FirstLogIDmajor;
 431   1        
 432   1        for (LogID=0;LogID<DEF_MaxRecordedLogID;LogID++)
 433   1        {
 434   2          LogMgr_ReadLog(LogID,&TempLog.FlagHighByte);
 435   2          if  ( (TempLog.FlagHighByte == DEF_LogFlagHighByte)
 436   2              &&(TempLog.FlagLowByte == DEF_LogFlagLowByte) )
 437   2              //&&(TempLog.LogOrType._Bit.LogIDmajor == FirstLogIDmajor)  )
 438   2          {
 439   3            //Temp_LogIDmajor = TempLog.LogOrType._Bit.LogIDmajor;
 440   3            //LogMgr.NewLog.LogOrType._Bit.LogIDmajor = TempLog.LogOrType._Bit.LogIDmajor;
 441   3          }
 442   2          else
 443   2          {
 444   3            if( LogID == 0 )
 445   3            {
 446   4              LogMgr.NewLog.LogOrType._Bit.LogIDmajor = ~FirstLogIDmajor;
 447   4            }
 448   3            LogMgr.LastPoint = LogID;
 449   3            OneTurn = bFALSE;
 450   3            break;
 451   3          }
 452   2        }
 453   1        
 454   1        if( OneTurn == bTRUE )
 455   1        {
 456   2          LogMgr.LastPoint = 0;
 457   2          LogMgr.NewLog.LogOrType._Bit.LogIDmajor = ~FirstLogIDmajor;
 458   2        }
 459   1      
 460   1        DEBUG_MARK;
 461   1      
 462   1        #endif
 463   1      
 464   1      }
 465          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1568    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
