C51 COMPILER V9.60.0.0   KEY_SINONE                                                        04/25/2023 10:52:15 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEY_SINONE
OBJECT MODULE PLACED IN .\Objects\Key_SinOne.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Drivers\Protocol\Key_SinOne.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR
                    -(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;
                    -.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\Key_SinOne.lst) TABS(2) OBJECT
                    -(.\Objects\Key_SinOne.obj)

line level    source

   1          #include "KeyScan.h"
   2          #include "SensorMethod.h"
   3          #include "Project.h"
   4          
   5          uint8_t TouchKeyBuff[4]={0};
   6            
   7          #if defined ProjectIs_BarLock_S1728 || defined ProjectIs_BarLock_S8103 \
   8           || defined ProjectIs_BarLock_S8705 || defined ProjectIs_BarLock_S1732 \
   9           || defined ProjectIs_BarLock_S8706 || defined ProjectIs_BarLock_S7204 \
  10           || defined ProjectIs_BarLock_S9702
              uint16_t ValidKeyValue[]={0x0080,0x0020,0x0400,0x1000,0x0010,0x0100,0x2000,0x0008,0x0040,0x4000,0x0004,0x8
             -000};//0 1 2 3 4 5 6 7 8 9 * # 
              
              #elif defined ProjectIs_BarLock_S5514 || defined ProjectIs_BarLock_S9201 || defined ProjectIs_BarLock_S300
             -7
              uint16_t ValidKeyValue[]={0x0400,0x8000,0x0004,0x0010,0x4000,0x0008,0x0020,0x2000,0x0080,0x0040,0x1000,0x0
             -100};//0 1 2 3 4 5 6 7 8 9 * # 
              
              #elif defined ProjectIs_BarLock_S6902 || defined ProjectIs_BarLock_S7703  
              uint16_t ValidKeyValue[]={0x0004,0x0020,0x0400,0x1000,0x0040,0x0080,0x2000,0x0010,0x0100,0x4000,0x0008,0x8
             -000};//0 1 2 3 4 5 6 7 8 9 * #
              
              #elif defined ProjectIs_BarLock_S0608
              uint16_t ValidKeyValue[]={0x0080,0x8000,0x0400,0x0004,0x4000,0x2000,0x0008,0x1000,0x0040,0x0010,0x0100,0x0
             -020};//0 1 2 3 4 5 6 7 8 9 * #
              
              #elif defined ProjectIs_BarLock_S6431
  23          uint16_t ValidKeyValue[]={0x0400,0x0040,0x0020,0x0004,0x2000,0x1000,0x0008,0x0100,0x0010,0x4000,0x0080,0x8
             -000};
  24          
  25          #elif defined ProjectIs_BarLock_S3009
              uint16_t ValidKeyValue[]={0x1000,0x0040,0x0004,0x0008,0x8000,0x0020,0x0010,0x4000,0x0080,0x0100,0x2000,0x0
             -400};//0 1 2 3 4 5 6 7 8 9 * #
              
              #endif
  29          
  30          uint32_t KeyScanDrive()
  31          {
  32   1        uint32_t TK_Value;
  33   1        uint8_t i;
  34   1        
  35   1        if( SOCAPI_TouchKeyStatus & 0x40 )  // bit6-半轮扫描完成标志  1:完成  0：未完成
  36   1        {
  37   2          SOCAPI_TouchKeyStatus &= 0xBF;  //清半轮扫描标志位
  38   2          TouchKeyRestart();
  39   2        }
  40   1        else
  41   1        {
  42   2          if( SOCAPI_TouchKeyStatus & 0x80 )  //bit7-一轮扫描完成标志  1:完成   0：未完成
  43   2          {
  44   3            TK_Value = TouchKeyScan();
  45   3            SOCAPI_TouchKeyStatus &= 0x7F;    //清一轮扫描标志位
C51 COMPILER V9.60.0.0   KEY_SINONE                                                        04/25/2023 10:52:15 PAGE 2   

  46   3            for(i=0; i<4; i++)
  47   3            {
  48   4              TouchKeyBuff[i] = TK_Value >> (24-(8*i));
  49   4            }
  50   3            if( TK_Value!=0 )
  51   3            {
  52   4              TK_Value = TK_Value;
  53   4            }
  54   3            
  55   3            TouchKeyRestart();
  56   3          }
  57   2        }
  58   1        return TK_Value;
  59   1      }
  60          
  61          void KeyPressedJudge(uint32_t InputKeyValue)
  62          {
  63   1        uint16_t InputValidKeyValue;
  64   1        uint8_t i;
  65   1        uint8_t TK_Flag;
  66   1        
  67   1        InputValidKeyValue = InputKeyValue;
  68   1        
  69   1      
  70   1        
  71   1        for(i=0;i<12;i++)
  72   1        {
  73   2          TK_Flag = 0;
  74   2          if( (InputValidKeyValue & ValidKeyValue[i]) > 0 )
  75   2          {
  76   3            TK_Flag = 1;
  77   3          }
  78   2          switch(i)
  79   2          {
  80   3            case 0:
  81   3              if( TK_Flag )
  82   3              {
  83   4                TouchKeyStatus.KEY_ZERO_Pressed = bTRUE;
  84   4              }
  85   3              else
  86   3              {
  87   4                TouchKeyStatus.KEY_ZERO_Pressed = bFALSE;
  88   4              }
  89   3              break;
  90   3                
  91   3            case 1:
  92   3              if( TK_Flag )
  93   3              {
  94   4                TouchKeyStatus.KEY_ONE_Pressed = bTRUE;
  95   4              }
  96   3              else
  97   3              {
  98   4                TouchKeyStatus.KEY_ONE_Pressed = bFALSE;
  99   4              }
 100   3              break;
 101   3                
 102   3            case 2:
 103   3              if( TK_Flag )
 104   3              {
 105   4                TouchKeyStatus.KEY_TWO_Pressed = bTRUE;
 106   4              }
 107   3              else
C51 COMPILER V9.60.0.0   KEY_SINONE                                                        04/25/2023 10:52:15 PAGE 3   

 108   3              {
 109   4                TouchKeyStatus.KEY_TWO_Pressed = bFALSE;
 110   4              }
 111   3              break;
 112   3                
 113   3            case 3:
 114   3              if( TK_Flag )
 115   3              {
 116   4                TouchKeyStatus.KEY_THREE_Pressed = bTRUE;
 117   4              }
 118   3              else
 119   3              {
 120   4                TouchKeyStatus.KEY_THREE_Pressed = bFALSE;
 121   4              }
 122   3              break;
 123   3                
 124   3            case 4:
 125   3              if( TK_Flag )
 126   3              {
 127   4                TouchKeyStatus.KEY_FOUR_Pressed = bTRUE;
 128   4              }
 129   3              else
 130   3              {
 131   4                TouchKeyStatus.KEY_FOUR_Pressed = bFALSE;
 132   4              }
 133   3              break;
 134   3                
 135   3            case 5:
 136   3              if( TK_Flag )
 137   3              {
 138   4                TouchKeyStatus.KEY_FIVE_Pressed = bTRUE;
 139   4              }
 140   3              else
 141   3              {
 142   4                TouchKeyStatus.KEY_FIVE_Pressed = bFALSE;
 143   4              }
 144   3              break;
 145   3                
 146   3            case 6:
 147   3              if( TK_Flag )
 148   3              {
 149   4                TouchKeyStatus.KEY_SIX_Pressed = bTRUE;
 150   4              }
 151   3              else
 152   3              {
 153   4                TouchKeyStatus.KEY_SIX_Pressed = bFALSE;
 154   4              }
 155   3              break;
 156   3                
 157   3            case 7:
 158   3              if( TK_Flag )
 159   3              {
 160   4                TouchKeyStatus.KEY_SEVEN_Pressed = bTRUE;
 161   4              }
 162   3              else
 163   3              {
 164   4                TouchKeyStatus.KEY_SEVEN_Pressed = bFALSE;
 165   4              }
 166   3              break;
 167   3                
 168   3            case 8:
 169   3              if( TK_Flag )
C51 COMPILER V9.60.0.0   KEY_SINONE                                                        04/25/2023 10:52:15 PAGE 4   

 170   3              {
 171   4                TouchKeyStatus.KEY_EIGHT_Pressed = bTRUE;
 172   4              }
 173   3              else
 174   3              {
 175   4                TouchKeyStatus.KEY_EIGHT_Pressed = bFALSE;
 176   4              }
 177   3              break;
 178   3                
 179   3            case 9:
 180   3              if( TK_Flag )
 181   3              {
 182   4                TouchKeyStatus.KEY_NINE_Pressed = bTRUE;
 183   4              }
 184   3              else
 185   3              {
 186   4                TouchKeyStatus.KEY_NINE_Pressed = bFALSE;
 187   4              }
 188   3              break;
 189   3                
 190   3            case 10:
 191   3              if( TK_Flag )
 192   3              {
 193   4                TouchKeyStatus.KEY_ASTERISK_Pressed = bTRUE;
 194   4              }
 195   3              else
 196   3              {
 197   4                TouchKeyStatus.KEY_ASTERISK_Pressed = bFALSE;
 198   4              }
 199   3              break;
 200   3                
 201   3            case 11:
 202   3              if( TK_Flag )
 203   3              {
 204   4                TouchKeyStatus.KEY_POUNDSIGN_Pressed = bTRUE;
 205   4              }
 206   3              else
 207   3              {
 208   4                TouchKeyStatus.KEY_POUNDSIGN_Pressed = bFALSE;
 209   4              }
 210   3              break;
 211   3      
 212   3            default:
 213   3              break;
 214   3          }
 215   2        }
 216   1      }
 217          
 218          void Touch_Init(void)
 219          {
 220   1        TouchKeyInit();
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    443    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     28       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   KEY_SINONE                                                        04/25/2023 10:52:15 PAGE 5   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
