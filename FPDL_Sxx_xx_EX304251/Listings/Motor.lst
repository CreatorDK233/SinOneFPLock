C51 COMPILER V9.60.0.0   MOTOR                                                             04/24/2023 17:07:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\Motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\ModuleLogic\Motor.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR
                    -(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;
                    -.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\Motor.lst) TABS(2) OBJECT(.\Ob
                    -jects\Motor.obj)

line level    source

   1          #include "Motor.h"
   2          #include "IO.h"
   3          #include "global_variable.h"
   4          #include "Basic_Function.h"
   5          
   6          /********************************************************************************************************
   7          *  Function:                                                                   
   8          *  Object: 
   9          *  输入： 无
  10          *  输出： 无                                       
  11          *  备注:  无
  12          ********************************************************************************************************/
  13          uint8_t Hardware_MotorDriverTimeCompasention(void)
  14          {
  15   1        uint8_t CompasentionTime;
  16   1        if ( BatteryMgr.BatteryVoltage > 58 ) //if battery voltage more than 5.8V
  17   1        {
  18   2          CompasentionTime = 0;
  19   2        }
  20   1        else if ( BatteryMgr.BatteryVoltage < 45 ) //if battery voltage less than 4.5v
  21   1        {
  22   2          CompasentionTime = 6;   //6*16 = 96ms
  23   2        }
  24   1        else
  25   1        {
  26   2          CompasentionTime = (58-BatteryMgr.BatteryVoltage)/2;  //from 0~96ms
  27   2        }
  28   1      
  29   1        return CompasentionTime;
  30   1      }
  31          /********************************************************************************************************
  32          *  Function:  GUI_SetMotorToOpenAndCloseDoor(void)                                                           
             -      
  33          *  Object: 
  34          *  输入： 无
  35          *  输出： 无                                       
  36          *  备注:  GUI控制电机开/关门
  37          ********************************************************************************************************/
  38          void GUI_SetMotorToOpenAndCloseDoor(void)
  39          {
  40   1        if ( (UserIdentifyResultMgr.UnlockingMode == SingalMode)||(UserIdentifyResultMgr.UnlockingMode == DoubleM
             -ode) )
  41   1        {
  42   2          if ( MotorMgr.MotorStatus == IDLE )
  43   2          {
  44   3            if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
  45   3            { 
  46   4              UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
  47   4            }
  48   3              MotorMgr.CWTimer = Def_MotorCWTime+Hardware_MotorDriverTimeCompasention();
  49   3              MotorMgr.CWWAITTimer =  Def_MotorCWWAITTime;  
  50   3              MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
C51 COMPILER V9.60.0.0   MOTOR                                                             04/24/2023 17:07:23 PAGE 2   

  51   3              MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
  52   3              MotorMgr.MotorStatus = CW;
  53   3              MotorMgr.CWSoftStart = bTRUE;
  54   3              MotorMgr.CCWSoftStart = bTRUE;
  55   3          }
  56   2        }
  57   1      }
  58          /********************************************************************************************************
  59          *  Function:  GUI_MotorAgingTest(void)                                                                 
  60          *  Object: 
  61          *  输入： 无
  62          *  输出： 无                                       
  63          *  备注:  老化测试电机部分
  64          ********************************************************************************************************/
  65          void GUI_MotorAgingTest(void)
  66          {
  67   1        if (  ( MotorMgr.MotorStatus == IDLE )
  68   1            &&(AgingTestMgr.TestTimes < 5000 )
  69   1          )
  70   1        {
  71   2          MotorMgr.MotorStatus = CW;
  72   2          MotorMgr.CWTimer = Def_MotorCWTime+Hardware_MotorDriverTimeCompasention();
  73   2          MotorMgr.CWWAITTimer =  32; 
  74   2          MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
  75   2          MotorMgr.CCWWAITTimer =  32;  
  76   2          AgingTestMgr.TestTimes++;
  77   2          MotorMgr.CWSoftStart = bTRUE;
  78   2          MotorMgr.CCWSoftStart = bTRUE;
  79   2        }
  80   1      
  81   1        if (MotorMgr.MotorStatus == CW)
  82   1        {
  83   2          //Enable_KEYLED_WATERLIGHT(); 
  84   2        }
  85   1      }
  86          /********************************************************************************************************
  87          *  Function:  GUI_MotorContinueOpen(void)                                                                
  88          *  Object: 
  89          *  输入： 无
  90          *  输出： 无                                       
  91          *  备注:  开常开模式电机配置
  92          ********************************************************************************************************/
  93          void GUI_MotorContinueOpen(void)
  94          {
  95   1        MotorMgr.CWTimer = Def_MotorCWTime+Hardware_MotorDriverTimeCompasention();
  96   1        MotorMgr.CWWAITTimer =  Def_MotorCCWTime; 
  97   1        MotorMgr.CCWTimer = 0;
  98   1        MotorMgr.CCWWAITTimer =  0; 
  99   1        MotorMgr.MotorStatus = CW;  
 100   1        MotorMgr.CWSoftStart = bTRUE;
 101   1      }
 102          /********************************************************************************************************
 103          *  Function:                                                                   
 104          *  Object: 
 105          *  输入： 无
 106          *  输出： 无                                       
 107          *  备注:  无
 108          ********************************************************************************************************/
 109          void Hardware_MotorMgr_Init( void )
 110          {
 111   1        MotorMgr.CWTimer = 0;
 112   1        MotorMgr.CWWAITTimer = 0;
C51 COMPILER V9.60.0.0   MOTOR                                                             04/24/2023 17:07:23 PAGE 3   

 113   1        MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();  
 114   1          MotorMgr.CCWWAITTimer = Def_MotorCCWWAITTime;   // Reset motor when power on
 115   1        MotorMgr.MotorStatus = CCW;
 116   1        MotorMgr.CCWSoftStart = bTRUE;
 117   1      }
 118          /********************************************************************************************************
 119          *  Function:                                                                   
 120          *  Object: 
 121          *  输入： 无
 122          *  输出： 无                                       
 123          *  备注:  无,TEST
 124          ********************************************************************************************************/
 125          void Hardware_MotorMgr_Task( void )
 126          {
 127   1        uint16_t i;
 128   1        if ( MotorMgr.MotorStatus == CW )
 129   1        {
 130   2          if ( MotorMgr.CWTimer > 0 )
 131   2          {
 132   3            MotorMgr.CWTimer--;
 133   3          }
 134   2          else
 135   2          {
 136   3            if ( MotorMgr.CWWAITTimer > 0 )
 137   3            {
 138   4              MotorMgr.MotorStatus = CWWAIT;
 139   4            }
 140   3            else
 141   3            {
 142   4              MotorMgr.MotorStatus = IDLE;
 143   4            }
 144   3          }
 145   2        }
 146   1        else if ( MotorMgr.MotorStatus == CWWAIT )
 147   1        {
 148   2          if ( MotorMgr.CWWAITTimer > 0 )
 149   2          {
 150   3            MotorMgr.CWWAITTimer--; 
 151   3          }
 152   2          else 
 153   2          {
 154   3            if ( MotorMgr.CCWTimer > 0 ){
 155   4              MotorMgr.MotorStatus = CCW;
 156   4            }
 157   3            else
 158   3            {
 159   4              MotorMgr.MotorStatus = IDLE;
 160   4            }
 161   3          }
 162   2        } 
 163   1        else if ( MotorMgr.MotorStatus == CCW )
 164   1        {
 165   2          if ( MotorMgr.CCWTimer > 0 )
 166   2          {
 167   3            MotorMgr.CCWTimer--;
 168   3          }
 169   2          else
 170   2          {
 171   3            if ( MotorMgr.CCWWAITTimer > 0 ){
 172   4              MotorMgr.MotorStatus = CCWWAIT;
 173   4            }
 174   3            else
C51 COMPILER V9.60.0.0   MOTOR                                                             04/24/2023 17:07:23 PAGE 4   

 175   3            {
 176   4              MotorMgr.MotorStatus = IDLE;
 177   4            }
 178   3          }
 179   2        }
 180   1        else if ( MotorMgr.MotorStatus == CCWWAIT )
 181   1        {
 182   2          if ( MotorMgr.CCWWAITTimer > 0 )
 183   2          {
 184   3            MotorMgr.CCWWAITTimer--;
 185   3          }
 186   2          else
 187   2          {
 188   3            MotorMgr.MotorStatus = IDLE;
 189   3          }
 190   2        }
 191   1        else
 192   1        {
 193   2          MotorMgr.MotorStatus = IDLE;
 194   2        }
 195   1        
 196   1        if ( MotorMgr.MotorStatus == CCW )
 197   1        { 
 198   2          SET_MOTOR_INA_L;
 199   2          if ( MotorMgr.CCWSoftStart == bTRUE )
 200   2          {
 201   3            for (i=0;i<200;i++)
 202   3            {
 203   4              SET_MOTOR_INB_H;
 204   4              Hardware_DelayX1us(i);
 205   4              SET_MOTOR_INB_L;
 206   4              Hardware_DelayX1us(200-i);
 207   4            }
 208   3            MotorMgr.CCWSoftStart = bFALSE;
 209   3            SET_MOTOR_INB_H;
 210   3          }
 211   2          else
 212   2          {
 213   3            SET_MOTOR_INB_H;
 214   3          }
 215   2          DEBUG_MARK;
 216   2        }
 217   1        else if ( MotorMgr.MotorStatus == CW )
 218   1        {
 219   2          SET_MOTOR_INB_L;
 220   2          if ( MotorMgr.CWSoftStart == bTRUE )
 221   2          {
 222   3            for (i=0;i<200;i++)
 223   3            {
 224   4              SET_MOTOR_INA_H;
 225   4              Hardware_DelayX1us(i);
 226   4              SET_MOTOR_INA_L;
 227   4              Hardware_DelayX1us(200-i);
 228   4            }
 229   3            MotorMgr.CWSoftStart = bFALSE;
 230   3            SET_MOTOR_INA_H;
 231   3          }
 232   2          else
 233   2          {
 234   3            SET_MOTOR_INA_H;
 235   3          }
 236   2          DEBUG_MARK;
C51 COMPILER V9.60.0.0   MOTOR                                                             04/24/2023 17:07:23 PAGE 5   

 237   2        }
 238   1        else if ( MotorMgr.MotorStatus == CWWAIT )
 239   1        {
 240   2          SET_MOTOR_INA_H;
 241   2          SET_MOTOR_INB_H;
 242   2          DEBUG_MARK;
 243   2        }
 244   1        else if ( MotorMgr.MotorStatus == CCWWAIT )
 245   1        {
 246   2          SET_MOTOR_INA_H;
 247   2          SET_MOTOR_INB_H;
 248   2          DEBUG_MARK;
 249   2        }
 250   1        else
 251   1        {
 252   2          SET_MOTOR_INA_L;
 253   2          SET_MOTOR_INB_L;
 254   2          DEBUG_MARK;
 255   2        }
 256   1      }
 257          
 258          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    681    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
