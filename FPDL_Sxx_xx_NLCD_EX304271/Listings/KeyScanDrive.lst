C51 COMPILER V9.60.0.0   KEYSCANDRIVE                                                      02/09/2023 16:54:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEYSCANDRIVE
OBJECT MODULE PLACED IN .\Objects\KeyScanDrive.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Drivers\Protocol\KeyScanDrive.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCD
                    -IR(.\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protoco
                    -l;.\Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\KeyScanDrive.lst) TABS(2) OB
                    -JECT(.\Objects\KeyScanDrive.obj)

line level    source

   1          #include "KeyScanDrive.h"
   2          #include "KeyScan.h"
   3          #include "SensorMethod.h"
   4          #include "Project.h"
   5          
   6          uint8_t TouchKeyBuff[4]={0};
   7            
   8          #if (defined ProjectIs_BarLock_S1728) || (defined ProjectIs_BarLock_S8103) || (defined ProjectIs_BarLock_S
             -8705)
   9          uint16_t ValidKeyValue[]={0x0080,0x0020,0x0400,0x1000,0x0010,0x0100,0x2000,0x0008,0x0040,0x4000,0x0004,0x8
             -000};//0 1 2 3 4 5 6 7 8 9 * # 
  10          
  11          #elif defined ProjectIs_BarLock_S5514 || defined ProjectIs_BarLock_S9201
              uint16_t ValidKeyValue[]={0x0400,0x8000,0x0004,0x0010,0x4000,0x0008,0x0020,0x2000,0x0080,0x0040,0x1000,0x0
             -100};//0 1 2 3 4 5 6 7 8 9 * # 
              
              #elif (defined ProjectIs_BarLock_S6902) || (defined ProjectIs_BarLock_S7703)  
              uint16_t ValidKeyValue[]={0x0004,0x0020,0x0400,0x1000,0x0040,0x0080,0x2000,0x0010,0x0100,0x4000,0x0008,0x8
             -000};//0 1 2 3 4 5 6 7 8 9 * #
              
              #elif defined ProjectIs_BarLock_S0607
              uint16_t ValidKeyValue[]={0x0080,0x8000,0x0400,0x0004,0x4000,0x2000,0x0008,0x1000,0x0040,0x0010,0x0100,0x0
             -020};//0 1 2 3 4 5 6 7 8 9 * #
              #endif
  20          
  21          uint32_t KeyScanDrive()
  22          {
  23   1        uint32_t TK_Value;
  24   1        //uint32_t TK_ValueBuff;
  25   1        uint8_t i;
  26   1        
  27   1        if( SOCAPI_TouchKeyStatus & 0x40 )  // bit6-半轮扫描完成标志  1:完成  0：未完成
  28   1        {
  29   2          SOCAPI_TouchKeyStatus &= 0xBF;  //清半轮扫描标志位
  30   2          TouchKeyRestart();
  31   2        }
  32   1        else
  33   1        {
  34   2          if( SOCAPI_TouchKeyStatus & 0x80 )  //bit7-一轮扫描完成标志  1:完成   0：未完成
  35   2          {
  36   3            TK_Value = TouchKeyScan();
  37   3            //TK_ValueBuff = TK_Value;
  38   3            SOCAPI_TouchKeyStatus &= 0x7F;    //清一轮扫描标志位
  39   3            for(i=0; i<4; i++)
  40   3            {
  41   4              TouchKeyBuff[i] = TK_Value >> (24-(8*i));
  42   4            }
  43   3            TouchKeyRestart();
  44   3          }
  45   2        }
  46   1        return TK_Value;
  47   1      }
C51 COMPILER V9.60.0.0   KEYSCANDRIVE                                                      02/09/2023 16:54:07 PAGE 2   

  48          
  49          void KeyPressedJudge(uint32_t InputKeyValue)
  50          {
  51   1        uint16_t InputValidKeyValue;
  52   1        uint8_t i;
  53   1        uint8_t TK_Flag;
  54   1        
  55   1        InputValidKeyValue = InputKeyValue;
  56   1        
  57   1      
  58   1        
  59   1        for(i=0;i<12;i++)
  60   1        {
  61   2          TK_Flag = 0;
  62   2          if( (InputValidKeyValue & ValidKeyValue[i]) > 0 )
  63   2          {
  64   3            TK_Flag = 1;
  65   3          }
  66   2          switch(i)
  67   2          {
  68   3            case 0:
  69   3              if( TK_Flag )
  70   3              {
  71   4                TouchKeyStatus.KEY_ZERO_Pressed = bTRUE;
  72   4              }
  73   3              else
  74   3              {
  75   4                TouchKeyStatus.KEY_ZERO_Pressed = bFALSE;
  76   4              }
  77   3              break;
  78   3                
  79   3            case 1:
  80   3              if( TK_Flag )
  81   3              {
  82   4                TouchKeyStatus.KEY_ONE_Pressed = bTRUE;
  83   4              }
  84   3              else
  85   3              {
  86   4                TouchKeyStatus.KEY_ONE_Pressed = bFALSE;
  87   4              }
  88   3              break;
  89   3                
  90   3            case 2:
  91   3              if( TK_Flag )
  92   3              {
  93   4                TouchKeyStatus.KEY_TWO_Pressed = bTRUE;
  94   4              }
  95   3              else
  96   3              {
  97   4                TouchKeyStatus.KEY_TWO_Pressed = bFALSE;
  98   4              }
  99   3              break;
 100   3                
 101   3            case 3:
 102   3              if( TK_Flag )
 103   3              {
 104   4                TouchKeyStatus.KEY_THREE_Pressed = bTRUE;
 105   4              }
 106   3              else
 107   3              {
 108   4                TouchKeyStatus.KEY_THREE_Pressed = bFALSE;
 109   4              }
C51 COMPILER V9.60.0.0   KEYSCANDRIVE                                                      02/09/2023 16:54:07 PAGE 3   

 110   3              break;
 111   3                
 112   3            case 4:
 113   3              if( TK_Flag )
 114   3              {
 115   4                TouchKeyStatus.KEY_FOUR_Pressed = bTRUE;
 116   4              }
 117   3              else
 118   3              {
 119   4                TouchKeyStatus.KEY_FOUR_Pressed = bFALSE;
 120   4              }
 121   3              break;
 122   3                
 123   3            case 5:
 124   3              if( TK_Flag )
 125   3              {
 126   4                TouchKeyStatus.KEY_FIVE_Pressed = bTRUE;
 127   4              }
 128   3              else
 129   3              {
 130   4                TouchKeyStatus.KEY_FIVE_Pressed = bFALSE;
 131   4              }
 132   3              break;
 133   3                
 134   3            case 6:
 135   3              if( TK_Flag )
 136   3              {
 137   4                TouchKeyStatus.KEY_SIX_Pressed = bTRUE;
 138   4              }
 139   3              else
 140   3              {
 141   4                TouchKeyStatus.KEY_SIX_Pressed = bFALSE;
 142   4              }
 143   3              break;
 144   3                
 145   3            case 7:
 146   3              if( TK_Flag )
 147   3              {
 148   4                TouchKeyStatus.KEY_SEVEN_Pressed = bTRUE;
 149   4              }
 150   3              else
 151   3              {
 152   4                TouchKeyStatus.KEY_SEVEN_Pressed = bFALSE;
 153   4              }
 154   3              break;
 155   3                
 156   3            case 8:
 157   3              if( TK_Flag )
 158   3              {
 159   4                TouchKeyStatus.KEY_EIGHT_Pressed = bTRUE;
 160   4              }
 161   3              else
 162   3              {
 163   4                TouchKeyStatus.KEY_EIGHT_Pressed = bFALSE;
 164   4              }
 165   3              break;
 166   3                
 167   3            case 9:
 168   3              if( TK_Flag )
 169   3              {
 170   4                TouchKeyStatus.KEY_NINE_Pressed = bTRUE;
 171   4              }
C51 COMPILER V9.60.0.0   KEYSCANDRIVE                                                      02/09/2023 16:54:07 PAGE 4   

 172   3              else
 173   3              {
 174   4                TouchKeyStatus.KEY_NINE_Pressed = bFALSE;
 175   4              }
 176   3              break;
 177   3                
 178   3            case 10:
 179   3              if( TK_Flag )
 180   3              {
 181   4                TouchKeyStatus.KEY_ASTERISK_Pressed = bTRUE;
 182   4              }
 183   3              else
 184   3              {
 185   4                TouchKeyStatus.KEY_ASTERISK_Pressed = bFALSE;
 186   4              }
 187   3              break;
 188   3                
 189   3            case 11:
 190   3              if( TK_Flag )
 191   3              {
 192   4                TouchKeyStatus.KEY_POUNDSIGN_Pressed = bTRUE;
 193   4              }
 194   3              else
 195   3              {
 196   4                TouchKeyStatus.KEY_POUNDSIGN_Pressed = bFALSE;
 197   4              }
 198   3              break;
 199   3      
 200   3            default:
 201   3              break;
 202   3          }
 203   2        }
 204   1      }
 205          
 206          void Touch_Init(void)
 207          {
 208   1        TouchKeyInit();
 209   1      }
 210          
 211          /*void SET_TOUCH_SCAN_PAUSE(void)
 212          {
 213          
 214          }
 215          void SET_TOUCH_SCAN_RESUME(void)
 216          {
 217          
 218          }
 219          
 220          void SET_TOUCH_NO_SENSING(void)
 221          {
 222            //SET_CSK14_NO_SENSING();
 223          }
 224          void SET_TOUCH_SLEEP_SENSITIVITY(void)
 225          {
 226            //SET_CSK14_SLEEP_SENSITIVITY();
 227          }
 228          void SET_TOUCH_AWAKE_SENSITIVITY(void)
 229          {
 230            //SET_CSK14_AWAKE_SENSITIVITY();
 231          }
 232          void TOUCH_POWERDOWN(void)
 233          {
C51 COMPILER V9.60.0.0   KEYSCANDRIVE                                                      02/09/2023 16:54:07 PAGE 5   

 234            //CSK14_POWERDOWN();
 235          }
 236          void TOUCH_AWAKE(void)
 237          {
 238            //CSK14_AWAKE();
 239          }*/
 240          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    409    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     28       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
