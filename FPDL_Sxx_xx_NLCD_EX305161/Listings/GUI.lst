C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic;.\Drivers\Protocol\YC_NFC;.\Drivers\Protocol\WIFI_Tuya) 
                    -DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Objects\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          #include "TuyaWIFI.h"
   8          //Logic layer
   9          #include "AppUnlock.h"
  10          #include "KeyScan.h"
  11          #include "Motor.h"
  12          #include "Log.h"
  13          #include "FP.h"
  14          #include "LCD.h"
  15          #include "MFC.h"
  16          #include "RTC.h"
  17          //Application layer
  18          #include "GUI.h"
  19          #include "GUI_Function.h"
  20          #include "Basic_Function.h"
  21          #include "Voice_Menu.h"
  22          #include "Font_Menu.h"
  23          #include "Font.h"
  24          
  25          struct
  26          {
  27            enum{
  28              SetYearMajor=0,
  29              SetYearMinor=1,
  30              SetMonthMajor,
  31              SetMonthMinor,
  32              SetDateMajor,
  33              SetDateMinor,
  34              SetHourMajor,
  35              SetHourMinor,
  36              SetMinuteMajor,
  37              SetMinuteMinor,
  38              SetSecondMajor,
  39              SetSecondMinor
  40            }Status;
  41          
  42          }TimeSettingMgr;
  43          
  44          screen_t LastScreen;
  45          VoiceMenuMgr_t VoiceMenuMgr;
  46          DataInputMgr_t DataInputMgr;
  47          PasscodeInputMgr_t PasscodeInputMgr;
  48          uint8_t GUI_TimeCnt;
  49          uint8_t GUI_ToggleFlag_1s;
  50          uint8_t GUI_ToggleFlag_05s;
  51          bool_t GUI_Flag_RefreshLCD;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 2   

  53          keycode_t gui_keycode = KEY_NONE;
  54          
  55          uint8_t PasscodeBUFF1[12];
  56          
  57          /*******************************************************/
  58          /*******************************************************
  59          /*******************************************************/
  60          void ShowIdentifySuccessPage(void)//认证成功页面
  61          {
  62   1        #ifdef Function_ScreenDisplay
                uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
                uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
                uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
              //  uint8_t InitialStatusStrEn[]={"Initial"};
                #endif  
  70   1      
  71   1        if ( MotorMgr.MotorStatus != IDLE )
  72   1        {
  73   2          #ifdef Function_ScreenDisplay
                  DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
                  
                  if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
                    {
                        DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
                        DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    else*/
                    {
                      DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
                      DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
                  {
                    
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 3   

                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
                  {
                  
                      DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
                  }
                  DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
                  
                  #endif 
 138   2          
 139   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 140   2          {
 141   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 142   3            
 143   3            #ifdef Function_TuyaWifi
                    if( UserIdentifyResultMgr.IdentifyType == WIFITEMPPASSCODE )
                    {
                      WifiMgr.PostMgr.Flag.Bits.TempPasswordUnlock = 1;
                    }
                    else if( UserIdentifyResultMgr.IdentifyType != RemoteUnlock )
                    {
                      WifiMgr.PostMgr.Flag.Bits.Unlock = 1;
                    }
                    #endif
 153   3            
 154   3            #ifdef Function_FPMbreathingLed
 155   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 156   3            //{
 157   3              SetFPMbreathingLed(FPMbreathingLed_Green);
 158   3            //}
 159   3            #endif  
 160   3                  
 161   3          }
 162   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 163   2          {
 164   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 165   3            {
 166   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 167   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 168   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 169   4              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(OpenDoor);
                      #endif
 172   4            }
 173   3            else if ( MotorMgr.CCWWAITTimer == 1)
 174   3            {
 175   4              //EMAGNET_RelaseTrigger();
 176   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 4   

 177   3          }
 178   2        }
 179   1        else
 180   1        {
 181   2          #ifdef Function_ScreenDisplay
                  GUI_Flag_RefreshLCD = bTRUE;
                  DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
                    DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
                  #endif
 186   2          
 187   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 188   2          {
 189   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 190   3            {
 191   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 192   4            }
 193   3            UserIdentifyResultMgr.TimeCnt--;
 194   3          }
 195   2          else
 196   2          {
 197   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 198   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 199   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 200   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 201   3            CardIdentifyMgr.Status = ReadingCardID;
 202   3            FpIdentifyMgr.Status = FPMcmdStart;
 203   3            CurrentScreen = SCREEN_Main;  
 204   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 205   3            
 206   3      //      #ifdef Function_FPMbreathingLed
 207   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 208   3      //      #endif  
 209   3          }
 210   2        }
 211   1      
 212   1      }
 213          /*******************************************************/
 214          /*******************************************************/
 215          /*******************************************************/
 216          void ShowIdentifyFailPage(void)//认证失败页面
 217          {
 218   1        #ifdef Function_ScreenDisplay
                DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
                
                if ( UserIdentifyResultMgr.IdentifyType == CARD )
                {
                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                {
                  if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
                  {
                    DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
                    DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
                  }
                  else
                  {
                    DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                  }
                }
                else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 5   

                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                #endif
 242   1        
 243   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 244   1        {
 245   2          #ifdef Function_FPMbreathingLed
 246   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 247   2          //{
 248   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 249   2          //}
 250   2          #endif
 251   2          #ifdef Function_TuyaWifi
                  WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                  if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    WifiMgr.PostMgr.AlarmType = FingerErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    WifiMgr.PostMgr.AlarmType = PasswordErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    WifiMgr.PostMgr.AlarmType = CardErrorAlarm;
                  }
                  #endif
 266   2        }
 267   1      
 268   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 269   1        {
 270   2          UserIdentifyResultMgr.TimeCnt--;
 271   2        }
 272   1        else
 273   1        {
 274   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 275   2          CardIdentifyMgr.Status = ReadingCardID;
 276   2          FpIdentifyMgr.Status = FPMcmdStart;
 277   2          CurrentScreen = SCREEN_Main;
 278   2          RefreshSystemSleepTime();
 279   2          
 280   2          #ifdef Function_FPMbreathingLed
 281   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 282   2          #endif
 283   2        }
 284   1      }
 285          
 286          /*******************************************************/
 287          /*******************************************************/
 288          /*******************************************************/
 289          void DisplayMainPage(void)//界面_主页面
 290          {
 291   1        #ifdef Function_ScreenDisplay
                code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
              //  code uint8_t Str1En[]={"Sys without"};
                code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t Str2En[]={"admin."};
                code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t Str3En[]={"Input 2nd ID"};
                code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 6   

             -HZ_end};
              //  code uint8_t Str4En[]={"Press # to menu"};
              
                uint8_t Empty32X20[80]={
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                };
              
                DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
                DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
                DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
                DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
                DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
                  
                  if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
                  {
                    if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
                        ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
                      )
                    {
                      DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                      
                    else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisHZ16x14Str(3,4,Str4,NormalDisplay);          
                    }
                    
                    else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
                    {
                      Clear_Screen_Page(2);
                      Clear_Screen_Page(3);
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
                      DisHZ16x14Str(2,40,Str1,NormalDisplay);
                      DisHZ16x14Str(4,40,Str2,NormalDisplay);
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                    else
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
                      DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
              //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        if (GUI_ToggleFlag_05s == 0 )
                        {
                          DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
                        }
                        else
                        {
                          DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        }
                    }
                    //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 7   

                    ShowLockBrand();
                  }
                #endif
 365   1      }
 366          
 367          /*******************************************************/
 368          void GUI_UpadteMain(void)//GUI_主界面
 369          {
 370   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 371   1        {
 372   2          CurrentScreen = SCREEN_SystemLocked;
 373   2          #ifdef Function_FPMbreathingLed
 374   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 375   2          #endif
 376   2        }
 377   1        
 378   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 379   1        {
 380   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 381   2          CardUserIdentify();
 382   2        }
 383   1      
 384   1        
 385   1        if ( CardIdentifyMgr.Status == Success)
 386   1        {
 387   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 388   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 389   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 390   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 391   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 392   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 393   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 394   2          {
 395   3            UnlockSuccess(CARD);
 396   3          }
 397   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 398   2          {
 399   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 400   3            {
 401   4              UnlockSuccess(CARDandPASSCODE);
 402   4            }
 403   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 404   3            { 
 405   4              UnlockSuccess(FINGERPRINTandCARD);
 406   4            }
 407   3            else{ 
 408   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 409   4              {
 410   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 411   5                //CardIdentifyMgr.Status = ReadingCardID;
 412   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 413   5              }
 414   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 415   4              {
 416   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 417   5                {
 418   6                  CardIdentifyMgr.Status = ReadingCardID;
 419   6                }
 420   5                UserIdentifyResultMgr.VoiceDelay--;
 421   5              }
 422   4            }
 423   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 8   

 424   2        }
 425   1        else if ( CardIdentifyMgr.Status == Fail)
 426   1        {
 427   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 428   2          {
 429   3      //      if ( (CardIdentifyMgr.CID[0] == 0x16)
 430   3      //        &&(CardIdentifyMgr.CID[1] == 0xD4)
 431   3      //        &&(CardIdentifyMgr.CID[2] == 0xDB)
 432   3      //        &&(CardIdentifyMgr.CID[3] == 0x3C) )
 433   3      //      {
 434   3      //        DEBUG_MARK;
 435   3      //        if ( LockBrand.BrandChangeTimeDelay == 0 )
 436   3      //        {
 437   3      //          WriteLockBrand();
 438   3      //          if ( LockBrand.GotBrandData == bTRUE )
 439   3      //          {
 440   3      //            DEBUG_MARK;
 441   3      //            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 442   3      //            LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 443   3      //            RefreshSystemSleepTime();
 444   3      //          }
 445   3      //        }
 446   3      //        CardIdentifyMgr.Status = ReadingCardID;
 447   3      //      }
 448   3      //      else
 449   3      //      {
 450   3              UnlockSuccess(INITIALSTATUS);
 451   3              RefreshSystemSleepTime();
 452   3      //      }
 453   3          }
 454   2          else
 455   2          {
 456   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 457   3            UserIdentifyResultMgr.IdentifyType = CARD;
 458   3            UserIdentifyResultMgr.CardUserID = 0x00;
 459   3            //Enable_KEYLED_IdentifyFail();
 460   3            CurrentScreen = SCREEN_IdentifyFail;
 461   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 462   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 463   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 464   3            {
 465   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 466   4            }
 467   3            else
 468   3            {
 469   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 470   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 471   4            }
 472   3          }
 473   2        }
 474   1      
 475   1        FpUserIdentify();
 476   1        if ( FpIdentifyMgr.Status == success)
 477   1        {
 478   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 479   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 480   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 481   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 482   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 483   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 484   2          {
 485   3            UnlockSuccess(FINGERPRINT);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 9   

 486   3          }
 487   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 488   2          {
 489   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 490   3            {
 491   4              UnlockSuccess(FINGERPRINTandCARD);
 492   4            }
 493   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 494   3            {
 495   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 496   4            }
 497   3            else
 498   3            {
 499   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 500   4              {
 501   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 502   5                //FpIdentifyMgr.Status = FPMcmdStart;
 503   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 504   5              }
 505   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 506   4              {
 507   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 508   5                {
 509   6                  FpIdentifyMgr.Status = FPMcmdStart;
 510   6                }
 511   5                UserIdentifyResultMgr.VoiceDelay--;
 512   5              }
 513   4            }
 514   3          }
 515   2        }
 516   1        else if ( FpIdentifyMgr.Status == fail)
 517   1        {
 518   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 519   2          {
 520   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 521   3          }
 522   2          else{
 523   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 524   3          }
 525   2          
 526   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 527   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 528   2            )
 529   2          {
 530   3            UnlockSuccess(INITIALSTATUS);
 531   3          }
 532   2          else
 533   2          {
 534   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 535   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 536   3            UserIdentifyResultMgr.FPUserID = 0x00;
 537   3            //Enable_KEYLED_IdentifyFail();
 538   3            CurrentScreen = SCREEN_IdentifyFail;
 539   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 540   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 541   3            
 542   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 543   3            {
 544   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 545   4            }
 546   3            else
 547   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 10  

 548   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 549   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 550   4            }
 551   3          
 552   3          }
 553   2      
 554   2        }
 555   1      
 556   1        PasscodeUserIdentify();
 557   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 558   1        {
 559   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 560   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 561   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 562   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 563   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 564   2          if ( (UserIdentifyResultMgr.UnlockingMode == SingalMode)
 565   2            || (UserIdentifyResultMgr.PasscodeType == AppPasscode)
 566   2            || (UserIdentifyResultMgr.PasscodeType == WifiTempPasscode) )
 567   2          {
 568   3            #ifdef Function_TuyaWifi
                    if(UserIdentifyResultMgr.PasscodeType == WifiTempPasscode){
                      UnlockSuccess(WIFITEMPPASSCODE);
                    }
                    else
                    #endif
 574   3            {
 575   4              UnlockSuccess(PASSCODE);
 576   4            }
 577   3          }
 578   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 579   2          {
 580   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 581   3            {
 582   4              UnlockSuccess(CARDandPASSCODE);
 583   4            }
 584   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 585   3            { 
 586   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 587   4            }
 588   3            else
 589   3            {
 590   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 591   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 592   4              UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 593   4            }
 594   3          }
 595   2        }
 596   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 597   1        {
 598   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 599   2          {
 600   3            UnlockSuccess(INITIALSTATUS);
 601   3          }
 602   2          else
 603   2          {
 604   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 605   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 606   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 607   3            //Enable_KEYLED_IdentifyFail();
 608   3            CurrentScreen = SCREEN_IdentifyFail;
 609   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 11  

 610   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 611   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 612   3            {
 613   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 614   4            }
 615   3            else
 616   3            {
 617   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 618   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 619   4            }
 620   3          }
 621   2        }
 622   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 623   1        {
 624   2          AgingTestMgr.TestTimes=0x0000;    
 625   2          CurrentScreen = SCREEN_AgingTest;
 626   2        }
 627   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 628   1        {
 629   2          GoToSystemVersion();
 630   2        }
 631   1        else if (PasscodeUserIdentifyMgr.Status == DeleteWifiTempPasscodeSuccess )
 632   1        {
 633   2          PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 634   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 635   2        }
 636   1        
 637   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 638   1        {
 639   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 640   2                ( (UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 641   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 642   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ) )
 643   2              )
 644   2          {
 645   3          }
 646   2        }
 647   1        #ifdef Function_TuyaWifi
                if( WifiMgr.WifiConnection.Status == JustConnected )
                {
                  WifiMgr.WifiConnection.Status = Connected;
                  //PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                }
                #endif
 654   1        #ifdef Function_ScreenDisplay
                  DisplayMainPage();
                #endif
 657   1      
 658   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 659   1        {
 660   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  #endif
 663   2          //SET_ALLKEYLED_OFF();
 664   2        }
 665   1        
 666   1      }
 667          
 668          /*******************************************************/
 669          void ShowDoorBell(void)
 670          {
 671   1        #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 12  

                DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
                #endif
 674   1        if ( DoorBellMgr.TimeCnt > 0 )
 675   1        {
 676   2          #ifdef Function_TuyaWifi
                  if( DoorBellMgr.TimeCnt == 150 )
                  {
                    WifiMgr.RemoteUnlockMgr.WaitRequestRemoteUnlock = bTRUE;
                  }
                  #endif
 682   2          DoorBellMgr.TimeCnt--;
 683   2        }
 684   1        else
 685   1        {
 686   2          CurrentScreen = SCREEN_Main;
 687   2        }
 688   1      }
 689          
 690          
 691          /*******************************************************/
 692          /*******************************************************/
 693          /*******************************************************/
 694          void ShowMainMenu(void)//界面-主菜单
 695          {
 696   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<1;j++)
                  {
                    DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 714   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 715   1        {
 716   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 717   2          {
 718   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 719   3            VoiceMenuMgr.MenuPoint++;
 720   3          }
 721   2        }
 722   1      }
 723          /*******************************************************/
 724          /*******************************************************/
 725          /*******************************************************/
 726          void ShowLogMenu(void)//界面-日志菜单
 727          {
 728   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                  DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
                }   
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 13  

                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 736   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 737   1        {
 738   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 739   2          {
 740   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 741   3            VoiceMenuMgr.MenuPoint++;
 742   3          }
 743   2        }
 744   1        
 745   1      }
 746          
 747          /*******************************************************/
 748          /*******************************************************/
 749          /*******************************************************/
 750          void ShowFpMenu(void)//界面-指纹菜单
 751          {
 752   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 760   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 761   1        {
 762   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 763   2          {
 764   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 765   3            VoiceMenuMgr.MenuPoint++;
 766   3          }
 767   2        }
 768   1      }
 769          
 770          
 771          /*******************************************************/
 772          /*******************************************************/
 773          /*******************************************************/
 774          void ShowPasscodeMenu(void)//界面-密码菜单
 775          {
 776   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
                } 
                #endif
 783   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 784   1        {
 785   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 786   2          {
 787   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 788   3            VoiceMenuMgr.MenuPoint++;
 789   3          }
 790   2        } 
 791   1      
 792   1      }
 793          
 794          /*******************************************************/
 795          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 14  

 796          /*******************************************************/
 797          void ShowCardUserMenu(void)//界面-磁卡菜单
 798          {
 799   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                    DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
                } 
                #endif
 806   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 807   1        {
 808   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 809   2          {
 810   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 811   3            VoiceMenuMgr.MenuPoint++;
 812   3          }
 813   2        } 
 814   1      }
 815          
 816          /*******************************************************/
 817          /*******************************************************/
 818          /*******************************************************/
 819          void ShowSystemConfigMenu(void)//系统配置菜单
 820          {
 821   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<2;j++)
                  {
                    DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 839   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 840   1        {
 841   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 842   2          {
 843   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 844   3            VoiceMenuMgr.MenuPoint++;
 845   3          }
 846   2        }   
 847   1      }
 848          /*******************************************************/
 849          /*******************************************************/
 850          /*******************************************************/
 851          void ShowNetWorkConnecting(void)//联网中
 852          {
 853   1        #ifdef Function_TuyaWifi
                if ( WifiMgr.Link.Status == LinkStart )
                {
                  WifiMgr.Link.Status = LinkWait;
                  WifiMgr.Link.TimeCnt = 120*64;  //120S
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 15  

                  WifiMgr.PostMgr.Flag.Bits.StartNetwork = 1;
                  WifiMgr.OFFPowerCnt = 0;
                  PLAY_VOICE_ONESEGMENT(VOICE_NetworkingConfiguration);
                }
                else if ( WifiMgr.Link.Status == LinkWait )
                {
                  WifiMgr.OFFPowerCnt = 0;
                  if( WifiMgr.WifiConnection.Status == JustConnected )
                  {
                    WifiMgr.WifiConnection.Status = Connected;
                    WifiMgr.Link.Status = LinkSuccess;
                  }
                  RefreshSystemSleepTime();
                }
                else if ( WifiMgr.Link.Status == LinkSuccess )
                {
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                else if ( WifiMgr.Link.Status == LinkFail )
                {
                  //if ( WifiMgr.Link.errorcode == 0x02 ) //wifi module not be found
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Fail);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                
                if( WifiMgr.Link.TimeCnt > 0){
                  WifiMgr.Link.TimeCnt--;
                }
                else
                {
                  if ( WifiMgr.Link.Status == LinkWait )
                  {
                    WifiMgr.Link.Status = LinkFail;
                    //WifiMgr.Link.errorcode = 0x01;
                  }
                  else
                  {
                    GoToMainMenu();
                  }
                }
                #endif
 902   1      }
 903          
 904          /*******************************************************/
 905          /*******************************************************/
 906          /*******************************************************/
 907          void ShowRegisterMasterFp(void)//界面-注册管理员指纹
 908          {
 909   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
 913   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 914   1        {
 915   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 916   2          {
 917   3            FpUserRegisterMgr.Status = AddUserToFPM;
 918   3            FpRegisterMgr.Status = FPMcmdStart;
 919   3            DataInputMgr.Status = InputIdle;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 16  

 920   3          }
 921   2          else
 922   2          {
 923   3            FpUserRegisterMgr.Status = RegisterUserFail;
 924   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 925   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 926   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 927   3            Hardware_DelayMs(100);
 928   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
 932   3          }
 933   2        }
 934   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 935   1        {
 936   2          FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 937   2          
 938   2          RegisterFp(FpUserRegisterMgr.UserID-1);
 939   2          
 940   2          if (FpRegisterMgr.Status == success)
 941   2          {
 942   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
 943   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 944   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 945   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
 949   3            //GUI_Flag_RefreshLCD = bTRUE;
 950   3            CheckMemoryMgr.FpMasterNum+=1;
 951   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 952   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 953   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 954   3      //      #ifdef Function_TuyaWifi
 955   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
 956   3      //      #endif
 957   3          }
 958   2          else if (FpRegisterMgr.Status == fail)
 959   2          {
 960   3            FpUserRegisterMgr.Status = RegisterUserFail;
 961   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 962   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 963   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 964   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 965   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
 969   4            }
 970   3            else
 971   3            {
 972   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 973   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
 977   4            }
 978   3            //GUI_Flag_RefreshLCD = bTRUE;
 979   3          }
 980   2        }
 981   1      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 17  

 982   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 983   1        {
 984   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 985   2          {
 986   3            GoToFpMenu();
 987   3            RefreshSystemSleepTime();
 988   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
 991   3      
 992   3            DEBUG_MARK;
 993   3          }
 994   2        }
 995   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
 996   1        {
 997   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
 998   2          {
 999   3            
1000   3          }
1001   2          
1002   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1003   2          {
1004   3          
1005   3          }
1006   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1007   2          {
1008   3        
1009   3          }
1010   2          else
1011   2          {
1012   3      
1013   3          }
1014   2          
1015   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1016   2          {
1017   3            GoToFpMenu();
1018   3          }
1019   2          DEBUG_MARK;
1020   2        }
1021   1      }
1022          
1023          /*******************************************************/
1024          /*******************************************************/
1025          /*******************************************************/
1026          void ShowDeleteMasterFp(void)//删除管理员指纹
1027          {
1028   1        //uint8_t i;
1029   1      
1030   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1031   1        {
1032   2          FpUserDeleteMgr.Status = InputUserID;
1033   2          DataInputMgr.Status = InputIdle;
1034   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1035   2        }
1036   1        
1037   1        if ( FpUserDeleteMgr.Status == InputUserID )
1038   1        {
1039   2          
1040   2          GUI_DataInputCreat(5,72,2,0x0000);
1041   2      
1042   2          if (DataInputMgr.Status == InputEnd)
1043   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 18  

1044   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
1045   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
1046   3            {
1047   4              DataInputMgr.Status = InputIdle;    //Reinput
1048   4            }
1049   3            else
1050   3            {
1051   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1052   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1053   4              DataInputMgr.Status = InputIdle;  
1054   4            }
1055   3          }
1056   2          else if  (DataInputMgr.Status == InputExit)
1057   2          {
1058   3            FpUserDeleteMgr.Status = DeleteUserFail;
1059   3            FpUserDeleteMgr.ErrorType = QUIT;
1060   3            FpUserDeleteMgr.TimeCnt = 0;  
1061   3          }
1062   2        }
1063   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1064   1        {
1065   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1066   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1067   2          {
1068   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1069   3            {
1070   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
1071   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
1072   4              {
1073   5                FpUserDeleteMgr.Status = DeleteUserFail;
1074   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
1075   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1076   5                //GUI_Flag_RefreshLCD = bTRUE;
1077   5                DEF_Fail_Beep;
1078   5              }
1079   4              else
1080   4              {
1081   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1082   5                DataInputMgr.Status = InputIdle;  
1083   5                //GUI_Flag_RefreshLCD = bTRUE;
1084   5              }
1085   4            }
1086   3            else
1087   3            {
1088   4              FpUserDeleteMgr.Status = DeleteUserFail;
1089   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1090   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1091   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1092   4              //GUI_Flag_RefreshLCD = bTRUE;
1093   4            }
1094   3          }
1095   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1096   2          {
1097   3            FpUserDeleteMgr.Status = DeleteUserFail;
1098   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1099   3            FpUserDeleteMgr.ErrorType = QUIT;
1100   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1101   3            //GUI_Flag_RefreshLCD = bTRUE;
1102   3          }
1103   2        }
1104   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1105   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 19  

1106   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1107   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1108   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1109   2          FpmAckMgr.Status = WaitACK;
1110   2        }
1111   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1112   1          {
1113   2            if (FpmAckMgr.Status == GotACK)
1114   2              {
1115   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1116   3                {
1117   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1118   4                  //GUI_Flag_RefreshLCD = bTRUE;
1119   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1120   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1121   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1122   4                  {
1123   5                    CheckMemoryMgr.FpMasterNum-=1;
1124   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1125   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1126   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1127   5                  }
1128   4                }
1129   3                else
1130   3                {
1131   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1132   4                  //GUI_Flag_RefreshLCD = bTRUE;
1133   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1134   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1135   4                }
1136   3                DEBUG_MARK;
1137   3              }
1138   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1139   2              {
1140   3                FpUserDeleteMgr.Status = DeleteUserFail;
1141   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1142   3                //GUI_Flag_RefreshLCD = bTRUE;
1143   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1144   3              }
1145   2      
1146   2          }
1147   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1148   1          {
1149   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1150   2            {
1151   3              CurrentScreen = SCREEN_MasterFpMenu;
1152   3              UnlockModeJudgment();
1153   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1156   3            }
1157   2            DEBUG_MARK;
1158   2          }
1159   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1160   1          {
1161   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1162   2            {
1163   3              
1164   3            }
1165   2            /*
1166   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1167   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 20  

1168   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1169   2            }
1170   2            */
1171   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1172   2            {
1173   3              
1174   3            }
1175   2            else
1176   2            {
1177   3      
1178   3            }
1179   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1180   2            {
1181   3              CurrentScreen = SCREEN_MasterFpMenu;
1182   3            }
1183   2            DEBUG_MARK;
1184   2          }
1185   1        
1186   1      }
1187          /*******************************************************/
1188          /*******************************************************/
1189          /*******************************************************/
1190          void ShowRegisterUserFp(void)//界面-注册用户指纹
1191          {
1192   1        //uint8_t i;
1193   1        //uint16_t UserID;  
1194   1        //~{Lm<SV8NFSC;'~}
1195   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
1199   1        
1200   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1201   1        {
1202   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1203   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1204   2          )
1205   2          {
1206   3            FpUserRegisterMgr.Status = RegisterUserFail;
1207   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1208   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1209   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1210   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1214   3            //GUI_Flag_RefreshLCD = bTRUE;
1215   3          } 
1216   2          else
1217   2          {
1218   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1219   3            {
1220   4              FpUserRegisterMgr.Status = AddUserToFPM;
1221   4              FpRegisterMgr.Status = FPMcmdStart;
1222   4              DataInputMgr.Status = InputIdle;
1223   4            }
1224   3            else
1225   3            {
1226   4              FpUserRegisterMgr.Status = RegisterUserFail;
1227   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1228   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1229   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 21  

1230   4              Hardware_DelayMs(100);
1231   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                      #endif
1235   4              //GUI_Flag_RefreshLCD = bTRUE;
1236   4            }
1237   3          }
1238   2        }
1239   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1240   1        {
1241   2          FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1242   2          
1243   2          RegisterFp(FpUserRegisterMgr.UserID-1);
1244   2          
1245   2          if (FpRegisterMgr.Status == success)
1246   2          {
1247   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
1248   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1249   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1250   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1254   3            CheckMemoryMgr.FpUserNum+=1;
1255   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1256   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1257   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1258   3      //      #ifdef Function_TuyaWifi
1259   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
1260   3      //      #endif
1261   3          }
1262   2          else if (FpRegisterMgr.Status == fail)
1263   2          {
1264   3            FpUserRegisterMgr.Status = RegisterUserFail;
1265   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1266   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1267   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1268   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1269   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
1273   4              //GUI_Flag_RefreshLCD = bTRUE;
1274   4            }
1275   3            else
1276   3            {
1277   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1278   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
1282   4              //GUI_Flag_RefreshLCD = bTRUE;
1283   4            }
1284   3          }
1285   2        }
1286   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1287   1        {
1288   2          
1289   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1290   2          {
1291   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 22  

1292   3            GoToFpMenu();
1293   3            RefreshSystemSleepTime();
1294   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
1297   3          }
1298   2          DEBUG_MARK;
1299   2        }
1300   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1301   1        {   
1302   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1303   2          {
1304   3          
1305   3          }
1306   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1307   2          {
1308   3            
1309   3          }
1310   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1311   2          {
1312   3            
1313   3          }
1314   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1315   2          {
1316   3            
1317   3          }
1318   2          else
1319   2          {
1320   3            
1321   3          }
1322   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1323   2          {
1324   3            GoToFpMenu();
1325   3          }
1326   2          DEBUG_MARK;
1327   2        }
1328   1      }
1329          
1330          /*******************************************************/
1331          /*******************************************************/
1332          /*******************************************************/
1333          void ShowDeleteUserFp(void)//界面-删除用户指纹
1334          {
1335   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1336   1        {
1337   2          FpUserDeleteMgr.Status = InputUserID;
1338   2          DataInputMgr.Status = InputIdle;
1339   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1340   2        }
1341   1        if ( FpUserDeleteMgr.Status == InputUserID )
1342   1        {
1343   2            
1344   2            GUI_DataInputCreat(5,80,3,0x0000);
1345   2        
1346   2            if (DataInputMgr.Status == InputEnd)
1347   2            {
1348   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1349   3              if ((FpUserDeleteMgr.UserID >DEF_MAX_FPMASTER )&&( FpUserDeleteMgr.UserID < (DEF_MAX_FPMASTER+DEF_MAX_
             -FPUSER+1)) )
1350   3              {
1351   4                FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1352   4                CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 23  

1353   4                DataInputMgr.Status = InputIdle;
1354   4              }
1355   3              else        
1356   3              {
1357   4                DataInputMgr.Status = InputIdle;    //Reinput
1358   4              }
1359   3      
1360   3            }
1361   2            else if  (DataInputMgr.Status == InputExit)
1362   2            {
1363   3              FpUserDeleteMgr.Status = DeleteUserFail;
1364   3              FpUserDeleteMgr.ErrorType = QUIT;
1365   3              FpUserDeleteMgr.TimeCnt = 0;
1366   3            }
1367   2        }
1368   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1369   1        {
1370   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1371   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1372   2          {
1373   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1374   3            {
1375   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1376   4              DataInputMgr.Status = InputIdle;  
1377   4              //GUI_Flag_RefreshLCD = bTRUE;
1378   4            }
1379   3            else
1380   3            {
1381   4              FpUserDeleteMgr.Status = DeleteUserFail;
1382   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1383   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1384   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1385   4              //GUI_Flag_RefreshLCD = bTRUE;
1386   4            }
1387   3          }
1388   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1389   2          {
1390   3            FpUserDeleteMgr.Status = DeleteUserFail;
1391   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1392   3            FpUserDeleteMgr.ErrorType = QUIT;
1393   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1394   3            //GUI_Flag_RefreshLCD = bTRUE;
1395   3          }
1396   2        }
1397   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1398   1        {
1399   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1400   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1401   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1402   2          FpmAckMgr.Status = WaitACK;
1403   2        }
1404   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1405   1          {
1406   2            if (FpmAckMgr.Status == GotACK)
1407   2              {
1408   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1409   3                {
1410   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1411   4                  //GUI_Flag_RefreshLCD = bTRUE;
1412   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1413   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1414   4                  if ( CheckMemoryMgr.FpUserNum > 0 )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 24  

1415   4                  {
1416   5                    CheckMemoryMgr.FpUserNum-=1;
1417   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1418   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1419   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1420   5                  }
1421   4                }
1422   3                else
1423   3                {
1424   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1425   4                  //GUI_Flag_RefreshLCD = bTRUE;
1426   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1427   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1428   4                }
1429   3                DEBUG_MARK;
1430   3              }
1431   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1432   2              {
1433   3                FpUserDeleteMgr.Status = DeleteUserFail;
1434   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1435   3                //GUI_Flag_RefreshLCD = bTRUE;
1436   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1437   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1438   3              }
1439   2      
1440   2          }
1441   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1442   1          {
1443   2            
1444   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1445   2            {
1446   3              CurrentScreen = SCREEN_UserFpMenu;
1447   3              UnlockModeJudgment();
1448   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1451   3            }
1452   2            DEBUG_MARK;
1453   2          }
1454   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1455   1          {
1456   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1457   2            {
1458   3      
1459   3            }
1460   2            else
1461   2            {
1462   3      
1463   3            }
1464   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1465   2            {
1466   3              CurrentScreen = SCREEN_UserFpMenu;
1467   3            }
1468   2            DEBUG_MARK;
1469   2          }
1470   1        
1471   1      }
1472          
1473          
1474          /*******************************************************/
1475          /*******************************************************/
1476          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 25  

1477          void ShowDeleteAllUserFp(void)//界面-删除所有用户指纹
1478          {
1479   1        uint16_t i;
1480   1        
1481   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1482   1        {
1483   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1484   2          AllUserFpDeleteMgr.Selection = NO;
1485   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1486   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1487   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1491   2        }
1492   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1493   1        {
1494   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1495   2          //{
1496   2            
1497   2          //}
1498   2        }
1499   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1500   1        {
1501   2          
1502   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1503   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
1504   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1505   2          //GUI_Flag_RefreshLCD = bTRUE;
1506   2          FpmAckMgr.Status = WaitACK;
1507   2        }
1508   1        
1509   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1510   1            {
1511   2              if (FpmAckMgr.Status == GotACK)
1512   2              {
1513   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1514   3                {
1515   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1516   4                  //GUI_Flag_RefreshLCD = bTRUE;
1517   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1518   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1519   4                  CheckMemoryMgr.FpUserNum=0;
1520   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1521   4                  {
1522   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1523   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1524   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1525   5                  }
1526   4                }
1527   3                else
1528   3                {
1529   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1530   4                  //GUI_Flag_RefreshLCD = bTRUE;
1531   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1532   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1533   4                }
1534   3                DEBUG_MARK;
1535   3              }
1536   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1537   2              {
1538   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 26  

1539   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1540   3                //GUI_Flag_RefreshLCD = bTRUE;
1541   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1542   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1543   3              }
1544   2            }
1545   1        
1546   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1547   1          {
1548   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1552   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1553   2            {
1554   3              GoToFpMenu();
1555   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllFpUser);
                      #endif
1558   3            }
1559   2          }
1560   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1561   1          {
1562   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1566   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1567   2            {
1568   3              GoToFpMenu();
1569   3            }
1570   2          }
1571   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1572   1          {
1573   2            GoToFpMenu();
1574   2          }
1575   1        
1576   1      }
1577          
1578          /*******************************************************/
1579          /*******************************************************/
1580          /*******************************************************/
1581          /*******************************************************/
1582          /*******************************************************/
1583          /*******************************************************/
1584          void ShowDeleteCardUser(void)//界面-删除磁卡用户
1585          {
1586   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1587   1        {
1588   2          CardUserDeleteMgr.Status = InputCardUserID;
1589   2          DataInputMgr.Status = InputIdle;
1590   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1591   2        }
1592   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1593   1        {
1594   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1595   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1596   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1597   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1598   2          
1599   2          GUI_DataInputCreat(6,68,3,0x0000);
1600   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 27  

1601   2          if (DataInputMgr.Status == InputEnd)
1602   2          {
1603   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1604   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1605   3            {
1606   4              DataInputMgr.Status = InputIdle;    //Reinput
1607   4            }
1608   3            else if ( IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE )
1609   3            {
1610   4              DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1611   4              CardUserDeleteMgr.Status = Success; 
1612   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1613   4              //GUI_Flag_RefreshLCD = bTRUE;
1614   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1615   4              if ( CheckMemoryMgr.CardUserNum > 0 )
1616   4              {
1617   5                CheckMemoryMgr.CardUserNum-=1;
1618   5              }
1619   4                
1620   4            }
1621   3            else
1622   3            {
1623   4              CardUserDeleteMgr.Status = Fail;
1624   4              CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1625   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1626   4              //GUI_Flag_RefreshLCD = bTRUE;
1627   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1628   4            }
1629   3          }
1630   2          else if  (DataInputMgr.Status == InputExit)
1631   2          {
1632   3            CardUserDeleteMgr.Status = Fail;
1633   3            CardUserDeleteMgr.ErrorType = QUIT;
1634   3            CardUserDeleteMgr.TimeCnt = 0;
1635   3          }
1636   2        }
1637   1        
1638   1        else if  ( CardUserDeleteMgr.Status == Success)
1639   1        {
1640   2          
1641   2          if (--CardUserDeleteMgr.TimeCnt < 1 )
1642   2          {
1643   3            CurrentScreen = SCREEN_CardUserMenu;
1644   3            UnlockModeJudgment();
1645   3      //      #ifdef Function_TuyaWifi
1646   3      //      WifiMgr.PostMgr.Flag.Bits.CardSync = 1;
1647   3      //      #endif
1648   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteCardUser);
                    #endif
1651   3          }
1652   2        }
1653   1        else if ( CardUserDeleteMgr.Status == Fail)
1654   1        {
1655   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1656   2          {
1657   3      
1658   3          }
1659   2          else
1660   2          {
1661   3          
1662   3      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 28  

1663   3          }
1664   2          if ( CardUserDeleteMgr.TimeCnt-- < 1 )
1665   2          {
1666   3            CurrentScreen = SCREEN_CardUserMenu;
1667   3          }
1668   2        }
1669   1      }
1670          
1671          /*******************************************************/
1672          /*******************************************************/
1673          /*******************************************************/
1674          void ShowDeleteAllCardUser(void)//界面-删除全部磁卡用户
1675          {
1676   1        
1677   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1678   1        {
1679   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1680   2          AllCardUserDeleteMgr.Selection = NO;
1681   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1682   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1683   2        }
1684   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1685   1        { 
1686   2          #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                    DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1690   2        }
1691   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1692   1        {
1693   2          
1694   2          DeleteAllCardUserfromMemory();
1695   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1696   2          AllCardUserDeleteMgr.Status = Success;
1697   2          //GUI_Flag_RefreshLCD = bTRUE;
1698   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1699   2          CheckMemoryMgr.CardUserNum =0;
1700   2        }
1701   1        else if ( AllCardUserDeleteMgr.Status == Success )
1702   1        {
1703   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                  #endif
1707   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1708   2          {
1709   3            GoToCardMenu();
1710   3            UnlockModeJudgment();
1711   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteAllCardUser);
                    #endif
1714   3          }
1715   2        }
1716   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1717   1        {
1718   2          GoToCardMenu();
1719   2        }
1720   1      }
1721          
1722          
1723          /*******************************************************/
1724          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 29  

1725          /*******************************************************/
1726          void ShowRegisterPasscodeUser(void)//注册密码用户
1727          {
1728   1        uint8_t i;
1729   1        
1730   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1731   1        {
1732   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1733   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1734   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1735   2            )
1736   2          {
1737   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1738   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1739   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1740   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1741   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1745   3          }
1746   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1747   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1748   2          {
1749   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1750   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1751   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1752   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1753   3            Hardware_DelayMs(100);
1754   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
1758   3          }
1759   2          else
1760   2          {
1761   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1762   3            DataInputMgr.Status = InputIdle;
1763   3            for (i=0;i<12;i++)
1764   3            {
1765   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1766   4            }
1767   3          }
1768   2        }
1769   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1770   1        {
1771   2          PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1772   2          PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1773   2          DataInputMgr.Status = InputIdle;
1774   2          //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1775   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1776   2          {
1777   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1778   3          }
1779   2          else
1780   2          {
1781   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1782   3          }
1783   2          
1784   2          PasscodeInputMgr.Point = 0x00;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 30  

1785   2          PasscodeInputMgr.PasscodeLen = 12;
1786   2          PasscodeInputMgr.Status = PasscodeInputStart;
1787   2          for (i=0;i<12;i++)
1788   2          {
1789   3            PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1790   3          }
1791   2          PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1792   2          //GUI_Flag_RefreshLCD = bTRUE;
1793   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1794   2          {
1795   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1796   3          }
1797   2          else
1798   2          {
1799   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1800   3          }
1801   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1805   2        }
1806   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1807   1        {
1808   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_PasscodeInputCreat(5,0);
                  #endif
1812   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1813   2          {
1814   3            if ( PasscodeInputMgr.Point > 5 )
1815   3            {
1816   4              for (i=0;i<12;i++)
1817   4              {
1818   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1819   5              }
1820   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1821   4              PasscodeInputMgr.Point = 0x00;
1822   4              PasscodeInputMgr.PasscodeLen = 12;
1823   4              PasscodeInputMgr.Status = PasscodeInputStart;
1824   4              for (i=0;i<12;i++)
1825   4              {
1826   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1827   5              }
1828   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1829   4              //GUI_Flag_RefreshLCD = bTRUE;
1830   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1831   4              {
1832   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1833   5              }
1834   4              else
1835   4              {
1836   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1837   5              }
1838   4            }
1839   3            else
1840   3            {
1841   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1842   4              PasscodeInputMgr.Point = 0x00;
1843   4              PasscodeInputMgr.PasscodeLen = 12;
1844   4              PasscodeInputMgr.Status = PasscodeInputStart;
1845   4              for (i=0;i<12;i++)
1846   4              {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 31  

1847   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1848   5              }
1849   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1850   4              //GUI_Flag_RefreshLCD = bTRUE;
1851   4            }
1852   3          }
1853   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1854   2          {
1855   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1856   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1857   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1858   3          }
1859   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1862   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1863   2          {
1864   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1865   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1866   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1867   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1868   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1872   3          } 
1873   2        }
1874   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1875   1        {
1876   2          GUI_PasscodeInputCreat(5,0);
1877   2      
1878   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1879   2          {
1880   3            if ( PasscodeInputMgr.Point > 5 )
1881   3              {
1882   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1883   4                //GUI_Flag_RefreshLCD = bTRUE;
1884   4              }
1885   3            else
1886   3              {
1887   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1888   4                PasscodeInputMgr.Point = 0x00;
1889   4                PasscodeInputMgr.PasscodeLen = 12;
1890   4                PasscodeInputMgr.Status = PasscodeInputStart;
1891   4                for (i=0;i<12;i++)
1892   4                {
1893   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1894   5                }
1895   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1896   4                //GUI_Flag_RefreshLCD = bTRUE;
1897   4              }
1898   3          }
1899   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1900   2          {
1901   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1902   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1903   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1904   3          }
1905   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1906   2          {
1907   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1908   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 32  

1909   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1910   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1911   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1915   3          } 
1916   2        }
1917   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1918   1        {
1919   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1920   2          {
1921   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1922   3            {
1923   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1924   4              {
1925   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1926   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1927   5                //GUI_Flag_RefreshLCD = bTRUE;
1928   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1929   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                        #endif
1933   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1934   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1935   6                }
1936   5                else{
1937   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1938   6                }
1939   5              }
1940   4              else
1941   4              {
1942   5                //目前不返回失败
1943   5              }
1944   4            }
1945   3            else
1946   3            {
1947   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1948   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
1949   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1950   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
1951   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
                      #endif
1955   4            }
1956   3          }
1957   2          else
1958   2          {
1959   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1960   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
1961   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1962   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1963   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1967   3          }
1968   2        }
1969   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
1970   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 33  

1971   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1972   2          {
1973   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
                    #else
1976   3            
1977   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1978   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1979   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
1980   4              /*
1981   4              FpUserRegisterMgr.Status = AddUserToFPM;  
1982   4              FpRegisterMgr.Status = FPMcmdStart;
1983   4              FpUserRegisterMgr.UserID=0x01;
1984   4              CurrentScreen = SCREEN_RegisterMasterFp;
1985   4              */
1986   4              GoToMainMenu();
1987   4            }
1988   3            else
1989   3            {
1990   4              GoToPasswordMenu();
1991   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1992   4            }
1993   3            #endif
1994   3            
1995   3      //      #ifdef Function_TuyaWifi
1996   3      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
1997   3      //      #endif
1998   3            
1999   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddPasscodeUser);
                    #endif
2002   3          }
2003   2        }
2004   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
2005   1        {
2006   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
2007   2          {
2008   3      
2009   3          }
2010   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2011   2          {
2012   3      
2013   3          }
2014   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
2015   2          {
2016   3      
2017   3          }
2018   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2019   2          {
2020   3      
2021   3          }
2022   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
2023   2          {
2024   3          
2025   3          }
2026   2          else
2027   2          {
2028   3      
2029   3          }
2030   2        
2031   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
2032   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 34  

2033   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
2034   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
2035   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2036   3              )
2037   3            {
2038   4              CurrentScreen = SCREEN_Main;
2039   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2040   4              FpIdentifyMgr.Status = FPMcmdStart;
2041   4              CardIdentifyMgr.Status = ReadingCardID;
2042   4            }
2043   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2044   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
2045   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2046   3            )
2047   3            {
2048   4              CurrentScreen = SCREEN_Main;
2049   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2050   4              FpIdentifyMgr.Status = FPMcmdStart;
2051   4              CardIdentifyMgr.Status = ReadingCardID;
2052   4            }
2053   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2054   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
2055   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2056   3              )
2057   3            {
2058   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
2059   4              {
2060   5                GoToPasswordMenu();
2061   5              }
2062   4              else{
2063   5                GoToPasswordMenu();
2064   5              }
2065   4            }
2066   3            else
2067   3            {
2068   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
2069   4              GoToPasswordMenu();
2070   4            }
2071   3          }
2072   2        }
2073   1      }
2074          
2075          /*******************************************************/
2076          /*******************************************************/
2077          /*******************************************************/
2078          void ShowDeletePasscodeUser(void)//界面-删除密码用户
2079          {
2080   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
2081   1        {
2082   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
2083   2          DataInputMgr.Status = InputIdle;
2084   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
2085   2        }
2086   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
2087   1          {
2088   2            if (PasscodeUserDeleteMgr.UserPriority == Master)
2089   2            {
2090   3      //        DisOneDigital16x8(6,8,1,NormalDisplay);
2091   3      //        DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
2092   3            }
2093   2            else
2094   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 35  

2095   3      //        DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
2096   3      //        DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
2097   3      //        DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
2098   3            }
2099   2            
2100   2            GUI_DataInputCreat(6,56,2,0x0000);
2101   2      
2102   2            if (DataInputMgr.Status == InputEnd)
2103   2            {
2104   3              PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
2105   3              if (  (((PasscodeUserDeleteMgr.UserID>(DEF_MAX_PASSCODEMASTER+DEF_MAX_PASSCODEUSER))||(PasscodeUserDel
             -eteMgr.UserID<(DEF_MAX_PASSCODEMASTER+1)))&&(PasscodeUserDeleteMgr.UserPriority == User))   
2106   3                ||(((PasscodeUserDeleteMgr.UserID > DEF_MAX_PASSCODEMASTER)||(PasscodeUserDeleteMgr.UserID<1))&&(Pas
             -scodeUserDeleteMgr.UserPriority == Master))
2107   3               )      
2108   3              {
2109   4                DataInputMgr.Status = InputIdle;    //Reinput
2110   4              }
2111   3              else
2112   3              {
2113   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
2114   4                DataInputMgr.Status = InputIdle;  
2115   4              }
2116   3            }
2117   2            else if  (DataInputMgr.Status == InputExit)
2118   2            {
2119   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2120   3              PasscodeUserDeleteMgr.ErrorType = QUIT;
2121   3              PasscodeUserDeleteMgr.TimeCnt = 0;
2122   3            }
2123   2          }
2124   1        else if ( PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2125   1        {
2126   2          if ( IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE )
2127   2            {
2128   3              if (PasscodeUserDeleteMgr.UserPriority == Master)
2129   3              {
2130   4                if ((CheckMemoryMgr.PasscodeMasterNum==0x01))
2131   4                //&&(CheckMemoryMgr.FpMasterNum == 0x00))
2132   4                {
2133   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2134   5                  PasscodeUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
2135   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2136   5                  //GUI_Flag_RefreshLCD = bTRUE;
2137   5                  DEF_Fail_Beep;
2138   5                }
2139   4                else
2140   4                {
2141   5                  DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2142   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2143   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2144   5                  //GUI_Flag_RefreshLCD = bTRUE;
2145   5                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2146   5                  if ( CheckMemoryMgr.PasscodeMasterNum > 0 )
2147   5                  {
2148   6                    CheckMemoryMgr.PasscodeMasterNum-=1;
2149   6                  }
2150   5                }
2151   4              }
2152   3              else
2153   3              {
2154   4                DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 36  

2155   4                PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2156   4                PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2157   4                //GUI_Flag_RefreshLCD = bTRUE;
2158   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2159   4                if ( CheckMemoryMgr.PasscodeUserNum > 0 )
2160   4                {
2161   5                  CheckMemoryMgr.PasscodeUserNum-=1;
2162   5                }
2163   4              }
2164   3                
2165   3            }
2166   2          else
2167   2            {
2168   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2169   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2170   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2171   3              //GUI_Flag_RefreshLCD = bTRUE;
2172   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
2173   3            }
2174   2        }
2175   1        else if  ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2176   1          {
2177   2            
2178   2            if (--PasscodeUserDeleteMgr.TimeCnt < 1 )
2179   2              {
2180   3                //CurrentScreen = SCREEN_PasscodeUserMenu;
2181   3                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2182   3                //GUI_Flag_RefreshLCD = bTRUE;
2183   3                UnlockModeJudgment();
2184   3                #ifdef Function_EventLog
                        GUI_CreatAndSaveLog(DeletePasscodeUser);
                        #endif
2187   3              }
2188   2          }
2189   1        else if ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2190   1          {
2191   2            if ( PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2192   2            {
2193   3      
2194   3            }
2195   2            else if ( PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
2196   2            {
2197   3      
2198   3            }
2199   2            else
2200   2            {
2201   3        
2202   3            }
2203   2            
2204   2            if (PasscodeUserDeleteMgr.TimeCnt-- < 1 )
2205   2            {
2206   3              if ( PasscodeUserDeleteMgr.ErrorType == QUIT )
2207   3              {
2208   4                if (PasscodeUserDeleteMgr.UserPriority == Master)
2209   4                {
2210   5                  CurrentScreen = SCREEN_PasscodeMasterMenu;
2211   5                }
2212   4                else{
2213   5                  CurrentScreen = SCREEN_PasscodeUserMenu;
2214   5                }
2215   4              }
2216   3              else
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 37  

2217   3              {
2218   4                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2219   4                //GUI_Flag_RefreshLCD = bTRUE;
2220   4              }
2221   3            }
2222   2          }
2223   1        
2224   1      }
2225          
2226          /*******************************************************/
2227          /*******************************************************/
2228          /*******************************************************/
2229          void ShowDeleteAllPasscodeUser(void)//界面-删除全部密码用户
2230          {
2231   1        //uint8_t i;
2232   1        
2233   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2234   1        {
2235   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2236   2          AllPasscodeUserDeleteMgr.Selection = NO;
2237   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2238   2        }
2239   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2240   1        {
2241   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
2245   2        }
2246   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2247   1        {
2248   2          DeleteAllPasscodeUserfromMemory();
2249   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2250   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2251   2          GUI_Flag_RefreshLCD = bTRUE;
2252   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2253   2          CheckMemoryMgr.PasscodeUserNum = 0;
2254   2      //    #ifdef Function_TuyaWifi
2255   2      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
2256   2      //    #endif
2257   2        }
2258   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2259   1          {
2260   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
2263   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2264   2            {
2265   3              GoToPasswordMenu();
2266   3              UnlockModeJudgment();
2267   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
                      #endif
2270   3            }
2271   2          }
2272   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2273   1          {
2274   2            GoToPasswordMenu();
2275   2          }
2276   1      }
2277          
2278          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 38  

2279          /*******************************************************/
2280          /*******************************************************/
2281          void ShowTimeSetting(void)//界面-时间设定
2282          {
2283   1        #ifdef Function_ScreenDisplay
                code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
              
                code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
                
                code uint8_t TimeStrEn[]={"23:01:01"};
              
                DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
              
                DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
                DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
                DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
                DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
                
                DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
                DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
                DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
                DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
              
                if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
                }
                else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
                }
                else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
                }
                else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
                }
                else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
                }
                
                else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 39  

                  DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
                }
                #endif
2352   1      }
2353          
2354          
2355          /*******************************************************/
2356          /*******************************************************/
2357          /*******************************************************/
2358          #ifdef Function_ScreenDisplay
              //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
              //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
              #endif
2362          void ShowLowBattery(void)//低电压界面
2363          {
2364   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
                DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
                #endif  
2368   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2369   1        {
2370   2          if (--BatteryMgr.TimeCnt < 1 )
2371   2          {
2372   3            CurrentScreen = SCREEN_Main;
2373   3            FpIdentifyMgr.Status = FPMcmdStart;
2374   3            CardIdentifyMgr.Status = ReadingCardID;
2375   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2376   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2377   3            {
2378   4              RefreshSystemSleepTime();
2379   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2380   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                      #endif
2384   4            }
2385   3            else
2386   3            {
2387   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2388   4            }
2389   3          }
2390   2        }
2391   1      }
2392          
2393          
2394          /*******************************************************/
2395          /*******************************************************/
2396          /*******************************************************/
2397          void ShowLanguageSetting(void)//语言设定
2398          {
2399   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2400   1        {
2401   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2402   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 40  

2403   3            if ( VoiceMenuMgr.MenuPoint < 2 )
2404   3            {
2405   4              PLAY_VOICE_MULTISEGMENTS_FIXED(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2406   4            }
2407   3            else
2408   3            {
2409   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2410   4            }
2411   3            VoiceMenuMgr.MenuPoint++;
2412   3          }
2413   2        }
2414   1      }
2415          
2416          /*******************************************************/
2417          /*******************************************************/
2418          //uint8_t VoiceWait=0;
2419          /*******************************************************/
2420          void ShowVolumeSetting(void)//声音设定
2421          { 
2422   1        #ifdef Function_ScreenDisplay
                code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
              //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
                code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
              //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
                
                DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
                DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
                #endif
2431   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2432   1        {
2433   2          {
2434   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2435   3            {
2436   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2437   4              VoiceMenuMgr.MenuPoint++;
2438   4            }
2439   3          }
2440   2        } 
2441   1      }
2442          
2443          /*******************************************************/
2444          /*******************************************************/
2445          /*******************************************************/
2446          void ShowMemoryUsage(void)//内存使用情况
2447          {
2448   1        
2449   1      }
2450          
2451          /*******************************************************/
2452          /*******************************************************/
2453          /*******************************************************/
2454          void ShowManagerIdentify(void)//管理员认证
2455          {
2456   1        uint8_t i;
2457   1        #ifdef Function_ScreenDisplay
                code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
                code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
              //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
                //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
                #endif
2464   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 41  

2465   1        {
2466   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2467   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2468   2            )
2469   2          {
2470   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2473   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2474   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2475   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2476   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2477   3            DataInputMgr.Status = InputIdle;
2478   3            PasscodeUserRegisterMgr.UserID = 0x01;
2479   3            PasscodeUserRegisterMgr.UserPriority = Master;
2480   3            
2481   3            PasscodeInputMgr.Point = 0x00;
2482   3            PasscodeInputMgr.PasscodeLen = 12;
2483   3            PasscodeInputMgr.Status = PasscodeInputStart;
2484   3            for (i=0;i<12;i++)
2485   3            {
2486   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2487   4            }
2488   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2489   3            //GUI_Flag_RefreshLCD = bTRUE;
2490   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2491   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                      #endif
2495   3            #endif
2496   3            
2497   3          }
2498   2          else
2499   2          {
2500   3            PasscodeInputMgr.Point = 0x00;
2501   3            PasscodeInputMgr.PasscodeLen = 12;
2502   3            PasscodeInputMgr.Status = PasscodeInputStart;
2503   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2504   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2505   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2506   3            {
2507   4              PasscodeInputMgr.InputBuff[i]=0xff;
2508   4            }
2509   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2510   3            FpIdentifyMgr.Status = FPMcmdStart;
2511   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2512   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
                    #endif
2516   3          }
2517   2        }
2518   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
2519   1        {
2520   2      
2521   2          GUI_PasscodeInputCreat(6,16);
2522   2          
2523   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2524   2          { 
2525   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2526   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 42  

2527   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2528   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2529   3               )
2530   3            {
2531   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2532   4            }
2533   3            //GUI_Flag_RefreshLCD = bTRUE;
2534   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2535   3      
2536   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2537   3            {
2538   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2539   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                      #endif
2543   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2544   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2545   4              {
2546   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2547   5              } 
2548   4            }
2549   3            else
2550   3            {
2551   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2552   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                      #endif
2556   4            }
2557   3            
2558   3          }
2559   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2560   2          {
2561   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2562   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2563   3          }
2564   2      
2565   2          FpUserIdentify();
2566   2          if ( (FpIdentifyMgr.Status == success)
2567   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2568   2            )
2569   2          {
2570   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2571   3            FpIdentifyMgr.Status = FPMcmdStart;
2572   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2573   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                    #endif
2577   3            #ifdef Function_FPMbreathingLed
2578   3            FpIdentifyMgr.BreathingLED = 1;
2579   3            SetFPMbreathingLed(FPMbreathingLed_Green);
2580   3            #endif  
2581   3          }
2582   2          else if (( FpIdentifyMgr.Status == fail)
2583   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
2584   2            )
2585   2          {
2586   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2587   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 43  

2588   4            }
2589   3            else{
2590   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2591   4            }
2592   3            FpIdentifyMgr.Status = FPMcmdStart;
2593   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
2594   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2595   3            //GUI_Flag_RefreshLCD = bTRUE;
2596   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2597   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                    #endif
2601   3            #ifdef Function_FPMbreathingLed
2602   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2603   3            #endif
2604   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2605   3            {
2606   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2607   4            } 
2608   3          }
2609   2        }
2610   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2611   1        {
2612   2          GoToMainMenu();
2613   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
2614   2        }
2615   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2616   1        {
2617   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2618   2          {
2619   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2620   3            {
2621   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2622   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2623   4            }
2624   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2625   3            CardIdentifyMgr.Status = ReadingCardID;
2626   3            FpIdentifyMgr.Status = FPMcmdStart;
2627   3            CurrentScreen = SCREEN_Main;
2628   3            #ifdef Function_FPMbreathingLed
2629   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2630   3            #endif
2631   3          }
2632   2        }
2633   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2634   1        {
2635   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2636   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2637   2          CardIdentifyMgr.Status = ReadingCardID;
2638   2          FpIdentifyMgr.Status = FPMcmdStart;
2639   2          CurrentScreen = SCREEN_Main;
2640   2          #ifdef Function_FPMbreathingLed
2641   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2642   2          #endif
2643   2        }
2644   1      
2645   1      }
2646          /*******************************************************/
2647          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 44  

2648          /*******************************************************/
2649          void ShowUnlockingModeSetting(void)//界面-解锁模式设置
2650          {
2651   1        #ifdef Function_ScreenDisplay
                code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
                code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
                code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
                #endif
2659   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2660   1        {
2661   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2662   2        }
2663   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2664   1        { 
2665   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
                    DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
                    #endif
2669   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2670   2            {
2671   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2672   3              {
2673   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2674   4                VoiceMenuMgr.MenuPoint++;
2675   4              }
2676   3            }
2677   2        }
2678   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2679   1        {
2680   2          UnlockingModeMgr.TimeCnt = 0;
2681   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2682   2          { 
2683   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2684   3            {
2685   4              #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
                      #endif
2689   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2690   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2691   4            }
2692   3          }
2693   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2694   2        }
2695   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2696   1        {
2697   2          if (UnlockingModeMgr.TimeCnt > 0)
2698   2          {
2699   3            UnlockingModeMgr.TimeCnt--;
2700   3          }
2701   2          else
2702   2          {
2703   3            SystemConfigSave();
2704   3            GoToSystemConfigMenu();
2705   3          }
2706   2        }
2707   1      }
2708          
2709          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 45  

2710          /*******************************************************/
2711          /*******************************************************/
2712          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2713          {
2714   1        #ifdef Function_ScreenDisplay
                //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
              //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
                code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
              //  code uint8_t EnabledStrEn[]={"1. ON"};
                code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
              //  code uint8_t DisabledStrEn[]={"2. OFF"};
              
                DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
                DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
                #endif
2725   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2726   1        {
2727   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2728   2          {
2729   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2730   3            VoiceMenuMgr.MenuPoint++;
2731   3          }
2732   2        }
2733   1      }
2734          
2735          /*******************************************************/
2736          /*******************************************************/
2737          /*******************************************************/
2738          void ShowPickAlarmEnableSetting(void)//界面-防撬告警使能设置
2739          {
2740   1        #ifdef Function_ScreenDisplay
                code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
              //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
                code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
              //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
              
                DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
                DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
                #endif
2749   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2750   1        {
2751   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2752   2          {
2753   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2754   3            VoiceMenuMgr.MenuPoint++;
2755   3          }
2756   2          /*
2757   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2758   2          
2759   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2760   2          {
2761   2            VoiceMenuMgr.MenuPoint = 0;
2762   2          }
2763   2          */
2764   2        }
2765   1      
2766   1        
2767   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2768   1          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 46  

2769   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2770   2          }
2771   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2772   1          {
2773   2            
2774   2          }
2775   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2776   1          {     
2777   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2778   2            SystemConfigSave();
2779   2            Config_AntiPrying_Interrupt();
2780   2            GoToSystemConfigMenu(); 
2781   2          }
2782   1      }
2783          
2784          /*******************************************************/
2785          /*******************************************************/
2786          extern uint16_t KeyHoldTimeCnt;
2787          /*******************************************************/
2788          void ShowRestoreFactoryDefault(void)//界面-恢复出厂
2789          {
2790   1        uint8_t i;
2791   1        #ifdef Function_ScreenDisplay
                code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
              //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
                #endif
2795   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2796   1      
2797   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2798   1        {
2799   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2800   2          //GUI_Flag_RefreshLCD = bTRUE;
2801   2          RestoreFactoryDefaultMgr.Selection = NO;
2802   2          //SET_LRandConfirmLED_ON();
2803   2          //SET_AP_LED_ON();
2804   2        }
2805   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2806   1        {
2807   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
                  DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
                  #endif
2812   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2813   2          {
2814   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2815   3            {
2816   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2817   4              VoiceMenuMgr.MenuPoint++;
2818   4            }
2819   3          }
2820   2        }
2821   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
2822   1        { 
2823   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
                  #endif
2827   2          //SET_ALLKEYLED_OFF();
2828   2          
2829   2          RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 47  

2830   2      
2831   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2832   2      
2833   2        }
2834   1        else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2835   1        {
2836   2          if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2837   2            {
2838   3              RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2839   3              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2840   3              RestoreFactoryDefaultMgr.FailTimes = 0x00;
2841   3            }
2842   2          else{ 
2843   3            RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2844   3            PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2845   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
2849   3          }
2850   2        } 
2851   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2852   1          {
2853   2        
2854   2            DeleteAllFpFromFPM();
2855   2            if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2856   2            {
2857   3              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2858   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2859   3              CheckMemoryMgr.FpUserNum = 0x00;
2860   3              CheckMemoryMgr.FpMasterNum = 0x00;  
2861   3              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2862   3              {
2863   4                FpUserMemoryMgr[i].UserID = 0xFFFF;
2864   4                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2865   4                FpUserMemoryMgr[i].UserPriority = Undefined;
2866   4              }
2867   3            }
2868   2            else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2869   2            {
2870   3              if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2871   3              {
2872   4                RestoreFactoryDefaultMgr.FailTimes++;
2873   4                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2874   4                RefreshSystemSleepTime();
2875   4              }
2876   3              else
2877   3              {
2878   4                RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2879   4                PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2880   4                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                        #endif
2884   4              }
2885   3            } 
2886   2          }
2887   1        
2888   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2889   1          {     
2890   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2891   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 48  

2892   3              DeleteAllCardUserfromMemory();
2893   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2894   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2895   3              CheckMemoryMgr.CardUserNum = 0x00;
2896   3            } 
2897   2          }
2898   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2899   1          { 
2900   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2901   2            {
2902   3              RestoreFactory_Managerdata();
2903   3              DeleteAllPasscodeMasterfromMemory();
2904   3              DeleteAllPasscodeUserfromMemory();
2905   3              SystemConfigReset();
2906   3              #ifdef Function_EventLog
                      DeleteAllLog();
                      #endif
2909   3              
2910   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2911   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2912   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2913   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2914   3              //GUI_Flag_RefreshLCD = bTRUE;
2915   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2916   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
2920   3            }
2921   2          }
2922   1        
2923   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2924   1          {
2925   2      
2926   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2927   2            {
2928   3              CurrentScreen = SCREEN_Main;
2929   3              RefreshSystemSleepTime();
2930   3              KeyHoldTimeCnt=0;
2931   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2932   3              FpIdentifyMgr.Status = FPMcmdStart;
2933   3              CardIdentifyMgr.Status = ReadingCardID;
2934   3      
2935   3            }
2936   2          }
2937   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2938   1          {
2939   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2940   2            {
2941   3              CurrentScreen = SCREEN_Main;
2942   3              KeyHoldTimeCnt=0;
2943   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2944   3              FpIdentifyMgr.Status = FPMcmdStart;
2945   3              CardIdentifyMgr.Status = ReadingCardID;
2946   3            }
2947   2          }
2948   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2949   1          {
2950   2            GoToSystemConfigMenu();
2951   2          }
2952   1      
2953   1      }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 49  

2954          
2955          /*******************************************************/
2956          /*******************************************************/
2957          /*******************************************************/
2958          void ShowInitialization(void)//界面-初始化
2959          {
2960   1        
2961   1        uint8_t i;
2962   1        #ifdef Function_ScreenDisplay
                code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
              //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
                code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
                code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
              //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
                code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
              //  code uint8_t EepromStr_En[]={"Memory"}; 
                code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
              //  code uint8_t TouchStr_En[]={"Touch"}; 
                code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
                code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
                #endif  
2978   1        
2979   1        if ( InitializationMgr.Status == StartInitialization )
2980   1        {
2981   2          //SET_ALLKEYLED_OFF();
2982   2          #ifdef Function_ScreenDisplay
                  DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
                  DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
                  DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
                  #endif
2987   2          CheckMemoryMgr.Status = StartCheckMemory;
2988   2          InitializationMgr.Status = MemoryCheck;
2989   2        }
2990   1        else if ( InitializationMgr.Status == MemoryCheck )
2991   1        {
2992   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
                  #endif
2995   2          SystemConfigLoad();
2996   2          ReadLockBrand();
2997   2          InitializationMgr.MemoryCheckPass = bTRUE;
2998   2          InitializationMgr.Status = MemoryCheckWait;
2999   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3000   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3001   2        }
3002   1        else if ( InitializationMgr.Status == MemoryCheckWait )
3003   1        {
3004   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.MemoryCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3014   2          if (--InitializationMgr.TimeCnt < 1 )
3015   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 50  

3016   3            InitializationMgr.Status = FingerPrintCheck;
3017   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5);
                    DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
                    #endif
3022   3          }
3023   2        }
3024   1        else if ( InitializationMgr.Status == FingerPrintCheck )
3025   1        {
3026   2      
3027   2          GUI_GetUserNumList();   //read user number
3028   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
3029   2          {
3030   3            //SET_KEYLED_ON(KEY_TWO);
3031   3            #ifdef Function_FPMbreathingLed
3032   3            FpmAckMgr.Status = WaitACK;
3033   3            FPM_SetSecurityLevel(1);  //
3034   3            for (i=0;i<25;i++)
3035   3            {
3036   4              Hardware_DelayMs(10);
3037   4              FPM_Mgr_Task();
3038   4              if ( FpmAckMgr.Status == GotACK )
3039   4              {
3040   5                break;
3041   5              }
3042   4            }
3043   3            #endif
3044   3      
3045   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
3046   3            InitializationMgr.Status = FingerPrintCheckWait;
3047   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3048   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3049   3            
3050   3          }
3051   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
3052   2          { 
3053   3            //CheckMemoryMgr.Status = StartCheckMemory;
3054   3            //InitializationMgr.Status = StartInitialization;//redo
3055   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
3056   3            InitializationMgr.Status = FingerPrintCheckWait;
3057   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3058   3            DEF_Fail_Beep;
3059   3          }
3060   2        }
3061   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
3062   1        {
3063   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.FingerPrintCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3073   2          if (--InitializationMgr.TimeCnt < 1 )
3074   2          {
3075   3            InitializationMgr.Status = CardReaderCheck;
3076   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 51  

                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
                    #endif
3081   3          }
3082   2        }
3083   1        else if ( InitializationMgr.Status == CardReaderCheck )
3084   1        {
3085   2          //SET_KEYLED_ON(KEY_THREE);
3086   2          InitializationMgr.CardReaderCheckPass = bTRUE;
3087   2          InitializationMgr.Status = CardReaderCheckWait;
3088   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3089   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3090   2        }
3091   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
3092   1        {
3093   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.CardReaderCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3103   2          if (--InitializationMgr.TimeCnt < 1 )
3104   2          {
3105   3            InitializationMgr.Status = TouchCheck;
3106   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
                    #endif
3111   3          }
3112   2        }
3113   1        else if ( InitializationMgr.Status == TouchCheck )
3114   1          {
3115   2            //SET_KEYLED_ON(KEY_FOUR);
3116   2            InitializationMgr.TouchCheckPass = bTRUE;
3117   2            InitializationMgr.Status = TouchCheckWait;
3118   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3119   2       
3120   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3121   2          }
3122   1        else if ( InitializationMgr.Status == TouchCheckWait )
3123   1          {
3124   2            #ifdef Function_ScreenDisplay
                    if (InitializationMgr.TouchCheckPass == bTRUE)
                    { 
                      DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                    }
                    else
                    {
                      DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                    }
                    #endif
3134   2            if (--InitializationMgr.TimeCnt < 1 )
3135   2            {
3136   3              InitializationMgr.Status = CheckFinished;
3137   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3138   3              #ifdef Function_ScreenDisplay
                      Clear_Screen_Page(4);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 52  

                      Clear_Screen_Page(5);
                      if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
                        &&(InitializationMgr.MemoryCheckPass == bTRUE )
                        &&(InitializationMgr.CardReaderCheckPass == bTRUE )
                        &&(InitializationMgr.TouchCheckPass == bTRUE ) )
                      {
                        DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
                      }
                      else
                      {
                        DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
                      }
                      #endif
3153   3            }
3154   2          }
3155   1      
3156   1        else if ( InitializationMgr.Status == CheckFinished )
3157   1        {
3158   2          if (--InitializationMgr.TimeCnt < 1 )
3159   2          {
3160   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3161   3            {
3162   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3163   4              BatteryMgr.PostLowBattery = bFALSE;
3164   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3165   4              CurrentScreen = SCREEN_LowBattery;  
3166   4            }
3167   3            else
3168   3            {
3169   4              CurrentScreen = SCREEN_Main;
3170   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3171   4              FpIdentifyMgr.Status = FPMcmdStart;
3172   4              CardIdentifyMgr.Status = ReadingCardID;
3173   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3174   4            }
3175   3          }
3176   2        }
3177   1      }
3178          
3179          /*******************************************************/
3180          /*******************************************************/
3181          /*******************************************************/
3182          void ShowSystemLocked(void)//界面-系统锁定
3183          {
3184   1        #ifdef Function_ScreenDisplay
                uint16_t Temp;
                code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
              //  code uint8_t SystemLockedStrEn[]={"System Lock"};
                #endif
3189   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3190   1        {
3191   2          #ifdef Function_TuyaWifi
                  if( SafetyMonitorMgr.SystemLockedTimeDelay == DEF_SystemLockedTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = ErrorAlarm;
                  }
                  #endif
3198   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3199   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-640))
3200   2          {
3201   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 53  

3202   3            {
3203   4              if(VoiceMgr.Enable == bFALSE)
3204   4              {
3205   5                VoiceMgr.Enable = bTRUE;
3206   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3207   5                VoiceMgr.Enable = bFALSE;
3208   5              }
3209   4              else
3210   4              {
3211   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3212   5              }
3213   4            }
3214   3          }
3215   2        }
3216   1        else
3217   1        {
3218   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3219   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3220   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3221   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
3222   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3223   2          CurrentScreen = SCREEN_Main;
3224   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3225   2          FpIdentifyMgr.Status = FPMcmdStart;
3226   2          CardIdentifyMgr.Status = ReadingCardID;
3227   2          STOP_VOICEPLAY();
3228   2        }
3229   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
                DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
                Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
                DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
                DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
                DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
                #endif
3237   1      }
3238          
3239          /*******************************************************/
3240          /*******************************************************/
3241          /*******************************************************/
3242          #ifdef Function_ScreenDisplay
               code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
              // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
               //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
               //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
               code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
              // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
              #endif
3250          void ShowPickLockAlarm(void)//界面-防撬告警
3251          {
3252   1        bool_t Flag_ExitPickLockAlarm;
3253   1      
3254   1        RefreshSystemSleepTime();   //reset system sleep time
3255   1      
3256   1        #ifdef Function_ScreenDisplay
                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
                {
                  DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
                  Clear_Screen_Page(5);
                  DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 54  

                }
                #endif  
3264   1        
3265   1        Flag_ExitPickLockAlarm = bFALSE;
3266   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
3267   1        {
3268   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3269   2          
3270   2          CardUserIdentify();
3271   2        }
3272   1      
3273   1          
3274   1        if ( CardIdentifyMgr.Status == Success)
3275   1        {
3276   2          Flag_ExitPickLockAlarm = bTRUE;
3277   2        }
3278   1        else if ( CardIdentifyMgr.Status == Fail)
3279   1        {
3280   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3281   2          {
3282   3            Flag_ExitPickLockAlarm = bTRUE;
3283   3          }
3284   2          else
3285   2          {
3286   3            CardIdentifyMgr.Status = ReadingCardID;
3287   3          }
3288   2        }
3289   1      
3290   1        FpUserIdentify();
3291   1        if ( FpIdentifyMgr.Status == success)
3292   1        {
3293   2          Flag_ExitPickLockAlarm = bTRUE; 
3294   2        }
3295   1        else if ( FpIdentifyMgr.Status == fail)
3296   1        {
3297   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3298   2          {
3299   3            Flag_ExitPickLockAlarm = bTRUE;   
3300   3          }
3301   2          else
3302   2          {
3303   3            FpIdentifyMgr.Status = FPMcmdStart;
3304   3          }
3305   2        }
3306   1      
3307   1        PasscodeUserIdentify();
3308   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3309   1        {
3310   2          Flag_ExitPickLockAlarm = bTRUE;
3311   2        }
3312   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3313   1        {
3314   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3315   2          {
3316   3            Flag_ExitPickLockAlarm = bTRUE;
3317   3          }
3318   2          else
3319   2          {
3320   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3321   3          }
3322   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 55  

3323   1      
3324   1        if ( AntiPryingMgr.TimeCnt > 0 )
3325   1        {
3326   2          #ifdef Function_TuyaWifi
                  if( AntiPryingMgr.TimeCnt == DEF_AntiPryingTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = PryAlarm;
                  }
                  #endif
3333   2          AntiPryingMgr.TimeCnt--;
3334   2        }
3335   1        else{
3336   2          Flag_ExitPickLockAlarm = bTRUE;
3337   2        }
3338   1        
3339   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3340   1        {
3341   2          STOP_VOICEPLAY();
3342   2          #ifdef Function_FPMbreathingLed
3343   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3344   2          #endif
3345   2          INT1_RST();
3346   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3347   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3348   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3349   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3350   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3351   2          CurrentScreen = SCREEN_Main;
3352   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3353   2          FpIdentifyMgr.Status = FPMcmdStart;
3354   2          CardIdentifyMgr.Status = ReadingCardID;
3355   2          RefreshSystemSleepTime();   //reset system sleep time
3356   2        }
3357   1        else
3358   1        {
3359   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3360   2          {
3361   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3362   3          }
3363   2        }
3364   1      }
3365          
3366          /*******************************************************/
3367          /*******************************************************/
3368          void ShowAgingTest(void)//界面-老化测试
3369          {
3370   1        #ifdef Function_ScreenDisplay
                uint8_t Str1[]={"AGING TEST"}; 
                uint8_t Str2[]={"MOTOR:"}; 
                uint8_t Str3[]={"INPUT:  . V"};
                uint8_t Str4[]={"SLIDE:"};
              
                DisEN16x8Str(0,16,Str1,NormalDisplay);
                #endif
3378   1        GUI_MotorAgingTest();
3379   1        #ifdef Function_ScreenDisplay
                DisEN16x8Str(4,0,Str2,NormalDisplay);
                DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
                DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
                DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
                DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 56  

              
                DisEN16x8Str(6,0,Str3,NormalDisplay); 
                DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
                DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
                #endif
3390   1      }
3391          /*******************************************************/
3392          /*******************************************************/
3393          /*******************************************************/
3394          
3395          void ShowEventLogBySequence(void)//界面-按顺序界面-事件日志
3396          {
3397   1        #ifdef Function_EventLog
                code uint8_t VoiceReportLogBuff[][5]=
                { 
                  {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
                  {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
                  {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
                  {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
                };
                  
                uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
                uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
              
                if (CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
                {
                  SearchEventLogBySequence();
                  CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
                  {
                    LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
                    LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
                    CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
                    VoiceMenuMgr.MenuPoint = 0;
                    VoiceMenuMgr.TotalMenuNum = 3;    
                  }
                  else
                  {
                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
                  }
                }
                else if (CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                {
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
                  {
                      DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
                  }
                  else
                  {
                    if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
                    {
                      LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
                      LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
                      VoiceReportLogMgr.Status = ReportLogInit;
                      Clear_Screen();
                    }
                    
                    DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    
                    if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
                    {
                      if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 57  

                      {
                        PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
                        VoiceMenuMgr.MenuPoint++;
                      }
                      SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
                    }
                    else
                    {
                     // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    }
                  }
                }
                #endif
3460   1      }
3461          
3462          /*******************************************************/
3463          /*******************************************************/
3464          /*******************************************************/
3465          void ShowClearEventLog(void)//界面-清除事件日志
3466          {
3467   1        #ifdef Function_EventLog
                uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
                if (LogDeleteMgr.Status == StartLogDelete)
                {
                  LogDeleteMgr.DeleteSectorNum = 0;
                  LogDeleteMgr.Percentage = 0;
                  LogDeleteMgr.Status = WaitforLogDeleteCofirm;
                  PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
                }
                else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
                {
                  #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
                }
                else if (LogDeleteMgr.Status == LogDeleting)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    if ( LogDeleteMgr.Percentage == 0 )
                    {
                      #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,DELing,NormalDisplay);
                      #endif
                      if ( DeleteAllLog() != S_SUCCESS )
                      {
                        if ( DeleteAllLog() != S_SUCCESS )
                        {
                          DeleteAllLog();
                        }
                      }
                    }
                    LogDeleteMgr.Percentage++;
                  }
                  else
                  {
                    LogDeleteMgr.Status = LogDeleteSuccess;
                    LogDeleteMgr.Percentage = 0;
                    RefreshSystemSleepTime();
                    PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 58  

                    #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
                  }
                }
                else if (LogDeleteMgr.Status == LogDeleteSuccess)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    LogDeleteMgr.Percentage++;
                  }
                  else 
                  {
                    LogDeleteMgr.Status = QuitLogDelete;
                  }
                }
                else
                {
                  GotoLogMenu();
                }
                #endif
3531   1      }
3532          
3533          /*******************************************************/
3534          /*******************************************************/
3535          
3536          
3537          /*******************************************************/
3538          /*******************************************************/
3539          void GUI_Button_Monitor(void)//GUI按钮监视器
3540          {
3541   1        //DEBUG_MARK;
3542   1        uint8_t i;
3543   1        uint8_t Offset;
3544   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3545   1        {
3546   2          //return;
3547   2        }
3548   1        
3549   1        if ( MotorMgr.MotorStatus != IDLE )
3550   1        {
3551   2          return;
3552   2        }
3553   1      
3554   1        gui_keycode = Key_Scan();
3555   1      
3556   1        DEBUG_MARK;
3557   1      
3558   1        if ( gui_keycode != KEY_NONE )
3559   1        {
3560   2          RefreshSystemSleepTime();
3561   2        }
3562   1        switch ( CurrentScreen)
3563   1        {
3564   2          case SCREEN_Main:
3565   2      
3566   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3567   2            {
3568   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 59  

                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3573   3            }
3574   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
3575   2            {
3576   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
3577   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3578   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
3579   3            }
3580   2            #ifdef Function_DoorBellTouchIndependented
3581   2            else if ( gui_keycode == KEY_DOORBELL )
3582   2            { 
3583   3              PLAY_VOICE_DOORBELL();
3584   3              DoorBellMgr.TimeCnt = 150;
3585   3              CurrentScreen = SCREEN_DoorBell;
3586   3            }
3587   2            #endif
3588   2      
3589   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3590   2            {
3591   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3592   3              {
3593   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3594   4                {
3595   5                  
3596   5                  PasscodeInputMgr.Point = 0x01;
3597   5                  PasscodeInputMgr.PasscodeLen = 16;
3598   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3599   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3600   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3601   5                  {
3602   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3603   6                  }
3604   5                  
3605   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3606   5                  DEF_ButtonPress_Voice;
3607   5                }
3608   4               }
3609   3              else if ( gui_keycode == KEY_ASTERISK )
3610   3              {
3611   4                DEF_ButtonPress_Voice;
3612   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3613   4                {
3614   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3615   5                }
3616   4                else 
3617   4                {
3618   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3619   5                  SystemPowerMgr.SleepSource = UserForced;
3620   5                }
3621   4              }
3622   3              else if ( gui_keycode == KEY_POUNDSIGN )
3623   3              {
3624   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3625   4                { 
3626   5                   DEF_ButtonPress_Voice;
3627   5                   CurrentScreen = SCREEN_ManagerIdentify;
3628   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3629   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3630   5                }
3631   4                else
3632   4                {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 60  

3633   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
                          PLAY_VOICE_DOORBELL();  //DOORBELL
                          DoorBellMgr.TimeCnt = 150;
                          CurrentScreen = SCREEN_DoorBell;
                          #else
3638   5                  DEF_ButtonPress_Voice;
3639   5                  #endif
3640   5                } 
3641   4              }
3642   3            }
3643   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3644   2                      &&( gui_keycode != KEY_DOORBELL )
3645   2                    )
3646   2            {
3647   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3648   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3649   3              {
3650   4                DEF_ButtonPress_Voice;
3651   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3652   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
3653   4              }
3654   3            }
3655   2            
3656   2            break;
3657   2            
3658   2          case SCREEN_MainMenu:
3659   2      
3660   2              if ( gui_keycode == KEY_ONE )
3661   2              {
3662   3                DEF_ButtonPress_Voice;
3663   3                Hardware_DelayMs(100);
3664   3                GoToFpMenu();
3665   3              }
3666   2              else if ( gui_keycode == KEY_TWO )
3667   2              {
3668   3                DEF_ButtonPress_Voice;
3669   3                Hardware_DelayMs(100);
3670   3                GoToPasswordMenu();
3671   3              }
3672   2              else if ( gui_keycode == KEY_THREE )
3673   2              {
3674   3                DEF_ButtonPress_Voice;
3675   3                Hardware_DelayMs(100);
3676   3                GoToCardMenu();
3677   3              }
3678   2              else if ( gui_keycode == KEY_FOUR )
3679   2              {
3680   3                DEF_ButtonPress_Voice;
3681   3                Hardware_DelayMs(100);
3682   3                GoToSystemConfigMenu();
3683   3              }
3684   2              #ifdef Function_TuyaWifi
                      else if (gui_keycode == KEY_FIVE)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_NetWorkLink;
                        WifiMgr.Link.Status = LinkStart;
                        Wifi_Rst();
                      }
                      #endif
3694   2      //        else if ( gui_keycode == KEY_FIVE )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 61  

3695   2      //        {
3696   2      //          DEF_ButtonPress_Voice;
3697   2      //          Hardware_DelayMs(100);
3698   2      //          GotoLogMenu();
3699   2      //        }
3700   2              else if ( gui_keycode == KEY_ASTERISK )
3701   2              {
3702   3                #ifdef Function_FPMbreathingLed
3703   3                FpIdentifyMgr.BreathingLED = 0;
3704   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3705   3                #endif
3706   3                //DEF_ButtonPress_Voice;
3707   3                //FpmAckMgr.Status = WaitACK;
3708   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3709   3                CardIdentifyMgr.Status = ReadingCardID;
3710   3                FpIdentifyMgr.Status = FPMcmdStart;
3711   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3712   3                Hardware_DelayMs(100);
3713   3                CurrentScreen = SCREEN_Main;
3714   3                RefreshSystemSleepTime();
3715   3              }
3716   2      
3717   2              break;
3718   2              
3719   2          case SCREEN_EventLogMenu:
3720   2            
3721   2              #ifdef Function_EventLog
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_CheckEventLogBySequence;
                        CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_DeleteEventLog;
                        LogDeleteMgr.Status = StartLogDelete;
                      }
                      else if ( gui_keycode == KEY_ASTERISK )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToMainMenu();
                      }
                      #endif
3743   2              
3744   2              break;  
3745   2              
3746   2          case SCREEN_FpMenu:
3747   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3748   2              {
3749   3                #ifdef Function_FPMbreathingLed
3750   3                FpIdentifyMgr.BreathingLED = 0;
3751   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3752   3                #endif
3753   3              }
3754   2            
3755   2              if ( gui_keycode == KEY_ONE )
3756   2              {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 62  

3757   3                DEF_ButtonPress_Voice;
3758   3                Hardware_DelayMs(100);
3759   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3760   3                CurrentScreen = SCREEN_RegisterMasterFp;
3761   3                
3762   3              }
3763   2              else if ( gui_keycode == KEY_TWO )
3764   2              {
3765   3                DEF_ButtonPress_Voice;
3766   3                Hardware_DelayMs(100);
3767   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3768   3                CurrentScreen = SCREEN_RegisterUserFp;
3769   3              }
3770   2              else if ( gui_keycode == KEY_THREE )
3771   2              {
3772   3                DEF_ButtonPress_Voice;
3773   3                Hardware_DelayMs(100);
3774   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3775   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3776   3              }
3777   2              else if ( gui_keycode == KEY_ASTERISK )
3778   2              {
3779   3                DEF_ButtonPress_Voice;
3780   3                Hardware_DelayMs(100);
3781   3                GoToMainMenu();
3782   3              }
3783   2              break;
3784   2                
3785   2          case SCREEN_CardUserMenu:
3786   2      
3787   2              if ( gui_keycode == KEY_ONE )
3788   2              {
3789   3                DEF_ButtonPress_Voice;
3790   3                Hardware_DelayMs(100);
3791   3                CurrentScreen = SCREEN_RegisterCardUser;
3792   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3793   3              }
3794   2              else if ( gui_keycode == KEY_TWO )
3795   2              {
3796   3                DEF_ButtonPress_Voice;
3797   3                Hardware_DelayMs(100);
3798   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3799   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3800   3              }
3801   2              else if ( gui_keycode == KEY_ASTERISK )
3802   2              {
3803   3                DEF_ButtonPress_Voice;
3804   3                Hardware_DelayMs(100);
3805   3                GoToMainMenu(); 
3806   3              }
3807   2              break;
3808   2              
3809   2          case SCREEN_PasscodeMenu: 
3810   2      
3811   2              if ( gui_keycode == KEY_ONE )
3812   2              {
3813   3                DEF_ButtonPress_Voice;
3814   3                Hardware_DelayMs(100);
3815   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3816   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3817   3                PasscodeUserRegisterMgr.UserPriority = Master;
3818   3              }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 63  

3819   2              
3820   2              else if ( gui_keycode == KEY_TWO )
3821   2              {
3822   3                DEF_ButtonPress_Voice;
3823   3                Hardware_DelayMs(100);
3824   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3825   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3826   3                PasscodeUserRegisterMgr.UserPriority = User;
3827   3              }
3828   2              else if ( gui_keycode == KEY_THREE )
3829   2              {
3830   3                DEF_ButtonPress_Voice;
3831   3                Hardware_DelayMs(100);
3832   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3833   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3834   3              }
3835   2              else if ( gui_keycode == KEY_ASTERISK )
3836   2              {
3837   3                DEF_ButtonPress_Voice;
3838   3                Hardware_DelayMs(100);
3839   3                GoToMainMenu();
3840   3              }
3841   2            break;
3842   2                
3843   2          case SCREEN_SystemConfigMenu:
3844   2            
3845   2              Offset = 0;
3846   2                
3847   2      //          if ( gui_keycode == KEY_ONE  )
3848   2      //          {
3849   2      //            DEF_ButtonPress_Voice;
3850   2      //            Hardware_DelayMs(100);
3851   2      //            CurrentScreen = SCREEN_TimeSetting;
3852   2      //              #ifdef Function_USE_Internal_RTC
3853   2      //              SystemTime = UTCToSystemtime(G_SystemUTCTime);
3854   2      //              #elif defined Function_USE_External_RTC
3855   2      //              PCF8563_ReadTime();
3856   2      //              #endif
3857   2      //              GotSystemTime();  
3858   2      //          }
3859   2          #ifdef Function_VoiceEnabledEnglish
                        Offset = 1;
                        if ( gui_keycode == KEY_ONE )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          CurrentScreen = SCREEN_LanguageSetting;
                          VoiceMenuMgr.MenuPoint=0;
                          VoiceMenuMgr.TotalMenuNum = 3;
                        } 
                  #endif
3870   2                if ( gui_keycode == KEY_ONE+Offset )
3871   2                {
3872   3                  DEF_ButtonPress_Voice;
3873   3                  Hardware_DelayMs(100);
3874   3                  CurrentScreen = SCREEN_VolumeSetting;
3875   3                  VoiceMenuMgr.MenuPoint=0;
3876   3                  VoiceMenuMgr.TotalMenuNum = 3;
3877   3                }         
3878   2                else if ( gui_keycode == KEY_TWO+Offset )
3879   2                {
3880   3                  DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 64  

3881   3                  Hardware_DelayMs(100);
3882   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3883   3                  VoiceMenuMgr.MenuPoint=0;
3884   3                  VoiceMenuMgr.TotalMenuNum = 3;
3885   3                }
3886   2                else if ( gui_keycode == KEY_THREE+Offset )
3887   2                {
3888   3                  DEF_ButtonPress_Voice;
3889   3                  Hardware_DelayMs(100);
3890   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3891   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3892   3                  VoiceMenuMgr.MenuPoint=0;
3893   3                  VoiceMenuMgr.TotalMenuNum = 3;
3894   3                }
3895   2                else if ( gui_keycode == KEY_FOUR+Offset )
3896   2                {
3897   3                  DEF_ButtonPress_Voice;
3898   3                  Hardware_DelayMs(100);
3899   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3900   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3901   3                  VoiceMenuMgr.MenuPoint=0;
3902   3                  VoiceMenuMgr.TotalMenuNum = 3;
3903   3                }
3904   2                else if ( gui_keycode == KEY_FIVE+Offset )
3905   2                {
3906   3                  DEF_ButtonPress_Voice;
3907   3                  Hardware_DelayMs(100);
3908   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3909   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3910   3                  VoiceMenuMgr.MenuPoint=0;
3911   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3912   3                }
3913   2                else if ( gui_keycode == KEY_ASTERISK )
3914   2                {
3915   3                  DEF_ButtonPress_Voice;
3916   3                  Hardware_DelayMs(100);
3917   3                  GoToMainMenu(); 
3918   3                }
3919   2      
3920   2              break;
3921   2              
3922   2          #ifdef Function_TuyaWifi          
                  case SCREEN_NetWorkLink:
              
                    if (gui_keycode == KEY_ASTERISK)
                    {
                      DEF_ButtonPress_Voice;
                      Hardware_DelayMs(100);
                      WifiMgr.Link.Status = LinkIdle;
                      GoToMainMenu();
                    }
              
                    break;
                  #endif
3935   2      
3936   2          case SCREEN_RegisterUserFp:
3937   2              
3938   2              if ( FpUserRegisterMgr.Status == InputUserID )
3939   2              {
3940   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3941   3              }
3942   2              if ( gui_keycode == KEY_ASTERISK )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 65  

3943   2              {
3944   3                DEF_ButtonPress_Voice;
3945   3                Hardware_DelayMs(100);
3946   3                GoToFpMenu(); 
3947   3              }
3948   2              
3949   2            break;
3950   2            
3951   2          case SCREEN_DeleteUserFp:
3952   2              if ( FpUserDeleteMgr.Status == InputUserID )
3953   2              {
3954   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3955   3              }
3956   2      
3957   2            break;
3958   2      
3959   2          case SCREEN_DeleteAllUserFp:
3960   2            
3961   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3962   2              {
3963   3                 if ( gui_keycode == KEY_POUNDSIGN )
3964   3                {
3965   4                  AllUserFpDeleteMgr.Selection = YES;
3966   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3967   4                }
3968   3                else if ( gui_keycode == KEY_ASTERISK )
3969   3                {
3970   4                  DEF_ButtonPress_Voice;
3971   4                  Hardware_DelayMs(100);
3972   4                  GoToFpMenu(); 
3973   4                }
3974   3              }
3975   2      
3976   2            break;
3977   2      
3978   2          case SCREEN_RegisterMasterFp:
3979   2              
3980   2              if ( FpUserRegisterMgr.Status == InputUserID )
3981   2              {
3982   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3983   3              }
3984   2              if ( gui_keycode == KEY_ASTERISK )
3985   2              {
3986   3                DEF_ButtonPress_Voice;
3987   3                Hardware_DelayMs(100);
3988   3                GoToFpMenu(); 
3989   3              }
3990   2              
3991   2            break;
3992   2            
3993   2          case SCREEN_DeleteMasterFp:
3994   2              if ( FpUserDeleteMgr.Status == InputUserID )
3995   2              {
3996   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3997   3              }
3998   2      
3999   2            break;
4000   2      
4001   2          case SCREEN_DeleteAllMasterFp:
4002   2            
4003   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
4004   2              {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 66  

4005   2                if ( gui_keycode == KEY_FOUR )
4006   2                {
4007   2                  DEF_ButtonPress_Voice;
4008   2                  AllUserFpDeleteMgr.Selection = YES;
4009   2                }
4010   2                else if ( gui_keycode == KEY_SIX )
4011   2                {
4012   2                  DEF_ButtonPress_Voice;
4013   2                  AllUserFpDeleteMgr.Selection = NO;
4014   2                }
4015   2                else if ( gui_keycode == KEY_POUNDSIGN )
4016   2                {
4017   2                  DEF_ButtonPress_Voice;
4018   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
4019   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
4020   2                  }
4021   2                  else{
4022   2                    AllUserFpDeleteMgr.Status = EXIT;
4023   2                  }
4024   2                }
4025   2              }*/
4026   2      
4027   2            break;
4028   2      
4029   2          case SCREEN_RegisterCardUser:
4030   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
4031   2              {
4032   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4033   3              }
4034   2              if ( gui_keycode == KEY_ASTERISK )
4035   2              {
4036   3                DEF_ButtonPress_Voice;
4037   3                Hardware_DelayMs(100);
4038   3                GoToCardMenu(); 
4039   3              }
4040   2      
4041   2            break;
4042   2            
4043   2          case SCREEN_DeleteCardUser:
4044   2      
4045   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
4046   2              {
4047   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4048   3              }
4049   2            break;
4050   2      
4051   2          case SCREEN_DeleteAllCardUser:
4052   2              
4053   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
4054   2              {
4055   3                if ( gui_keycode == KEY_POUNDSIGN )
4056   3                {
4057   4                  AllCardUserDeleteMgr.Selection = YES;
4058   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
4059   4                }
4060   3                else if ( gui_keycode == KEY_ASTERISK )
4061   3                {
4062   4                  DEF_ButtonPress_Voice;
4063   4                  Hardware_DelayMs(100);
4064   4                  GoToCardMenu(); 
4065   4                }
4066   3              }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 67  

4067   2      
4068   2            break;  
4069   2      
4070   2      
4071   2          case SCREEN_RegisterPasscodeUser:
4072   2      
4073   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
4074   2              {
4075   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4076   3              }
4077   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
4078   2              {
4079   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4080   3              }
4081   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
4082   2              {
4083   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4084   3              }
4085   2              
4086   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
4087   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
4088   2              {
4089   3                if ( gui_keycode == KEY_ASTERISK )
4090   3                {
4091   4                  DEF_ButtonPress_Voice;
4092   4                  Hardware_DelayMs(100);
4093   4                  GoToPasswordMenu(); 
4094   4                }
4095   3              }
4096   2          
4097   2            break;
4098   2            
4099   2          case SCREEN_DeletePasscodeUser:
4100   2      
4101   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
4102   2              {
4103   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4104   3              }
4105   2      
4106   2            break;
4107   2      
4108   2          case SCREEN_DeleteAllPasscodeUser:
4109   2            
4110   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
4111   2            {
4112   3              if ( gui_keycode == KEY_POUNDSIGN )
4113   3              {
4114   4                AllPasscodeUserDeleteMgr.Selection = YES;
4115   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
4116   4              }
4117   3              else if ( gui_keycode == KEY_ASTERISK )
4118   3              {
4119   4                DEF_ButtonPress_Voice;
4120   4                Hardware_DelayMs(100);
4121   4                GoToPasswordMenu(); 
4122   4              }
4123   3            }
4124   2            break;
4125   2            
4126   2      
4127   2          case SCREEN_TimeSetting:
4128   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 68  

4129   2          /*if ( TimeSettingMgr.Status == SetYearMajor)
4130   2              {
4131   2                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4132   2                {
4133   2                  DEF_ButtonPress_Voice;
4134   2                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
4135   2                  TimeSettingMgr.Status = SetYearMinor;
4136   2                }
4137   2              }
4138   2              else if ( TimeSettingMgr.Status == SetYearMinor)
4139   2              {
4140   2                if ( gui_keycode == KEY_ASTERISK )
4141   2                {
4142   2                  DEF_ButtonPress_Voice;
4143   2                  TimeSettingMgr.Status = SetYearMajor;
4144   2                }
4145   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4146   2                {
4147   2                  DEF_ButtonPress_Voice;
4148   2                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
4149   2                  TimeSettingMgr.Status = SetMonthMajor;
4150   2                }
4151   2              }
4152   2              
4153   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
4154   2              {
4155   2                if ( (gui_keycode < KEY_TWO) )
4156   2                {
4157   2                  DEF_ButtonPress_Voice;
4158   2                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
4159   2                  TimeSettingMgr.Status = SetMonthMinor;
4160   2                }
4161   2              }
4162   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
4163   2              {
4164   2                if ( gui_keycode == KEY_ASTERISK )
4165   2                {
4166   2                  DEF_ButtonPress_Voice;
4167   2                  TimeSettingMgr.Status = SetYearMajor;
4168   2                }
4169   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4170   2                {
4171   2                  DEF_ButtonPress_Voice;
4172   2                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
4173   2                  if ( TempSystemTime.month > 0x12 ){
4174   2                    TempSystemTime.month = 0x12;
4175   2                  }
4176   2                  if(TempSystemTime.month == 0x00)
4177   2                  {
4178   2                   TempSystemTime.month = 0x01;
4179   2                  }
4180   2                  TimeSettingMgr.Status = SetDateMajor;
4181   2                }
4182   2              }
4183   2              
4184   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4185   2              {
4186   2                if ( gui_keycode == KEY_ASTERISK ){
4187   2                  DEF_ButtonPress_Voice;
4188   2                  TimeSettingMgr.Status = SetYearMajor;
4189   2                }
4190   2                else if ( (gui_keycode < KEY_FOUR) )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 69  

4191   2                {
4192   2                  DEF_ButtonPress_Voice;
4193   2                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4194   2                  TimeSettingMgr.Status = SetDateMinor;
4195   2                }
4196   2              }
4197   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4198   2              {
4199   2                if ( gui_keycode == KEY_ASTERISK ){
4200   2                  DEF_ButtonPress_Voice;
4201   2                  TimeSettingMgr.Status = SetYearMajor;
4202   2                }
4203   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4204   2                {
4205   2                  DEF_ButtonPress_Voice;
4206   2                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4207   2                  if ( TempSystemTime.date > 0x31 ){
4208   2                    TempSystemTime.date = 0x31;
4209   2                  }
4210   2                  if(TempSystemTime.date == 0x00)
4211   2                  {
4212   2                   TempSystemTime.date = 0x01;
4213   2                  }
4214   2                  TimeSettingMgr.Status = SetHourMajor;
4215   2                }
4216   2              }
4217   2      
4218   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4219   2              {
4220   2                if ( gui_keycode == KEY_ASTERISK ){
4221   2                  DEF_ButtonPress_Voice;
4222   2                  TimeSettingMgr.Status = SetYearMajor;
4223   2                }
4224   2                else if ( (gui_keycode < KEY_THREE )){
4225   2                  DEF_ButtonPress_Voice;
4226   2                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4227   2                  TimeSettingMgr.Status = SetHourMinor;
4228   2                }
4229   2              }
4230   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4231   2              {
4232   2                if ( gui_keycode == KEY_ASTERISK ){
4233   2                  DEF_ButtonPress_Voice;
4234   2                  TimeSettingMgr.Status = SetYearMajor;
4235   2                }
4236   2                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4237   2                {
4238   2                  DEF_ButtonPress_Voice;
4239   2                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
4240   2                  if (TempSystemTime.hour > 0x23){
4241   2                    TempSystemTime.hour = 0x23;
4242   2                  }
4243   2                  TimeSettingMgr.Status = SetMinuteMajor;
4244   2                }
4245   2              }
4246   2      
4247   2      
4248   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4249   2              {
4250   2                if ( gui_keycode == KEY_ASTERISK ){
4251   2                  DEF_ButtonPress_Voice;
4252   2                  TimeSettingMgr.Status = SetYearMajor;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 70  

4253   2                }
4254   2                else if ( gui_keycode < KEY_SIX)
4255   2                {
4256   2                  DEF_ButtonPress_Voice;
4257   2                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4258   2                  TimeSettingMgr.Status = SetMinuteMinor;
4259   2                }
4260   2              }
4261   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4262   2              {
4263   2                if ( gui_keycode == KEY_ASTERISK ){
4264   2                  DEF_ButtonPress_Voice;
4265   2                  TimeSettingMgr.Status = SetYearMajor;
4266   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4267   2                }
4268   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4269   2                  DEF_ButtonPress_Voice;
4270   2                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4271   2                  TimeSettingMgr.Status = SetSecondMajor;
4272   2                }
4273   2              }
4274   2      
4275   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4276   2              {
4277   2                if ( gui_keycode == KEY_ASTERISK ){
4278   2                  DEF_ButtonPress_Voice;
4279   2                  TimeSettingMgr.Status = SetYearMajor;
4280   2                }
4281   2                else if ( gui_keycode < KEY_SIX){
4282   2                  DEF_ButtonPress_Voice;
4283   2                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4284   2                  TimeSettingMgr.Status = SetSecondMinor;
4285   2                }
4286   2              }
4287   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4288   2              {
4289   2                if ( gui_keycode == KEY_ASTERISK ){
4290   2                  DEF_ButtonPress_Voice;
4291   2                  TimeSettingMgr.Status = SetYearMajor;
4292   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4293   2                }
4294   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4295   2                  DEF_ButtonPress_Voice;
4296   2                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4297   2                  TimeSettingMgr.Status = SetYearMajor;
4298   2                }
4299   2              }
4300   2      
4301   2              if ( gui_keycode == KEY_POUNDSIGN )
4302   2              {
4303   2                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4304   2                {
4305   2                  DEF_ButtonPress_Voice;
4306   2                  SaveSystemTime();
4307   2                  #ifdef Function_USE_Internal_RTC
4308   2                  G_SystemUTCTime = SystemTimeToUTC(SystemTime);
4309   2                  #elif defined Function_USE_External_RTC
4310   2                  PCF8563_WriteTime();
4311   2                  #endif
4312   2                  Hardware_DelayMs(100);
4313   2                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4314   2                }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 71  

4315   2                else{
4316   2                  Hardware_DelayMs(100);
4317   2                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4318   2                }
4319   2                  
4320   2                GoToSystemConfigMenu();         
4321   2              }
4322   2              else if ( gui_keycode == KEY_ASTERISK )
4323   2              {
4324   2                DEF_ButtonPress_Voice;
4325   2                Hardware_DelayMs(100);
4326   2                GoToSystemConfigMenu();   
4327   2      
4328   2                #ifdef Function_USE_Internal_RTC
4329   2                SystemTime = UTCToSystemtime(G_SystemUTCTime);
4330   2                #elif defined Function_USE_External_RTC
4331   2                PCF8563_ReadTime();
4332   2                #endif
4333   2        
4334   2                //GotSystemTime();      
4335   2              
4336   2                TimeSettingMgr.Status = SetYearMajor;
4337   2              }*/
4338   2      
4339   2            break;
4340   2      
4341   2            case SCREEN_RestoreFactoryDefault:
4342   2      
4343   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4344   2              {
4345   3                if ( gui_keycode == KEY_POUNDSIGN )
4346   3                {
4347   4                  DEF_ButtonPress_Voice;
4348   4                  Hardware_DelayMs(100);
4349   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4350   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4351   4                }
4352   3                else if ( gui_keycode == KEY_ASTERISK )
4353   3                {
4354   4                  DEF_ButtonPress_Voice;
4355   4                  Hardware_DelayMs(100);
4356   4                  GoToSystemConfigMenu(); 
4357   4                }
4358   3              }
4359   2      
4360   2              break;
4361   2      
4362   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
              
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        SystemLanguage = Chinese;       
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 72  

                        SystemLanguage = English;         
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
                      else if ( gui_keycode == KEY_ASTERISK)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToSystemConfigMenu();
                      }
                    break;
                  #endif
4389   2      
4390   2          case SCREEN_VolumeSetting:
4391   2      
4392   2            if ( gui_keycode == KEY_ONE )
4393   2            {
4394   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4395   3              Hardware_DelayMs(100);
4396   3              VoiceMgr.Enable = bTRUE;        
4397   3              SystemConfigSave();
4398   3              GoToSystemConfigMenu();
4399   3            }
4400   2            else if ( gui_keycode == KEY_TWO )
4401   2            {
4402   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4403   3              Hardware_DelayMs(100);
4404   3              VoiceMgr.Enable = bFALSE; 
4405   3              SystemConfigSave();
4406   3              GoToSystemConfigMenu();
4407   3            }
4408   2            else if ( gui_keycode == KEY_ASTERISK )
4409   2            {
4410   3              DEF_ButtonPress_Voice;
4411   3              Hardware_DelayMs(100);
4412   3              GoToSystemConfigMenu();
4413   3            }
4414   2            break;  
4415   2      /*        
4416   2          case SCREEN_ManagerPasscodeModify:
4417   2      
4418   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4419   2            {
4420   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4421   2            }
4422   2            
4423   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4424   2            {
4425   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4426   2            }
4427   2        
4428   2            break;
4429   2      */        
4430   2          case SCREEN_MemoryCheck:
4431   2            
4432   2            
4433   2            break;
4434   2            
4435   2          case SCREEN_ManagerIdentify:
4436   2      
4437   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4438   2                {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 73  

4439   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4440   3                }
4441   2            break;
4442   2              
4443   2          case SCREEN_UnlockingModeSetting:
4444   2              
4445   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4446   2              {
4447   3                if ( gui_keycode == KEY_ONE )
4448   3                {
4449   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4450   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4451   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4452   4                  Hardware_DelayMs(100);
4453   4                }
4454   3                else if ( gui_keycode == KEY_TWO )
4455   3                {
4456   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4457   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4458   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4459   4                  {
4460   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4461   5                    Hardware_DelayMs(100);
4462   5                  }
4463   4                  else
4464   4                  {
4465   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4466   5                    Hardware_DelayMs(100);
4467   5                  }
4468   4                }
4469   3                else if ((gui_keycode == KEY_ASTERISK))
4470   3                {
4471   4                  DEF_ButtonPress_Voice;
4472   4                  Hardware_DelayMs(100);
4473   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4474   4                }
4475   3              }
4476   2            break;
4477   2      
4478   2            
4479   2            case SCREEN_ContinueOpenSetting:
4480   2            
4481   2                if ( gui_keycode == KEY_ONE )
4482   2                {
4483   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4484   3                  {
4485   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4486   4                    GUI_MotorContinueOpen();
4487   4                  }
4488   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4489   3                  Hardware_DelayMs(100);
4490   3                  GoToSystemConfigMenu();
4491   3                }
4492   2                else if ( gui_keycode == KEY_TWO )
4493   2                {
4494   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4495   3                  {
4496   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
4497   4                    MotorMgr.CWTimer = 0;
4498   4                    MotorMgr.CWWAITTimer =  0;  
4499   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4500   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 74  

4501   4                    MotorMgr.MotorStatus = CCW; 
4502   4                    MotorMgr.CCWSoftStart = bTRUE;
4503   4                  }
4504   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
4505   3                  Hardware_DelayMs(100);
4506   3                  GoToSystemConfigMenu();
4507   3                }
4508   2                else if ( gui_keycode == KEY_ASTERISK )
4509   2                {
4510   3                  DEF_ButtonPress_Voice;
4511   3                  Hardware_DelayMs(100);
4512   3                  GoToSystemConfigMenu();
4513   3                }
4514   2              break;
4515   2                
4516   2            case SCREEN_PickAlarmEnableSetting:
4517   2            
4518   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4519   2                {
4520   3                  if ( gui_keycode == KEY_ONE )
4521   3                  {
4522   4                    //PickAlarmEnableMgr.Selection = YES;
4523   4                    PickAlarmEnableMgr.Enable = bTRUE;
4524   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4525   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4526   4                    Hardware_DelayMs(100);
4527   4          
4528   4                  }
4529   3                  else if ( gui_keycode == KEY_TWO )
4530   3                  {
4531   4                    //PickAlarmEnableMgr.Selection = NO;
4532   4                    PickAlarmEnableMgr.Enable = bFALSE;
4533   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4534   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4535   4                    Hardware_DelayMs(100);
4536   4                    
4537   4                  }
4538   3                  else if ( gui_keycode == KEY_ASTERISK)
4539   3                  {
4540   4                    DEF_ButtonPress_Voice;
4541   4                    Hardware_DelayMs(100);
4542   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4543   4                  }
4544   3                }
4545   2                break;
4546   2      
4547   2            case SCREEN_SystemVersion:
4548   2      
4549   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4550   2                  {
4551   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4552   3                    CardIdentifyMgr.Status = ReadingCardID;
4553   3                    FpIdentifyMgr.Status = FPMcmdStart;
4554   3                    CurrentScreen = SCREEN_Main;
4555   3                  }
4556   2                break;
4557   2                  
4558   2            case SCREEN_PickLockAlarm:
4559   2        
4560   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4561   2            {
4562   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 75  

4563   3              {
4564   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4565   4                {
4566   5                  
4567   5                  PasscodeInputMgr.Point = 0x01;
4568   5                  PasscodeInputMgr.PasscodeLen = 16;
4569   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4570   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4571   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4572   5                  {
4573   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4574   6                  }
4575   5                  
4576   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4577   5                  //DEF_ButtonPress_Voice;
4578   5                }
4579   4               }
4580   3              else if ( gui_keycode == KEY_ASTERISK )
4581   3              {
4582   4              }
4583   3            }
4584   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4585   2            {
4586   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4587   3              {
4588   4                //DEF_ButtonPress_Voice;
4589   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4590   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4591   4              }
4592   3            }
4593   2            
4594   2            break;
4595   2      
4596   2            case SCREEN_SystemLocked:
4597   2              
4598   2              if ( gui_keycode != KEY_NONE )  
4599   2              {
4600   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4601   3                Hardware_DelayMs(100);
4602   3              }
4603   2            break;
4604   2      
4605   2            case SCREEN_CheckEventLogBySequence:
4606   2              
4607   2              #ifdef Function_EventLog
                      if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                      {
                        if ( gui_keycode == KEY_TWO )
                        { 
                          if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
                          {
                            DEF_ButtonPress_Voice;
                            CheckEventLogBySequenceMgr.OffsetEventLogNum--;
              
                            if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
                              LogMgr.DisplayPoint++;
                            }
                            else{
                              LogMgr.DisplayPoint = 0;
                            }
                          }
                          else
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 76  

                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if ( gui_keycode == KEY_EIGHT )
                        { 
                          if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
                          {
                            DEF_ButtonPress_Voice;
                            if ( LogMgr.DisplayPoint > 0 )
                            {
                              LogMgr.DisplayPoint--;
                            }
                            else if( LogMgr.DisplayPoint == 0 )
                            {
                              if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
                              {
                                LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
                              }
                            }
                            CheckEventLogBySequenceMgr.OffsetEventLogNum++;
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if (gui_keycode == KEY_ASTERISK)
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4660   2      
4661   2            break;
4662   2      
4663   2            case SCREEN_DeleteEventLog:
4664   2              
4665   2              #ifdef Function_EventLog
                      if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
                      {
                        if ( gui_keycode == KEY_POUNDSIGN )
                        {
                          DEF_ButtonPress_Voice;
                          LogDeleteMgr.Status = LogDeleting;
                        }
                        else if ( gui_keycode == KEY_ASTERISK )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4681   2      
4682   2            break;
4683   2              
4684   2          default:
4685   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 77  

4686   2            break;
4687   2            
4688   2        }
4689   1        
4690   1      }
4691          
4692          /*******************************************************/
4693          /*******************************************************/
4694          void GUI_Update_Screen(void)//GUI更新屏幕
4695          {
4696   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4697   1        {
4698   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_Flag_RefreshLCD = bFALSE;
                  #endif
4702   2          LastScreen =  CurrentScreen;
4703   2        }
4704   1        switch (CurrentScreen)
4705   1        {
4706   2          case SCREEN_Initialization:
4707   2      
4708   2            //SET_ALLKEYLED_OFF();
4709   2            ShowInitialization();
4710   2            break;
4711   2          
4712   2          case SCREEN_LowBattery:
4713   2      
4714   2            //SET_ALLKEYLED_OFF();
4715   2            ShowLowBattery();
4716   2            break;
4717   2      
4718   2          case SCREEN_PickLockAlarm:
4719   2      
4720   2            //SET_ALLKEYLED_ON();
4721   2            ShowPickLockAlarm();
4722   2            break;
4723   2      
4724   2          case SCREEN_Main:
4725   2            
4726   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4727   2            {
4728   3              //SET_ALLKEYLED_OFF();
4729   3            }
4730   2            else
4731   2            {
4732   3              //SET_ALLKEYLED_ON();
4733   3              GUI_UpadteMain();
4734   3            }
4735   2            break;
4736   2      
4737   2          case SCREEN_IdentifySuccess:
4738   2            
4739   2            //SET_ALLKEYLED_OFF();
4740   2            //KEYLED_WATERLIGHT_Task();
4741   2            ShowIdentifySuccessPage();
4742   2            break;
4743   2          
4744   2          case SCREEN_IdentifyFail:
4745   2              
4746   2            //KEYLED_IdentifyFail_Task();
4747   2            ShowIdentifyFailPage();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 78  

4748   2            break;
4749   2          
4750   2          case SCREEN_DoorBell:
4751   2            
4752   2            ShowDoorBell();
4753   2            break;
4754   2          
4755   2          case SCREEN_MainMenu:
4756   2      
4757   2            //SET_1234A_LED_ON();
4758   2            ShowMainMenu();
4759   2            break;
4760   2            
4761   2          case SCREEN_EventLogMenu:
4762   2            
4763   2            //SET_12A_LED_ON();
4764   2            #ifdef Function_EventLog
                    ShowLogMenu();
                    #endif
4767   2            break;
4768   2            
4769   2          case SCREEN_FpMenu:
4770   2            
4771   2            //SET_123A_LED_ON();
4772   2            ShowFpMenu();
4773   2            break;
4774   2          
4775   2          case SCREEN_CardUserMenu:
4776   2      
4777   2            //SET_12A_LED_ON();
4778   2            ShowCardUserMenu();
4779   2            break;
4780   2          
4781   2          case SCREEN_PasscodeMenu:
4782   2            
4783   2            //SET_123A_LED_ON();
4784   2            ShowPasscodeMenu();
4785   2            break;
4786   2          
4787   2          case SCREEN_SystemConfigMenu:
4788   2      
4789   2            //SET_123456A_LED_ON();
4790   2            ShowSystemConfigMenu();
4791   2            break;
4792   2          
4793   2          #ifdef Function_TuyaWifi
                  case SCREEN_NetWorkLink:
                    
                    ShowNetWorkConnecting();
                    break;
                  #endif
4799   2          
4800   2          case SCREEN_RegisterUserFp:
4801   2            
4802   2            //SET_ALLKEYLED_OFF();
4803   2            ShowRegisterUserFp();
4804   2            break;
4805   2          
4806   2          case SCREEN_DeleteUserFp:
4807   2            
4808   2            //SET_ALLKEYLED_ON();
4809   2            //ShowDeleteUserFp();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 79  

4810   2            break;
4811   2          
4812   2          case SCREEN_DeleteAllUserFp:
4813   2            
4814   2            //SET_AP_LED_ON();
4815   2            ShowDeleteAllUserFp();
4816   2            break;
4817   2          
4818   2          case SCREEN_RegisterMasterFp:
4819   2            
4820   2            //SET_ALLKEYLED_OFF();
4821   2            ShowRegisterMasterFp();
4822   2            break;
4823   2            
4824   2          case SCREEN_DeleteMasterFp:
4825   2            
4826   2            //SET_ALLKEYLED_ON();
4827   2            //ShowDeleteMasterFp();
4828   2            break;
4829   2      /*
4830   2          case SCREEN_DeleteAllMasterFp:
4831   2            SET_LRandConfirmLED_ON();
4832   2            ShowDeleteAllMasterFp();
4833   2      
4834   2            break;
4835   2      */
4836   2          case SCREEN_RegisterCardUser:
4837   2            //KEYLED_KEY5_Flash();
4838   2            ShowRegisterCardUser();
4839   2      
4840   2            break;
4841   2            
4842   2          case SCREEN_DeleteCardUser:
4843   2            //SET_ALLKEYLED_ON();
4844   2            //ShowDeleteCardUser();
4845   2      
4846   2            break;
4847   2      
4848   2          case SCREEN_DeleteAllCardUser:
4849   2            //SET_AP_LED_ON();
4850   2            ShowDeleteAllCardUser();
4851   2      
4852   2            break;
4853   2      
4854   2          case SCREEN_RegisterPasscodeUser:
4855   2            //SET_ALLKEYLED_ON();
4856   2            ShowRegisterPasscodeUser();
4857   2      
4858   2            break;
4859   2            
4860   2          case SCREEN_DeletePasscodeUser:
4861   2            //SET_ALLKEYLED_ON();
4862   2            //ShowDeletePasscodeUser();
4863   2      
4864   2            break;
4865   2      
4866   2          case SCREEN_DeleteAllPasscodeUser:
4867   2            //SET_AP_LED_ON();
4868   2            ShowDeleteAllPasscodeUser();
4869   2      
4870   2            break;
4871   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 80  

4872   2      
4873   2          case SCREEN_TimeSetting:
4874   2      
4875   2            //ShowTimeSetting();
4876   2      
4877   2            break;
4878   2      /*
4879   2          case SCREEN_ManagerPasscodeModify:
4880   2          //  SET_ALLKEYLED_ON();
4881   2          //  ShowModifyManagerPasscode();
4882   2      
4883   2            break;
4884   2      */      
4885   2          case SCREEN_RestoreFactoryDefault:
4886   2            //SET_AP_LED_ON();
4887   2            ShowRestoreFactoryDefault();
4888   2      
4889   2            break;
4890   2          
4891   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
                    //SET_12A_LED_ON();
                    ShowLanguageSetting();
              
                    break;
                  #endif
4898   2            
4899   2          case SCREEN_VolumeSetting:
4900   2            //SET_12A_LED_ON();
4901   2            ShowVolumeSetting();
4902   2      
4903   2            break;
4904   2      
4905   2          case SCREEN_MemoryCheck:
4906   2            //SET_UDandConfirmLED_ON();
4907   2            //ShowMemoryUsage();
4908   2      
4909   2            break;
4910   2            
4911   2          case SCREEN_ManagerIdentify:
4912   2      
4913   2            //SET_ALLKEYLED_ON();
4914   2            ShowManagerIdentify();
4915   2      
4916   2            break;
4917   2      
4918   2          case SCREEN_UnlockingModeSetting:
4919   2            //SET_12A_LED_ON();
4920   2            ShowUnlockingModeSetting();
4921   2          
4922   2            break;
4923   2            
4924   2          case SCREEN_ContinueOpenSetting:  
4925   2            //SET_12A_LED_ON();
4926   2            ShowContinuedOpenModeSetting();
4927   2            break;
4928   2            
4929   2          case SCREEN_PickAlarmEnableSetting: 
4930   2            //SET_12A_LED_ON();
4931   2            ShowPickAlarmEnableSetting();
4932   2            break;
4933   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 81  

4934   2          case SCREEN_SystemVersion:  
4935   2            //SET_AP_LED_ON();
4936   2            GUI_Update_Version();
4937   2            break;
4938   2      
4939   2      //    case SCREEN_SelfTest:
4940   2      
4941   2            //SET_ALLKEYLED_ON();
4942   2            //ShowSelfTest();
4943   2      //      break;
4944   2          
4945   2          case SCREEN_AgingTest:
4946   2      
4947   2            //KEYLED_WATERLIGHT_Task();
4948   2            ShowAgingTest();
4949   2            break;
4950   2      
4951   2          case SCREEN_SystemLocked:
4952   2      
4953   2            //KEYLED_ASTERISK_Flash();
4954   2            ShowSystemLocked();
4955   2            break;
4956   2            
4957   2          case SCREEN_CheckEventLogBySequence:
4958   2            #ifdef Function_EventLog
                    ShowEventLogBySequence();
                    #endif
4961   2            break;
4962   2      
4963   2          case SCREEN_DeleteEventLog:
4964   2                  
4965   2          #ifdef Function_EventLog
                    ShowClearEventLog();
                  #endif
4968   2            break;
4969   2          
4970   2          default:
4971   2            break;
4972   2        }
4973   1      
4974   1      }
4975          /*******************************************************/
4976          /*******************************************************/
4977          /*******************************************************/
4978          void GUI_Init(void)//
4979          {
4980   1        //uint8_t i;
4981   1      
4982   1        GUI_ToggleFlag_05s=0x00;
4983   1        GUI_ToggleFlag_1s=0x01;
4984   1        FpIdentifyMgr.BreathingLED=0x00;
4985   1      
4986   1        GUI_Flag_RefreshLCD = bFALSE;
4987   1      
4988   1        FpIdentifyMgr.Status = FPMcmdStart;
4989   1        CardIdentifyMgr.Status = ReadingCardID;
4990   1        TimeSettingMgr.Status = SetYearMajor;
4991   1        BatteryMgr.PostLowBattery = bTRUE;
4992   1        
4993   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
4994   1      
4995   1        Key_Init();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 82  

4996   1        
4997   1        init_Managerdata();
4998   1      
4999   1        ReadCardUserMemoryFromEEPROM();
5000   1      
5001   1        ReadPasscodeUserMemoryFromEEPROM();
5002   1      
5003   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
5004   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
5005   1      
5006   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
5007   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
5008   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
5009   1        UserIdentifyResultMgr.VoiceDelay = 0;
5010   1      
5011   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
5012   1              
5013   1        DEBUG_MARK;
5014   1          
5015   1        #ifdef Function_USE_Internal_RTC
                SystemTime = UTCToSystemtime(G_SystemUTCTime);
                #elif defined Function_USE_External_RTC
                PCF8563_ReadTime();
                #endif
5020   1        
5021   1        #ifdef Function_ScreenDisplay
                Display_Init();
                #endif
5024   1      
5025   1      }
5026          
5027          /*******************************************************/
5028          /*******************************************************/
5029          /*******************************************************/
5030          void GUI_Task(void)//
5031          {
5032   1        //uint8_t *Point;
5033   1        uint8_t i,j;
5034   1        if (++GUI_TimeCnt > 63)
5035   1        {
5036   2          GUI_ToggleFlag_1s^=0x01;
5037   2          GUI_TimeCnt =0;
5038   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
5039   2          {
5040   3            if(VoiceMgr.Enable == bFALSE)
5041   3            {
5042   4              VoiceMgr.Enable = bTRUE;
5043   4              DEF_ButtonPress_Voice;
5044   4              VoiceMgr.Enable = bFALSE;
5045   4            }
5046   3            else
5047   3            {
5048   4              DEF_ButtonPress_Voice;
5049   4            }
5050   3            RefreshSystemSleepTime();
5051   3          }
5052   2          #ifdef Function_FPMbreathingLed
5053   2          if( FpIdentifyMgr.BreathingLED > 0 )
5054   2          {
5055   3            FpIdentifyMgr.BreathingLED += 1;
5056   3            if( FpIdentifyMgr.BreathingLED == 4 )
5057   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 83  

5058   4              FpIdentifyMgr.BreathingLED = 0;
5059   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
5060   4            }
5061   3          }
5062   2          #endif
5063   2        }
5064   1        
5065   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
5066   2          GUI_ToggleFlag_05s^= 0x01;
5067   2        }
5068   1        
5069   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
5070   1        {
5071   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
5072   2        }
5073   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
5074   1        {
5075   2           LockBrand.BrandChangeTimeDelay--;
5076   2        }
5077   1      
5078   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
5079   1        {
5080   2          j=0;
5081   2          for (i=0;i<100;i++)
5082   2          {
5083   3            Hardware_DelayX5us(2);
5084   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
5085   3            {
5086   4              j++;
5087   4            }
5088   3          }
5089   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
5090   2          {
5091   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
5092   3          }
5093   2        }
5094   1        else
5095   1        {
5096   2          j=0;
5097   2          for (i=0;i<10;i++)
5098   2          {
5099   3            Hardware_DelayX5us(1);
5100   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
5101   3            {
5102   4              j++;
5103   4            }
5104   3          }
5105   2          if (j>8)
5106   2          {
5107   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
5108   3          }
5109   2        }
5110   1        
5111   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
5112   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
5113   1            &&( CurrentScreen != SCREEN_Initialization )
5114   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
5115   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
5116   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
5117   1        {
5118   2          CurrentScreen = SCREEN_PickLockAlarm;
5119   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:37:58 PAGE 84  

5120   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
5121   2          FpIdentifyMgr.Status = FPMcmdStart;
5122   2          CardIdentifyMgr.Status = ReadingCardID;
5123   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
5124   2          #ifdef Function_FPMbreathingLed
5125   2          SetFPMbreathingLed(FPMbreathingLed_Off);
5126   2          #endif
5127   2        }
5128   1        
5129   1        GUI_Button_Monitor();
5130   1        
5131   1        GUI_Update_Screen();
5132   1        
5133   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9120    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     45       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
