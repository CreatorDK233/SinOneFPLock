C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LEDSMGR
OBJECT MODULE PLACED IN .\Objects\LEDsMgr.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Drivers\Protocol\LEDsMgr.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.\
                    -Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\S
                    -oftwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic;.\Drivers\Protocol\YC_NFC;.\Drivers\Protocol\WIFI_Tuya) D
                    -EBUG PRINT(.\Listings\LEDsMgr.lst) TABS(2) OBJECT(.\Objects\LEDsMgr.obj)

line level    source

   1          #include "Project.h"
   2          #include "IO.h"
   3          #include "global_variable.h"
   4          
   5           uint8_t LEDsCtrlSwitch = 0;
   6           uint16_t KeyLEDsFlashTimeCnt;
   7           uint16_t LEDsWaterLightTimeCnt;
   8           uint16_t LEDsIdentifyFailTimeCnt;
   9          
  10          #define SET_LED_KEYPOUNDSIGN_ON   LEDsMgr.KeyPoundSignShouldBeOn = bTRUE;
  11          #define SET_LED_KEYPOUNDSIGN_OFF  LEDsMgr.KeyPoundSignShouldBeOn = bFALSE;
  12          #define SET_LED_KEYASTERISK_ON    LEDsMgr.KeyAsteriskShouldBeOn  = bTRUE;
  13          #define SET_LED_KEYASTERISK_OFF   LEDsMgr.KeyAsteriskShouldBeOn  = bFALSE;
  14          #define SET_LED_KEY9_ON       LEDsMgr.Key9ShouldBeOn  = bTRUE;
  15          #define SET_LED_KEY9_OFF      LEDsMgr.Key9ShouldBeOn  = bFALSE;
  16          #define SET_LED_KEY8_ON       LEDsMgr.Key8ShouldBeOn  = bTRUE;
  17          #define SET_LED_KEY8_OFF      LEDsMgr.Key8ShouldBeOn  = bFALSE;
  18          #define SET_LED_KEY7_ON       LEDsMgr.Key7ShouldBeOn  = bTRUE;
  19          #define SET_LED_KEY7_OFF      LEDsMgr.Key7ShouldBeOn  = bFALSE;
  20          #define SET_LED_KEY6_ON       LEDsMgr.Key6ShouldBeOn  = bTRUE;
  21          #define SET_LED_KEY6_OFF      LEDsMgr.Key6ShouldBeOn  = bFALSE;
  22          #define SET_LED_KEY5_ON       LEDsMgr.Key5ShouldBeOn  = bTRUE;
  23          #define SET_LED_KEY5_OFF      LEDsMgr.Key5ShouldBeOn  = bFALSE;
  24          #define SET_LED_KEY4_ON       LEDsMgr.Key4ShouldBeOn  = bTRUE;
  25          #define SET_LED_KEY4_OFF      LEDsMgr.Key4ShouldBeOn  = bFALSE;
  26          #define SET_LED_KEY3_ON       LEDsMgr.Key3ShouldBeOn  = bTRUE;
  27          #define SET_LED_KEY3_OFF      LEDsMgr.Key3ShouldBeOn  = bFALSE;
  28          #define SET_LED_KEY2_ON       LEDsMgr.Key2ShouldBeOn  = bTRUE;
  29          #define SET_LED_KEY2_OFF      LEDsMgr.Key2ShouldBeOn  = bFALSE;
  30          #define SET_LED_KEY1_ON       LEDsMgr.Key1ShouldBeOn  = bTRUE;
  31          #define SET_LED_KEY1_OFF      LEDsMgr.Key1ShouldBeOn  = bFALSE;
  32          #define SET_LED_KEY0_ON       LEDsMgr.Key0ShouldBeOn  = bTRUE;
  33          #define SET_LED_KEY0_OFF      LEDsMgr.Key0ShouldBeOn  = bFALSE;
  34          
  35          
  36          void SET_KEYLED_OFF(keycode_t key)
  37          {
  38   1        switch (key)
  39   1        {
  40   2        case KEY_ZERO:
  41   2            SET_LED_KEY0_OFF;
  42   2          break;
  43   2        case KEY_ONE:
  44   2            SET_LED_KEY1_OFF;
  45   2          break;
  46   2        case KEY_TWO:
  47   2            SET_LED_KEY2_OFF;
  48   2          break;
  49   2        case KEY_THREE:
  50   2            SET_LED_KEY3_OFF; 
  51   2          break;
  52   2        case KEY_FOUR:
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 2   

  53   2            SET_LED_KEY4_OFF; 
  54   2          break;
  55   2        case KEY_FIVE:
  56   2            SET_LED_KEY5_OFF;
  57   2          break;
  58   2        case KEY_SIX:
  59   2            SET_LED_KEY6_OFF;
  60   2          break;
  61   2        case KEY_SEVEN:
  62   2            SET_LED_KEY7_OFF;
  63   2          break;
  64   2        case KEY_EIGHT:
  65   2            SET_LED_KEY8_OFF;
  66   2          break;
  67   2        case KEY_NINE:
  68   2            SET_LED_KEY9_OFF;
  69   2          break;
  70   2        case KEY_ASTERISK:
  71   2            SET_LED_KEYASTERISK_OFF;
  72   2          break;
  73   2        case KEY_POUNDSIGN:
  74   2            SET_LED_KEYPOUNDSIGN_OFF;
  75   2          break;
  76   2        default:
  77   2            break;
  78   2        }
  79   1      }
  80          void SET_KEYLED_ON(keycode_t key)
  81          {
  82   1        switch (key)
  83   1        {
  84   2          case KEY_ZERO:
  85   2              SET_LED_KEY0_ON;
  86   2            break;
  87   2          case KEY_ONE:
  88   2              SET_LED_KEY1_ON;
  89   2            break;
  90   2          case KEY_TWO:
  91   2              SET_LED_KEY2_ON;
  92   2            break;
  93   2          case KEY_THREE:
  94   2              SET_LED_KEY3_ON;  
  95   2            break;
  96   2          case KEY_FOUR:
  97   2              SET_LED_KEY4_ON;  
  98   2            break;
  99   2          case KEY_FIVE:
 100   2              SET_LED_KEY5_ON;
 101   2            break;
 102   2          case KEY_SIX:
 103   2              SET_LED_KEY6_ON;
 104   2            break;
 105   2          case KEY_SEVEN:
 106   2              SET_LED_KEY7_ON;
 107   2            break;
 108   2          case KEY_EIGHT:
 109   2              SET_LED_KEY8_ON;
 110   2            break;
 111   2          case KEY_NINE:
 112   2              SET_LED_KEY9_ON;
 113   2            break;
 114   2          case KEY_ASTERISK:
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 3   

 115   2              SET_LED_KEYASTERISK_ON;
 116   2            break;
 117   2          case KEY_POUNDSIGN:
 118   2              SET_LED_KEYPOUNDSIGN_ON;
 119   2            break;
 120   2          default:
 121   2              break;
 122   2        }
 123   1      }
 124          
 125          
 126          /********************************************************************************************************
 127          *  Function:                                                               
 128          *  Object: 
 129          *  输入： 无
 130          *  输出： 无                                       
 131          *  备注:  无
 132          ********************************************************************************************************/
 133          void SET_AP_LED_ON(void)
 134          {
 135   1        SET_LED_KEY1_OFF;
 136   1        SET_LED_KEY2_OFF;
 137   1        SET_LED_KEY3_OFF; 
 138   1        SET_LED_KEY4_OFF; 
 139   1        SET_LED_KEY5_OFF;
 140   1        SET_LED_KEY6_OFF;
 141   1        SET_LED_KEY7_OFF;
 142   1        SET_LED_KEY8_OFF;
 143   1        SET_LED_KEY9_OFF;
 144   1        SET_LED_KEYASTERISK_ON;
 145   1        SET_LED_KEY0_OFF;
 146   1        SET_LED_KEYPOUNDSIGN_ON;
 147   1      }
 148          
 149          /********************************************************************************************************
 150          *  Function:                                                               
 151          *  Object: 
 152          *  输入： 无
 153          *  输出： 无                                       
 154          *  备注:  无
 155          ********************************************************************************************************/
 156          void SET_12A_LED_ON(void)
 157          {
 158   1        SET_LED_KEY1_ON;
 159   1        SET_LED_KEY2_ON;
 160   1        SET_LED_KEY3_OFF; 
 161   1        SET_LED_KEY4_OFF; 
 162   1        SET_LED_KEY5_OFF;
 163   1        SET_LED_KEY6_OFF;
 164   1        SET_LED_KEY7_OFF;
 165   1        SET_LED_KEY8_OFF;
 166   1        SET_LED_KEY9_OFF;
 167   1        SET_LED_KEYASTERISK_ON;
 168   1        SET_LED_KEY0_OFF;
 169   1        SET_LED_KEYPOUNDSIGN_OFF;
 170   1      }
 171          /********************************************************************************************************
 172          *  Function:                                                               
 173          *  Object: 
 174          *  输入： 无
 175          *  输出： 无                                       
 176          *  备注:  无
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 4   

 177          ********************************************************************************************************/
 178          void SET_123A_LED_ON(void)
 179          {
 180   1        SET_LED_KEY1_ON;
 181   1        SET_LED_KEY2_ON;
 182   1        SET_LED_KEY3_ON;  
 183   1        SET_LED_KEY4_OFF; 
 184   1        SET_LED_KEY5_OFF;
 185   1        SET_LED_KEY6_OFF;
 186   1        SET_LED_KEY7_OFF;
 187   1        SET_LED_KEY8_OFF;
 188   1        SET_LED_KEY9_OFF;
 189   1        SET_LED_KEYASTERISK_ON;
 190   1        SET_LED_KEY0_OFF;
 191   1        SET_LED_KEYPOUNDSIGN_OFF;
 192   1      
 193   1      }
 194          /********************************************************************************************************
 195          *  Function:                                                               
 196          *  Object: 
 197          *  输入： 无
 198          *  输出： 无                                       
 199          *  备注:  无
 200          ********************************************************************************************************/
 201          void SET_1234A_LED_ON(void)
 202          {
 203   1        SET_LED_KEY1_ON;
 204   1        SET_LED_KEY2_ON;
 205   1        SET_LED_KEY3_ON;  
 206   1        SET_LED_KEY4_ON;  
 207   1        SET_LED_KEY5_OFF;
 208   1        SET_LED_KEY6_OFF;
 209   1        SET_LED_KEY7_OFF;
 210   1        SET_LED_KEY8_OFF;
 211   1        SET_LED_KEY9_OFF;
 212   1        SET_LED_KEYASTERISK_ON;
 213   1        SET_LED_KEY0_OFF;
 214   1        SET_LED_KEYPOUNDSIGN_OFF;
 215   1      
 216   1      }
 217          
 218          /********************************************************************************************************
 219          *  Function:                                                               
 220          *  Object: 
 221          *  输入： 无
 222          *  输出： 无                                       
 223          *  备注:  无
 224          ********************************************************************************************************/
 225          void SET_123456A_LED_ON(void)
 226          {
 227   1        SET_LED_KEY1_ON;
 228   1        SET_LED_KEY2_ON;
 229   1        SET_LED_KEY3_ON;  
 230   1        SET_LED_KEY4_ON;  
 231   1        SET_LED_KEY5_ON;
 232   1        SET_LED_KEY6_ON;
 233   1        SET_LED_KEY7_OFF;
 234   1        SET_LED_KEY8_OFF;
 235   1        SET_LED_KEY9_OFF;
 236   1        SET_LED_KEYASTERISK_ON;
 237   1        SET_LED_KEY0_OFF;
 238   1        SET_LED_KEYPOUNDSIGN_OFF;
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 5   

 239   1      }
 240          
 241          
 242          /********************************************************************************************************
 243          *  Function:                                                               
 244          *  Object: 
 245          *  输入： 无
 246          *  输出： 无                                       
 247          *  备注:  无
 248          ********************************************************************************************************/
 249          void SET_ALLKEYLED_ON(void)
 250          {
 251   1        SET_LED_KEY1_ON;
 252   1        SET_LED_KEY2_ON;
 253   1        SET_LED_KEY3_ON;  
 254   1        SET_LED_KEY4_ON;  
 255   1        SET_LED_KEY5_ON;
 256   1        SET_LED_KEY6_ON;
 257   1        SET_LED_KEY7_ON;
 258   1        SET_LED_KEY8_ON;
 259   1        SET_LED_KEY9_ON;
 260   1        SET_LED_KEYASTERISK_ON;
 261   1        SET_LED_KEY0_ON;
 262   1        SET_LED_KEYPOUNDSIGN_ON;
 263   1      }
 264          
 265          /********************************************************************************************************
 266          *  Function:                                                               
 267          *  Object: 
 268          *  输入： 无
 269          *  输出： 无                                       
 270          *  备注:  无
 271          ********************************************************************************************************/
 272          void SET_ALLKEYLED_OFF(void)
 273          {
 274   1        SET_LED_KEY1_OFF;
 275   1        SET_LED_KEY2_OFF;
 276   1        SET_LED_KEY3_OFF; 
 277   1        SET_LED_KEY4_OFF; 
 278   1        SET_LED_KEY5_OFF;
 279   1        SET_LED_KEY6_OFF;
 280   1        SET_LED_KEY7_OFF;
 281   1        SET_LED_KEY8_OFF;
 282   1        SET_LED_KEY9_OFF;
 283   1        SET_LED_KEYASTERISK_OFF;
 284   1        SET_LED_KEY0_OFF;
 285   1        SET_LED_KEYPOUNDSIGN_OFF;
 286   1      
 287   1        SET_LEDKEYs_OFF;
 288   1        SET_LEDRGB_R_OFF;
 289   1        SET_LEDRGB_G_OFF;
 290   1        SET_LEDRGB_B_OFF;
 291   1      }
 292          
 293          void KEYLED_ASTERISK_Flash(void)
 294          {
 295   1        if ( ++KeyLEDsFlashTimeCnt >80 )
 296   1        {
 297   2          KeyLEDsFlashTimeCnt=0;
 298   2        }
 299   1        if ( KeyLEDsFlashTimeCnt < 40 )
 300   1        {
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 6   

 301   2          SET_ALLKEYLED_OFF();
 302   2        }
 303   1        else
 304   1        {
 305   2          SET_LED_KEYASTERISK_ON;
 306   2        }
 307   1      }
 308          void KEYLED_KEY5_Flash(void)
 309          {
 310   1        if ( ++KeyLEDsFlashTimeCnt >80 )
 311   1        {
 312   2          KeyLEDsFlashTimeCnt=0;
 313   2        }
 314   1        if ( KeyLEDsFlashTimeCnt < 40 )
 315   1        {
 316   2          SET_ALLKEYLED_OFF();
 317   2        }
 318   1        else
 319   1        {
 320   2          SET_LED_KEY5_ON;
 321   2        }
 322   1      }
 323          
 324          void Enable_KEYLED_IdentifyFail(void)
 325          {
 326   1        LEDsIdentifyFailTimeCnt = 81;
 327   1      }
 328          void KEYLED_IdentifyFail_Task(void)
 329          {
 330   1        uint8_t i;
 331   1        if ( LEDsIdentifyFailTimeCnt > 80 )
 332   1        {
 333   2          SET_ALLKEYLED_OFF();
 334   2        }
 335   1        else if ( LEDsIdentifyFailTimeCnt > 1 )
 336   1        {
 337   2          SET_LED_KEY5_ON;  
 338   2          i=LEDsIdentifyFailTimeCnt/8;
 339   2          if ( (i%2)==0)
 340   2          {
 341   3            SET_LED_KEY1_ON;
 342   3            SET_LED_KEY2_OFF;
 343   3            SET_LED_KEY3_ON;  
 344   3            SET_LED_KEY4_OFF; 
 345   3            SET_LED_KEY5_ON;
 346   3            SET_LED_KEY6_OFF;
 347   3            SET_LED_KEY7_ON;
 348   3            SET_LED_KEY8_OFF;
 349   3            SET_LED_KEY9_ON;
 350   3            SET_LED_KEYASTERISK_OFF;
 351   3            SET_LED_KEY0_ON;
 352   3            SET_LED_KEYPOUNDSIGN_OFF;
 353   3          }
 354   2          else if ( (i%2)==1)
 355   2          {
 356   3            SET_LED_KEY1_OFF;
 357   3            SET_LED_KEY2_ON;
 358   3            SET_LED_KEY3_OFF; 
 359   3            SET_LED_KEY4_ON;  
 360   3            SET_LED_KEY5_OFF;
 361   3            SET_LED_KEY6_ON;
 362   3            SET_LED_KEY7_OFF;
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 7   

 363   3            SET_LED_KEY8_ON;
 364   3            SET_LED_KEY9_OFF;
 365   3            SET_LED_KEYASTERISK_ON;
 366   3            SET_LED_KEY0_OFF;
 367   3            SET_LED_KEYPOUNDSIGN_ON;
 368   3      
 369   3          }
 370   2        }
 371   1        else if ( LEDsIdentifyFailTimeCnt == 1 )
 372   1        {
 373   2          SET_ALLKEYLED_OFF();
 374   2        }
 375   1        else 
 376   1        {
 377   2          //SET_LED_KEYASTERISK_ON;
 378   2        }
 379   1      
 380   1        if ( LEDsIdentifyFailTimeCnt > 0 )
 381   1        {
 382   2          LEDsIdentifyFailTimeCnt--;
 383   2      
 384   2        }
 385   1      }
 386          void Enable_KEYLED_WATERLIGHT(void)
 387          {
 388   1        LEDsWaterLightTimeCnt = 56;
 389   1      }
 390          
 391          void KEYLED_WATERLIGHT_Task(void)
 392          {
 393   1        uint8_t i;
 394   1        if ( LEDsWaterLightTimeCnt > 55 )
 395   1        {
 396   2          SET_ALLKEYLED_OFF();
 397   2        }
 398   1        else if ( LEDsWaterLightTimeCnt > 0 )
 399   1        {
 400   2          i=LEDsWaterLightTimeCnt/5;
 401   2          if ( (i%12)==11)
 402   2          {
 403   3            SET_LED_KEY8_ON;
 404   3            SET_LED_KEY5_ON;
 405   3          }
 406   2          else if ( (i%12)==10)
 407   2          {
 408   3            SET_LED_KEY8_OFF;
 409   3            SET_LED_KEY6_ON;
 410   3          }
 411   2          else if ( (i%12)==9)
 412   2          {
 413   3            SET_LED_KEY9_ON;
 414   3            SET_LED_KEY5_OFF;
 415   3          }
 416   2          else if ( (i%12)==8)
 417   2          {
 418   3            SET_LED_KEYPOUNDSIGN_ON;
 419   3            SET_LED_KEY6_OFF;
 420   3          }
 421   2          else if ( (i%12)==7)
 422   2          {
 423   3            SET_LED_KEY0_ON;
 424   3            SET_LED_KEY9_OFF;
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 8   

 425   3          }
 426   2          else if ( (i%12)==6)
 427   2          {
 428   3            SET_LED_KEYASTERISK_ON;
 429   3            SET_LED_KEYPOUNDSIGN_OFF;
 430   3          }
 431   2          else if ( (i%12)==5)
 432   2          {
 433   3            SET_LED_KEY7_ON;
 434   3            SET_LED_KEY0_OFF;
 435   3          }
 436   2          else if ( (i%12)==4)
 437   2          {
 438   3            SET_LED_KEY4_ON;
 439   3            SET_LED_KEYASTERISK_OFF;
 440   3          }
 441   2          else if ( (i%12)==3)
 442   2          {
 443   3            SET_LED_KEY1_ON;
 444   3            SET_LED_KEY7_OFF;
 445   3          }
 446   2          else if ( (i%12)==2)
 447   2          {
 448   3            SET_LED_KEY2_ON;
 449   3            SET_LED_KEY4_OFF;
 450   3          }
 451   2          else if ( (i%12)==1)
 452   2          {
 453   3            SET_LED_KEY3_ON;
 454   3            SET_LED_KEY1_OFF;
 455   3          }
 456   2          else if ( (i%12)==0)
 457   2          {
 458   3            SET_LED_KEY2_OFF;
 459   3            SET_LED_KEY3_OFF;
 460   3          }
 461   2        }
 462   1        else
 463   1        {
 464   2          //SET_ALLKEYLED_OFF();
 465   2          KEYLED_ASTERISK_Flash();
 466   2        }
 467   1      
 468   1        if ( LEDsWaterLightTimeCnt > 0 )
 469   1        {
 470   2          LEDsWaterLightTimeCnt--;
 471   2      
 472   2        }
 473   1      }
 474          
 475          
 476          void SET_LedCtrl1_H(void) 
 477          {
 478   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 479   1      //  GPIO_InitStruct.Pin = GPIO_PIN_6;
 480   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 481   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 482   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 483   1      //  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 484   1      //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 485   1      }
 486          void SET_LedCtrl1_L(void) 
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 9   

 487          {
 488   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 489   1      //  GPIO_InitStruct.Pin = GPIO_PIN_6;
 490   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 491   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 492   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 493   1      //  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 494   1      //  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 495   1      }
 496          void SET_LedCtrl1_Hi(void)  
 497          {
 498   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 499   1      //  GPIO_InitStruct.Pin = GPIO_PIN_6;
 500   1      //  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;;
 501   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 502   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 503   1      //  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 504   1      }
 505          void SET_LedCtrl2_H(void) 
 506          {
 507   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 508   1      //  GPIO_InitStruct.Pin = GPIO_PIN_11;
 509   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 510   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 511   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 512   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 513   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 514   1      }
 515          void SET_LedCtrl2_L(void) 
 516          {
 517   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 518   1      //  GPIO_InitStruct.Pin = GPIO_PIN_11;
 519   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 520   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 521   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 522   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 523   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET);
 524   1      }
 525          void SET_LedCtrl2_Hi(void)
 526          {
 527   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 528   1      //  GPIO_InitStruct.Pin = GPIO_PIN_11;
 529   1      //  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;;
 530   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 531   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 532   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 533   1      }
 534          void SET_LedCtrl3_H(void)
 535          {
 536   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 537   1      //  GPIO_InitStruct.Pin = GPIO_PIN_10;
 538   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 539   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 540   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 541   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 542   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 543   1      }
 544          void SET_LedCtrl3_L(void)
 545          {
 546   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 547   1      //  GPIO_InitStruct.Pin = GPIO_PIN_10;
 548   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 10  

 549   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 550   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 551   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 552   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 553   1      }
 554          void SET_LedCtrl3_Hi(void)
 555          {
 556   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 557   1      //  GPIO_InitStruct.Pin = GPIO_PIN_10;
 558   1      //  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;;
 559   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 560   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 561   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 562   1      }
 563          void SET_LedCtrl4_H(void) 
 564          {
 565   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 566   1      //  GPIO_InitStruct.Pin = GPIO_PIN_12;
 567   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 568   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 569   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 570   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 571   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 572   1      }
 573          void SET_LedCtrl4_L(void) 
 574          {
 575   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 576   1      //  GPIO_InitStruct.Pin = GPIO_PIN_12;
 577   1      //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 578   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 579   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 580   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 581   1      //  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 582   1      }
 583          void SET_LedCtrl4_Hi(void)
 584          {
 585   1      //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 586   1      //  GPIO_InitStruct.Pin = GPIO_PIN_12;
 587   1      //  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;;
 588   1      //  GPIO_InitStruct.Pull = GPIO_NOPULL;
 589   1      //  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 590   1      //  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 591   1      }
 592          
 593          void RGB_LEDMgr_Task(void)
 594          {
 595   1        switch (LEDsCtrlSwitch)
 596   1        {
 597   2        case FPMbreathingLed_Red:
 598   2          SET_LEDRGB_R_ON;
 599   2          SET_LEDRGB_B_OFF;
 600   2          SET_LEDRGB_G_OFF; 
 601   2          break;
 602   2      
 603   2        case FPMbreathingLed_Green:
 604   2          SET_LEDRGB_R_OFF;
 605   2          SET_LEDRGB_B_OFF;
 606   2          SET_LEDRGB_G_ON;
 607   2          break;
 608   2        
 609   2        default:
 610   2          SET_LEDRGB_R_OFF;
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 11  

 611   2          SET_LEDRGB_G_OFF;
 612   2          SET_LEDRGB_B_ON;
 613   2          break;
 614   2        }
 615   1      }
 616          
 617          void KEYLEDsMgr_Task(void)
 618          {
 619   1        SET_LEDKEYs_ON;
 620   1      }
 621          
 622          #ifdef Function_LEDwaterLamp
              void LEDsMgr_Task(void)
              {
                #ifndef DEBUG_MODE
                SET_LOGLED_ON;
                #endif
                
                if ( LEDsCtrlSwitch < 4 ){
                  LEDsCtrlSwitch++;
                }else {
                LEDsCtrlSwitch = 1;
                }
              
                if (
                  (LEDsMgr.Key0ShouldBeOn  == bFALSE )&&(LEDsMgr.Key1ShouldBeOn  == bFALSE )&&
                  (LEDsMgr.Key2ShouldBeOn  == bFALSE )&&(LEDsMgr.Key3ShouldBeOn  == bFALSE )&&
                  (LEDsMgr.Key4ShouldBeOn  == bFALSE )&&(LEDsMgr.Key5ShouldBeOn  == bFALSE )&&
                  (LEDsMgr.Key6ShouldBeOn  == bFALSE )&&(LEDsMgr.Key7ShouldBeOn  == bFALSE )&&
                  (LEDsMgr.Key8ShouldBeOn  == bFALSE )&&(LEDsMgr.Key9ShouldBeOn  == bFALSE )&&
                  (LEDsMgr.KeyAsteriskShouldBeOn  == bFALSE )&&(LEDsMgr.KeyPoundSignShouldBeOn  == bFALSE )
                  )
                {
                  SET_LedCtrl1_L(); 
                  SET_LedCtrl2_L();
                  SET_LedCtrl3_L();
                  SET_LedCtrl4_L();
                  return;
                }
                  
                if ( LEDsCtrlSwitch == 1 )
                {
                  SET_LedCtrl2_Hi();
                  SET_LedCtrl3_Hi();
                  SET_LedCtrl4_Hi();
                  SET_LedCtrl1_L();
                  
                  if ((LEDsMgr.Key1ShouldBeOn  == bTRUE )&&(LEDsMgr.Keycode != KEY_ONE)){
                    SET_LedCtrl2_H();
                  }
                  if (( LEDsMgr.Key3ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_THREE)){
                    SET_LedCtrl3_H();
                  } 
                  if (( LEDsMgr.Key5ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_FIVE)){
                    SET_LedCtrl4_H();
                  }     
                } 
                else if ( LEDsCtrlSwitch == 2 )
                {
                  SET_LedCtrl1_Hi();
                  SET_LedCtrl3_Hi();
                  SET_LedCtrl4_Hi();
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 12  

                  SET_LedCtrl2_L();
                  
                  if (( LEDsMgr.Key6ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_SIX)){
                    SET_LedCtrl1_H();
                  }
                  if (( LEDsMgr.Key4ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_FOUR)){
                    SET_LedCtrl3_H();
                  } 
                  if (( LEDsMgr.Key8ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_EIGHT)){
                    SET_LedCtrl4_H();
                  }   
                }
                else if ( LEDsCtrlSwitch == 3 )
                {
                  SET_LedCtrl1_Hi();
                  SET_LedCtrl2_Hi();
                  SET_LedCtrl4_Hi();
                  SET_LedCtrl3_L();
                  
                  if (( LEDsMgr.Key2ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_TWO)){
                    SET_LedCtrl1_H();
                  }
                  if (( LEDsMgr.Key9ShouldBeOn == bTRUE)&&(LEDsMgr.Keycode != KEY_NINE)){
                    SET_LedCtrl2_H();
                  } 
                  if (( LEDsMgr.Key7ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_SEVEN)){
                    SET_LedCtrl4_H();
                  }     
                }
                else if ( LEDsCtrlSwitch == 4 )
                {
                  SET_LedCtrl1_Hi();
                  SET_LedCtrl2_Hi();
                  SET_LedCtrl3_Hi();
                  SET_LedCtrl4_L();
                  
                  if (( LEDsMgr.KeyAsteriskShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_ASTERISK)){
                    SET_LedCtrl1_H();
                  }
                  if (( LEDsMgr.KeyPoundSignShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_POUNDSIGN)){
                    SET_LedCtrl2_H();
                  } 
                  if (( LEDsMgr.Key0ShouldBeOn  == bTRUE)&&(LEDsMgr.Keycode != KEY_ZERO)){
                    SET_LedCtrl3_H();
                  }     
                } 
              }
              #else
 721          void LEDsMgr_Task(void)
 722          {
 723   1        //KEYLEDsMgr_Task();
 724   1        RGB_LEDMgr_Task();
 725   1      }
 726          #endif
 727          
 728          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    984    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7    ----
C51 COMPILER V9.60.0.0   LEDSMGR                                                           05/16/2023 16:37:56 PAGE 13  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
