C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic;.\Drivers\Protocol\YC_NFC;.\Drivers\Protocol\WIFI_Tuya) 
                    -DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Objects\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          #include "TuyaWIFI.h"
   8          //Logic layer
   9          #include "AppUnlock.h"
  10          #include "KeyScan.h"
  11          #include "Motor.h"
  12          #include "Log.h"
  13          #include "FP.h"
  14          #include "LCD.h"
  15          #include "MFC.h"
  16          #include "RTC.h"
  17          //Application layer
  18          #include "GUI.h"
  19          #include "GUI_Function.h"
  20          #include "Basic_Function.h"
  21          #include "Voice_Menu.h"
  22          #include "Font_Menu.h"
  23          #include "Font.h"
  24          
  25          struct
  26          {
  27            enum{
  28              SetYearMajor=0,
  29              SetYearMinor=1,
  30              SetMonthMajor,
  31              SetMonthMinor,
  32              SetDateMajor,
  33              SetDateMinor,
  34              SetHourMajor,
  35              SetHourMinor,
  36              SetMinuteMajor,
  37              SetMinuteMinor,
  38              SetSecondMajor,
  39              SetSecondMinor
  40            }Status;
  41          
  42          }TimeSettingMgr;
  43          
  44          screen_t LastScreen;
  45          VoiceMenuMgr_t VoiceMenuMgr;
  46          DataInputMgr_t DataInputMgr;
  47          PasscodeInputMgr_t PasscodeInputMgr;
  48          uint8_t GUI_TimeCnt;
  49          uint8_t GUI_ToggleFlag_1s;
  50          uint8_t GUI_ToggleFlag_05s;
  51          bool_t GUI_Flag_RefreshLCD;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 2   

  53          keycode_t gui_keycode = KEY_NONE;
  54          
  55          uint8_t PasscodeBUFF1[12];
  56          
  57          /*******************************************************/
  58          /*******************************************************
  59          /*******************************************************/
  60          void ShowIdentifySuccessPage(void)//认证成功页面
  61          {
  62   1        #ifdef Function_ScreenDisplay
                uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
                uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
                uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
              //  uint8_t InitialStatusStrEn[]={"Initial"};
                #endif  
  70   1      
  71   1        if ( MotorMgr.MotorStatus != IDLE )
  72   1        {
  73   2          #ifdef Function_ScreenDisplay
                  DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
                  
                  if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
                    {
                        DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
                        DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    else*/
                    {
                      DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
                      DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
                  {
                    
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 3   

                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
                  {
                  
                      DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
                  }
                  DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
                  
                  #endif 
 138   2          
 139   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 140   2          {
 141   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 142   3            
 143   3            #ifdef Function_TuyaWifi
                    if( UserIdentifyResultMgr.IdentifyType == WIFITEMPPASSCODE )
                    {
                      WifiMgr.PostMgr.Flag.Bits.TempPasswordUnlock = 1;
                    }
                    else if( UserIdentifyResultMgr.IdentifyType != RemoteUnlock )
                    {
                      WifiMgr.PostMgr.Flag.Bits.Unlock = 1;
                    }
                    #endif
 153   3            
 154   3            #ifdef Function_FPMbreathingLed
 155   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 156   3            //{
 157   3              SetFPMbreathingLed(FPMbreathingLed_Green);
 158   3            //}
 159   3            #endif  
 160   3                  
 161   3          }
 162   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 163   2          {
 164   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 165   3            {
 166   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 167   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 168   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 169   4              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(OpenDoor);
                      #endif
 172   4            }
 173   3            else if ( MotorMgr.CCWWAITTimer == 1)
 174   3            {
 175   4              //EMAGNET_RelaseTrigger();
 176   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 4   

 177   3          }
 178   2        }
 179   1        else
 180   1        {
 181   2          #ifdef Function_ScreenDisplay
                  GUI_Flag_RefreshLCD = bTRUE;
                  DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
                    DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
                  #endif
 186   2          
 187   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 188   2          {
 189   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 190   3            {
 191   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 192   4            }
 193   3            UserIdentifyResultMgr.TimeCnt--;
 194   3          }
 195   2          else
 196   2          {
 197   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 198   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 199   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 200   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 201   3            CardIdentifyMgr.Status = ReadingCardID;
 202   3            FpIdentifyMgr.Status = FPMcmdStart;
 203   3            CurrentScreen = SCREEN_Main;  
 204   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 205   3            
 206   3      //      #ifdef Function_FPMbreathingLed
 207   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 208   3      //      #endif  
 209   3          }
 210   2        }
 211   1      
 212   1      }
 213          /*******************************************************/
 214          /*******************************************************/
 215          /*******************************************************/
 216          void ShowIdentifyFailPage(void)//认证失败页面
 217          {
 218   1        #ifdef Function_ScreenDisplay
                DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
                
                if ( UserIdentifyResultMgr.IdentifyType == CARD )
                {
                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                {
                  if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
                  {
                    DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
                    DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
                  }
                  else
                  {
                    DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                  }
                }
                else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 5   

                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                #endif
 242   1        
 243   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 244   1        {
 245   2          #ifdef Function_FPMbreathingLed
 246   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 247   2          //{
 248   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 249   2          //}
 250   2          #endif
 251   2          #ifdef Function_TuyaWifi
                  WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                  if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    WifiMgr.PostMgr.AlarmType = FingerErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    WifiMgr.PostMgr.AlarmType = PasswordErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    WifiMgr.PostMgr.AlarmType = CardErrorAlarm;
                  }
                  #endif
 266   2        }
 267   1      
 268   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 269   1        {
 270   2          UserIdentifyResultMgr.TimeCnt--;
 271   2        }
 272   1        else
 273   1        {
 274   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 275   2          CardIdentifyMgr.Status = ReadingCardID;
 276   2          FpIdentifyMgr.Status = FPMcmdStart;
 277   2          CurrentScreen = SCREEN_Main;
 278   2          RefreshSystemSleepTime();
 279   2          
 280   2          #ifdef Function_FPMbreathingLed
 281   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 282   2          #endif
 283   2        }
 284   1      }
 285          
 286          /*******************************************************/
 287          /*******************************************************/
 288          /*******************************************************/
 289          void DisplayMainPage(void)//界面_主页面
 290          {
 291   1        #ifdef Function_ScreenDisplay
                code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
              //  code uint8_t Str1En[]={"Sys without"};
                code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t Str2En[]={"admin."};
                code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t Str3En[]={"Input 2nd ID"};
                code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 6   

             -HZ_end};
              //  code uint8_t Str4En[]={"Press # to menu"};
              
                uint8_t Empty32X20[80]={
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                };
              
                DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
                DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
                DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
                DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
                DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
                  
                  if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
                  {
                    if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
                        ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
                      )
                    {
                      DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                      
                    else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisHZ16x14Str(3,4,Str4,NormalDisplay);          
                    }
                    
                    else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
                    {
                      Clear_Screen_Page(2);
                      Clear_Screen_Page(3);
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
                      DisHZ16x14Str(2,40,Str1,NormalDisplay);
                      DisHZ16x14Str(4,40,Str2,NormalDisplay);
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                    else
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
                      DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
              //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        if (GUI_ToggleFlag_05s == 0 )
                        {
                          DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
                        }
                        else
                        {
                          DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        }
                    }
                    //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 7   

                    ShowLockBrand();
                  }
                #endif
 365   1      }
 366          
 367          /*******************************************************/
 368          void GUI_UpadteMain(void)//GUI_主界面
 369          {
 370   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 371   1        {
 372   2          CurrentScreen = SCREEN_SystemLocked;
 373   2          #ifdef Function_FPMbreathingLed
 374   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 375   2          #endif
 376   2        }
 377   1        
 378   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 379   1        {
 380   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 381   2          CardUserIdentify();
 382   2        }
 383   1      
 384   1        
 385   1        if ( CardIdentifyMgr.Status == Success)
 386   1        {
 387   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 388   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 389   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 390   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 391   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 392   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 393   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 394   2          {
 395   3            UnlockSuccess(CARD);
 396   3          }
 397   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 398   2          {
 399   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 400   3            {
 401   4              UnlockSuccess(CARDandPASSCODE);
 402   4            }
 403   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 404   3            { 
 405   4              UnlockSuccess(FINGERPRINTandCARD);
 406   4            }
 407   3            else{ 
 408   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 409   4              {
 410   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 411   5                //CardIdentifyMgr.Status = ReadingCardID;
 412   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 413   5              }
 414   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 415   4              {
 416   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 417   5                {
 418   6                  CardIdentifyMgr.Status = ReadingCardID;
 419   6                }
 420   5                UserIdentifyResultMgr.VoiceDelay--;
 421   5              }
 422   4            }
 423   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 8   

 424   2        }
 425   1        else if ( CardIdentifyMgr.Status == Fail)
 426   1        {
 427   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 428   2          {
 429   3      //      if ( (CardIdentifyMgr.CID[0] == 0x16)
 430   3      //        &&(CardIdentifyMgr.CID[1] == 0xD4)
 431   3      //        &&(CardIdentifyMgr.CID[2] == 0xDB)
 432   3      //        &&(CardIdentifyMgr.CID[3] == 0x3C) )
 433   3      //      {
 434   3      //        DEBUG_MARK;
 435   3      //        if ( LockBrand.BrandChangeTimeDelay == 0 )
 436   3      //        {
 437   3      //          WriteLockBrand();
 438   3      //          if ( LockBrand.GotBrandData == bTRUE )
 439   3      //          {
 440   3      //            DEBUG_MARK;
 441   3      //            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 442   3      //            LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 443   3      //            RefreshSystemSleepTime();
 444   3      //          }
 445   3      //        }
 446   3      //        CardIdentifyMgr.Status = ReadingCardID;
 447   3      //      }
 448   3      //      else
 449   3      //      {
 450   3              UnlockSuccess(INITIALSTATUS);
 451   3              RefreshSystemSleepTime();
 452   3      //      }
 453   3          }
 454   2          else
 455   2          {
 456   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 457   3            UserIdentifyResultMgr.IdentifyType = CARD;
 458   3            UserIdentifyResultMgr.CardUserID = 0x00;
 459   3            //Enable_KEYLED_IdentifyFail();
 460   3            CurrentScreen = SCREEN_IdentifyFail;
 461   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 462   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 463   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 464   3            {
 465   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 466   4            }
 467   3            else
 468   3            {
 469   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 470   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 471   4            }
 472   3          }
 473   2        }
 474   1      
 475   1        FpUserIdentify();
 476   1        if ( FpIdentifyMgr.Status == success)
 477   1        {
 478   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 479   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 480   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 481   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 482   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 483   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 484   2          {
 485   3            UnlockSuccess(FINGERPRINT);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 9   

 486   3          }
 487   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 488   2          {
 489   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 490   3            {
 491   4              UnlockSuccess(FINGERPRINTandCARD);
 492   4            }
 493   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 494   3            {
 495   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 496   4            }
 497   3            else
 498   3            {
 499   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 500   4              {
 501   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 502   5                //FpIdentifyMgr.Status = FPMcmdStart;
 503   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 504   5              }
 505   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 506   4              {
 507   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 508   5                {
 509   6                  FpIdentifyMgr.Status = FPMcmdStart;
 510   6                }
 511   5                UserIdentifyResultMgr.VoiceDelay--;
 512   5              }
 513   4            }
 514   3          }
 515   2        }
 516   1        else if ( FpIdentifyMgr.Status == fail)
 517   1        {
 518   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 519   2          {
 520   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 521   3          }
 522   2          else{
 523   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 524   3          }
 525   2          
 526   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 527   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 528   2            )
 529   2          {
 530   3            UnlockSuccess(INITIALSTATUS);
 531   3          }
 532   2          else
 533   2          {
 534   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 535   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 536   3            UserIdentifyResultMgr.FPUserID = 0x00;
 537   3            //Enable_KEYLED_IdentifyFail();
 538   3            CurrentScreen = SCREEN_IdentifyFail;
 539   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 540   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 541   3            
 542   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 543   3            {
 544   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 545   4            }
 546   3            else
 547   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 10  

 548   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 549   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 550   4            }
 551   3          
 552   3          }
 553   2      
 554   2        }
 555   1      
 556   1        PasscodeUserIdentify();
 557   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 558   1        {
 559   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 560   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 561   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 562   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 563   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 564   2          if ( (UserIdentifyResultMgr.UnlockingMode == SingalMode)
 565   2            || (UserIdentifyResultMgr.PasscodeType == AppPasscode)
 566   2            || (UserIdentifyResultMgr.PasscodeType == WifiTempPasscode) )
 567   2          {
 568   3            #ifdef Function_TuyaWifi
                    if(UserIdentifyResultMgr.PasscodeType == WifiTempPasscode){
                      UnlockSuccess(WIFITEMPPASSCODE);
                    }
                    else
                    #endif
 574   3            {
 575   4              UnlockSuccess(PASSCODE);
 576   4            }
 577   3          }
 578   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 579   2          {
 580   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 581   3            {
 582   4              UnlockSuccess(CARDandPASSCODE);
 583   4            }
 584   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 585   3            { 
 586   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 587   4            }
 588   3            else
 589   3            {
 590   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 591   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 592   4              UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 593   4            }
 594   3          }
 595   2        }
 596   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 597   1        {
 598   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 599   2          {
 600   3            UnlockSuccess(INITIALSTATUS);
 601   3          }
 602   2          else
 603   2          {
 604   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 605   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 606   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 607   3            //Enable_KEYLED_IdentifyFail();
 608   3            CurrentScreen = SCREEN_IdentifyFail;
 609   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 11  

 610   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 611   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 612   3            {
 613   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 614   4            }
 615   3            else
 616   3            {
 617   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 618   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 619   4            }
 620   3          }
 621   2        }
 622   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 623   1        {
 624   2          AgingTestMgr.TestTimes=0x0000;    
 625   2          CurrentScreen = SCREEN_AgingTest;
 626   2        }
 627   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 628   1        {
 629   2          GoToSystemVersion();
 630   2        }
 631   1        else if (PasscodeUserIdentifyMgr.Status == DeleteWifiTempPasscodeSuccess )
 632   1        {
 633   2          PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 634   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 635   2        }
 636   1        
 637   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 638   1        {
 639   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 640   2                ( (UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 641   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 642   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ) )
 643   2              )
 644   2          {
 645   3          }
 646   2        }
 647   1        #ifdef Function_TuyaWifi
                if( WifiMgr.WifiConnection.Status == JustConnected )
                {
                  WifiMgr.WifiConnection.Status = Connected;
                  //PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                }
                #endif
 654   1        #ifdef Function_ScreenDisplay
                  DisplayMainPage();
                #endif
 657   1      
 658   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 659   1        {
 660   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  #endif
 663   2          //SET_ALLKEYLED_OFF();
 664   2        }
 665   1        
 666   1      }
 667          
 668          /*******************************************************/
 669          void ShowDoorBell(void)
 670          {
 671   1        #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 12  

                DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
                #endif
 674   1        if ( DoorBellMgr.TimeCnt > 0 )
 675   1        {
 676   2          #ifdef Function_TuyaWifi
                  if( DoorBellMgr.TimeCnt == 150 )
                  {
                    WifiMgr.RemoteUnlockMgr.WaitRequestRemoteUnlock = bTRUE;
                  }
                  #endif
 682   2          DoorBellMgr.TimeCnt--;
 683   2        }
 684   1        else
 685   1        {
 686   2          CurrentScreen = SCREEN_Main;
 687   2        }
 688   1      }
 689          
 690          
 691          /*******************************************************/
 692          /*******************************************************/
 693          /*******************************************************/
 694          void ShowMainMenu(void)//界面-主菜单
 695          {
 696   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<1;j++)
                  {
                    DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 714   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 715   1        {
 716   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 717   2          {
 718   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 719   3            VoiceMenuMgr.MenuPoint++;
 720   3          }
 721   2        }
 722   1      }
 723          /*******************************************************/
 724          /*******************************************************/
 725          /*******************************************************/
 726          void ShowLogMenu(void)//界面-日志菜单
 727          {
 728   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                  DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
                }   
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 13  

                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 736   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 737   1        {
 738   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 739   2          {
 740   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 741   3            VoiceMenuMgr.MenuPoint++;
 742   3          }
 743   2        }
 744   1        
 745   1      }
 746          
 747          /*******************************************************/
 748          /*******************************************************/
 749          /*******************************************************/
 750          void ShowFpMenu(void)//界面-指纹菜单
 751          {
 752   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 760   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 761   1        {
 762   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 763   2          {
 764   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 765   3            VoiceMenuMgr.MenuPoint++;
 766   3          }
 767   2        }
 768   1      }
 769          
 770          
 771          /*******************************************************/
 772          /*******************************************************/
 773          /*******************************************************/
 774          void ShowPasscodeMenu(void)//界面-密码菜单
 775          {
 776   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
                } 
                #endif
 783   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 784   1        {
 785   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 786   2          {
 787   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 788   3            VoiceMenuMgr.MenuPoint++;
 789   3          }
 790   2        } 
 791   1      
 792   1      }
 793          
 794          /*******************************************************/
 795          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 14  

 796          /*******************************************************/
 797          void ShowCardUserMenu(void)//界面-磁卡菜单
 798          {
 799   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                    DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
                } 
                #endif
 806   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 807   1        {
 808   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 809   2          {
 810   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 811   3            VoiceMenuMgr.MenuPoint++;
 812   3          }
 813   2        } 
 814   1      }
 815          
 816          /*******************************************************/
 817          /*******************************************************/
 818          /*******************************************************/
 819          void ShowSystemConfigMenu(void)//系统配置菜单
 820          {
 821   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<2;j++)
                  {
                    DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 839   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 840   1        {
 841   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 842   2          {
 843   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 844   3            VoiceMenuMgr.MenuPoint++;
 845   3          }
 846   2        }   
 847   1      }
 848          /*******************************************************/
 849          /*******************************************************/
 850          /*******************************************************/
 851          void ShowNetWorkConnecting(void)//联网中
 852          {
 853   1        #ifdef Function_TuyaWifi
                if ( WifiMgr.Link.Status == LinkStart )
                {
                  WifiMgr.Link.Status = LinkWait;
                  WifiMgr.Link.TimeCnt = 120*64;  //120S
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 15  

                  WifiMgr.PostMgr.Flag.Bits.StartNetwork = 1;
                  WifiMgr.OFFPowerCnt = 0;
                  PLAY_VOICE_ONESEGMENT(VOICE_NetworkingConfiguration);
                }
                else if ( WifiMgr.Link.Status == LinkWait )
                {
                  WifiMgr.OFFPowerCnt = 0;
                  if( WifiMgr.WifiConnection.Status == JustConnected )
                  {
                    WifiMgr.WifiConnection.Status = Connected;
                    WifiMgr.Link.Status = LinkSuccess;
                  }
                  RefreshSystemSleepTime();
                }
                else if ( WifiMgr.Link.Status == LinkSuccess )
                {
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                else if ( WifiMgr.Link.Status == LinkFail )
                {
                  //if ( WifiMgr.Link.errorcode == 0x02 ) //wifi module not be found
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Fail);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                
                if( WifiMgr.Link.TimeCnt > 0){
                  WifiMgr.Link.TimeCnt--;
                }
                else
                {
                  if ( WifiMgr.Link.Status == LinkWait )
                  {
                    WifiMgr.Link.Status = LinkFail;
                    //WifiMgr.Link.errorcode = 0x01;
                  }
                  else
                  {
                    GoToMainMenu();
                  }
                }
                #endif
 902   1      }
 903          
 904          /*******************************************************/
 905          /*******************************************************/
 906          /*******************************************************/
 907          void ShowRegisterMasterFp(void)//界面-注册管理员指纹
 908          {
 909   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
 913   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 914   1        {
 915   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 916   2          {
 917   3            FpUserRegisterMgr.Status = AddUserToFPM;
 918   3            FpRegisterMgr.Status = FPMcmdStart;
 919   3            DataInputMgr.Status = InputIdle;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 16  

 920   3          }
 921   2          else
 922   2          {
 923   3            FpUserRegisterMgr.Status = RegisterUserFail;
 924   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 925   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 926   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 927   3            Hardware_DelayMs(100);
 928   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
 932   3          }
 933   2        }
 934   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 935   1        {
 936   2          FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 937   2          
 938   2          RegisterFp(FpUserRegisterMgr.UserID-1);
 939   2          
 940   2          if (FpRegisterMgr.Status == success)
 941   2          {
 942   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
 943   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 944   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 945   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
 949   3            //GUI_Flag_RefreshLCD = bTRUE;
 950   3            CheckMemoryMgr.FpMasterNum+=1;
 951   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 952   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 953   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 954   3      //      #ifdef Function_TuyaWifi
 955   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
 956   3      //      #endif
 957   3          }
 958   2          else if (FpRegisterMgr.Status == fail)
 959   2          {
 960   3            FpUserRegisterMgr.Status = RegisterUserFail;
 961   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 962   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 963   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 964   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 965   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
 969   4            }
 970   3            else
 971   3            {
 972   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 973   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
 977   4            }
 978   3            //GUI_Flag_RefreshLCD = bTRUE;
 979   3          }
 980   2        }
 981   1      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 17  

 982   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 983   1        {
 984   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 985   2          {
 986   3            GoToFpMenu();
 987   3            RefreshSystemSleepTime();
 988   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
 991   3      
 992   3            DEBUG_MARK;
 993   3          }
 994   2        }
 995   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
 996   1        {
 997   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
 998   2          {
 999   3            
1000   3          }
1001   2          
1002   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1003   2          {
1004   3          
1005   3          }
1006   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1007   2          {
1008   3        
1009   3          }
1010   2          else
1011   2          {
1012   3      
1013   3          }
1014   2          
1015   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1016   2          {
1017   3            GoToFpMenu();
1018   3          }
1019   2          DEBUG_MARK;
1020   2        }
1021   1      }
1022          
1023          /*******************************************************/
1024          /*******************************************************/
1025          /*******************************************************/
1026          void ShowDeleteMasterFp(void)//删除管理员指纹
1027          {
1028   1        //uint8_t i;
1029   1      
1030   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1031   1        {
1032   2          FpUserDeleteMgr.Status = InputUserID;
1033   2          DataInputMgr.Status = InputIdle;
1034   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1035   2        }
1036   1        
1037   1        if ( FpUserDeleteMgr.Status == InputUserID )
1038   1        {
1039   2          
1040   2          GUI_DataInputCreat(5,72,2,0x0000);
1041   2      
1042   2          if (DataInputMgr.Status == InputEnd)
1043   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 18  

1044   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
1045   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
1046   3            {
1047   4              DataInputMgr.Status = InputIdle;    //Reinput
1048   4            }
1049   3            else
1050   3            {
1051   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1052   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1053   4              DataInputMgr.Status = InputIdle;  
1054   4            }
1055   3          }
1056   2          else if  (DataInputMgr.Status == InputExit)
1057   2          {
1058   3            FpUserDeleteMgr.Status = DeleteUserFail;
1059   3            FpUserDeleteMgr.ErrorType = QUIT;
1060   3            FpUserDeleteMgr.TimeCnt = 0;  
1061   3          }
1062   2        }
1063   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1064   1        {
1065   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1066   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1067   2          {
1068   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1069   3            {
1070   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
1071   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
1072   4              {
1073   5                FpUserDeleteMgr.Status = DeleteUserFail;
1074   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
1075   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1076   5                //GUI_Flag_RefreshLCD = bTRUE;
1077   5                DEF_Fail_Beep;
1078   5              }
1079   4              else
1080   4              {
1081   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1082   5                DataInputMgr.Status = InputIdle;  
1083   5                //GUI_Flag_RefreshLCD = bTRUE;
1084   5              }
1085   4            }
1086   3            else
1087   3            {
1088   4              FpUserDeleteMgr.Status = DeleteUserFail;
1089   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1090   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1091   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1092   4              //GUI_Flag_RefreshLCD = bTRUE;
1093   4            }
1094   3          }
1095   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1096   2          {
1097   3            FpUserDeleteMgr.Status = DeleteUserFail;
1098   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1099   3            FpUserDeleteMgr.ErrorType = QUIT;
1100   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1101   3            //GUI_Flag_RefreshLCD = bTRUE;
1102   3          }
1103   2        }
1104   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1105   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 19  

1106   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1107   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1108   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1109   2          FpmAckMgr.Status = WaitACK;
1110   2        }
1111   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1112   1          {
1113   2            if (FpmAckMgr.Status == GotACK)
1114   2              {
1115   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1116   3                {
1117   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1118   4                  //GUI_Flag_RefreshLCD = bTRUE;
1119   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1120   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1121   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1122   4                  {
1123   5                    CheckMemoryMgr.FpMasterNum-=1;
1124   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1125   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1126   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1127   5                  }
1128   4                }
1129   3                else
1130   3                {
1131   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1132   4                  //GUI_Flag_RefreshLCD = bTRUE;
1133   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1134   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1135   4                }
1136   3                DEBUG_MARK;
1137   3              }
1138   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1139   2              {
1140   3                FpUserDeleteMgr.Status = DeleteUserFail;
1141   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1142   3                //GUI_Flag_RefreshLCD = bTRUE;
1143   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1144   3              }
1145   2      
1146   2          }
1147   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1148   1          {
1149   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1150   2            {
1151   3              CurrentScreen = SCREEN_MasterFpMenu;
1152   3              UnlockModeJudgment();
1153   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1156   3            }
1157   2            DEBUG_MARK;
1158   2          }
1159   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1160   1          {
1161   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1162   2            {
1163   3              
1164   3            }
1165   2            /*
1166   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1167   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 20  

1168   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1169   2            }
1170   2            */
1171   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1172   2            {
1173   3              
1174   3            }
1175   2            else
1176   2            {
1177   3      
1178   3            }
1179   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1180   2            {
1181   3              CurrentScreen = SCREEN_MasterFpMenu;
1182   3            }
1183   2            DEBUG_MARK;
1184   2          }
1185   1        
1186   1      }
1187          /*******************************************************/
1188          /*******************************************************/
1189          /*******************************************************/
1190          void ShowRegisterUserFp(void)//界面-注册用户指纹
1191          {
1192   1        //uint8_t i;
1193   1        //uint16_t UserID;  
1194   1        //~{Lm<SV8NFSC;'~}
1195   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
1199   1        
1200   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1201   1        {
1202   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1203   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1204   2          )
1205   2          {
1206   3            FpUserRegisterMgr.Status = RegisterUserFail;
1207   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1208   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1209   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1210   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1214   3            //GUI_Flag_RefreshLCD = bTRUE;
1215   3          } 
1216   2          else
1217   2          {
1218   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1219   3            {
1220   4              FpUserRegisterMgr.Status = AddUserToFPM;
1221   4              FpRegisterMgr.Status = FPMcmdStart;
1222   4              DataInputMgr.Status = InputIdle;
1223   4            }
1224   3            else
1225   3            {
1226   4              FpUserRegisterMgr.Status = RegisterUserFail;
1227   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1228   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1229   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 21  

1230   4              Hardware_DelayMs(100);
1231   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                      #endif
1235   4              //GUI_Flag_RefreshLCD = bTRUE;
1236   4            }
1237   3          }
1238   2        }
1239   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1240   1        {
1241   2          FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1242   2          
1243   2          RegisterFp(FpUserRegisterMgr.UserID-1);
1244   2          
1245   2          if (FpRegisterMgr.Status == success)
1246   2          {
1247   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
1248   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1249   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1250   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1254   3            CheckMemoryMgr.FpUserNum+=1;
1255   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1256   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1257   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1258   3      //      #ifdef Function_TuyaWifi
1259   3      //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
1260   3      //      #endif
1261   3          }
1262   2          else if (FpRegisterMgr.Status == fail)
1263   2          {
1264   3            FpUserRegisterMgr.Status = RegisterUserFail;
1265   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1266   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1267   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1268   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1269   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                      #endif
1273   4              //GUI_Flag_RefreshLCD = bTRUE;
1274   4            }
1275   3            else
1276   3            {
1277   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1278   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                      #endif
1282   4              //GUI_Flag_RefreshLCD = bTRUE;
1283   4            }
1284   3          }
1285   2        }
1286   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1287   1        {
1288   2          
1289   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1290   2          {
1291   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 22  

1292   3            GoToFpMenu();
1293   3            RefreshSystemSleepTime();
1294   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
1297   3          }
1298   2          DEBUG_MARK;
1299   2        }
1300   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1301   1        {   
1302   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1303   2          {
1304   3          
1305   3          }
1306   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1307   2          {
1308   3            
1309   3          }
1310   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1311   2          {
1312   3            
1313   3          }
1314   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1315   2          {
1316   3            
1317   3          }
1318   2          else
1319   2          {
1320   3            
1321   3          }
1322   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1323   2          {
1324   3            GoToFpMenu();
1325   3          }
1326   2          DEBUG_MARK;
1327   2        }
1328   1      }
1329          
1330          /*******************************************************/
1331          /*******************************************************/
1332          /*******************************************************/
1333          void ShowDeleteUserFp(void)//界面-删除用户指纹
1334          {
1335   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1336   1        {
1337   2          FpUserDeleteMgr.Status = InputUserID;
1338   2          DataInputMgr.Status = InputIdle;
1339   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1340   2        }
1341   1        if ( FpUserDeleteMgr.Status == InputUserID )
1342   1        {
1343   2            
1344   2            GUI_DataInputCreat(5,80,3,0x0000);
1345   2        
1346   2            if (DataInputMgr.Status == InputEnd)
1347   2            {
1348   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1349   3              if ((FpUserDeleteMgr.UserID >DEF_MAX_FPMASTER )&&( FpUserDeleteMgr.UserID < (DEF_MAX_FPMASTER+DEF_MAX_
             -FPUSER+1)) )
1350   3              {
1351   4                FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1352   4                CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 23  

1353   4                DataInputMgr.Status = InputIdle;
1354   4              }
1355   3              else        
1356   3              {
1357   4                DataInputMgr.Status = InputIdle;    //Reinput
1358   4              }
1359   3      
1360   3            }
1361   2            else if  (DataInputMgr.Status == InputExit)
1362   2            {
1363   3              FpUserDeleteMgr.Status = DeleteUserFail;
1364   3              FpUserDeleteMgr.ErrorType = QUIT;
1365   3              FpUserDeleteMgr.TimeCnt = 0;
1366   3            }
1367   2        }
1368   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1369   1        {
1370   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1371   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1372   2          {
1373   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1374   3            {
1375   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1376   4              DataInputMgr.Status = InputIdle;  
1377   4              //GUI_Flag_RefreshLCD = bTRUE;
1378   4            }
1379   3            else
1380   3            {
1381   4              FpUserDeleteMgr.Status = DeleteUserFail;
1382   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1383   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1384   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1385   4              //GUI_Flag_RefreshLCD = bTRUE;
1386   4            }
1387   3          }
1388   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1389   2          {
1390   3            FpUserDeleteMgr.Status = DeleteUserFail;
1391   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1392   3            FpUserDeleteMgr.ErrorType = QUIT;
1393   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1394   3            //GUI_Flag_RefreshLCD = bTRUE;
1395   3          }
1396   2        }
1397   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1398   1        {
1399   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1400   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1401   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1402   2          FpmAckMgr.Status = WaitACK;
1403   2        }
1404   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1405   1          {
1406   2            if (FpmAckMgr.Status == GotACK)
1407   2              {
1408   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1409   3                {
1410   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1411   4                  //GUI_Flag_RefreshLCD = bTRUE;
1412   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1413   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1414   4                  if ( CheckMemoryMgr.FpUserNum > 0 )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 24  

1415   4                  {
1416   5                    CheckMemoryMgr.FpUserNum-=1;
1417   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1418   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1419   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1420   5                  }
1421   4                }
1422   3                else
1423   3                {
1424   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1425   4                  //GUI_Flag_RefreshLCD = bTRUE;
1426   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1427   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1428   4                }
1429   3                DEBUG_MARK;
1430   3              }
1431   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1432   2              {
1433   3                FpUserDeleteMgr.Status = DeleteUserFail;
1434   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1435   3                //GUI_Flag_RefreshLCD = bTRUE;
1436   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1437   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1438   3              }
1439   2      
1440   2          }
1441   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1442   1          {
1443   2            
1444   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1445   2            {
1446   3              CurrentScreen = SCREEN_UserFpMenu;
1447   3              UnlockModeJudgment();
1448   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1451   3            }
1452   2            DEBUG_MARK;
1453   2          }
1454   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1455   1          {
1456   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1457   2            {
1458   3      
1459   3            }
1460   2            else
1461   2            {
1462   3      
1463   3            }
1464   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1465   2            {
1466   3              CurrentScreen = SCREEN_UserFpMenu;
1467   3            }
1468   2            DEBUG_MARK;
1469   2          }
1470   1        
1471   1      }
1472          
1473          
1474          /*******************************************************/
1475          /*******************************************************/
1476          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 25  

1477          void ShowDeleteAllUserFp(void)//界面-删除所有用户指纹
1478          {
1479   1        uint16_t i;
1480   1        
1481   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1482   1        {
1483   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1484   2          AllUserFpDeleteMgr.Selection = NO;
1485   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1486   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1487   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1491   2        }
1492   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1493   1        {
1494   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1495   2          //{
1496   2            
1497   2          //}
1498   2        }
1499   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1500   1        {
1501   2          
1502   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1503   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
1504   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1505   2          //GUI_Flag_RefreshLCD = bTRUE;
1506   2          FpmAckMgr.Status = WaitACK;
1507   2        }
1508   1        
1509   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1510   1            {
1511   2              if (FpmAckMgr.Status == GotACK)
1512   2              {
1513   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1514   3                {
1515   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1516   4                  //GUI_Flag_RefreshLCD = bTRUE;
1517   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1518   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1519   4                  CheckMemoryMgr.FpUserNum=0;
1520   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1521   4                  {
1522   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1523   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1524   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1525   5                  }
1526   4                }
1527   3                else
1528   3                {
1529   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1530   4                  //GUI_Flag_RefreshLCD = bTRUE;
1531   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1532   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1533   4                }
1534   3                DEBUG_MARK;
1535   3              }
1536   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1537   2              {
1538   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 26  

1539   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1540   3                //GUI_Flag_RefreshLCD = bTRUE;
1541   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1542   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1543   3              }
1544   2            }
1545   1        
1546   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1547   1          {
1548   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1552   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1553   2            {
1554   3              GoToFpMenu();
1555   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllFpUser);
                      #endif
1558   3            }
1559   2          }
1560   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1561   1          {
1562   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1566   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1567   2            {
1568   3              GoToFpMenu();
1569   3            }
1570   2          }
1571   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1572   1          {
1573   2            GoToFpMenu();
1574   2          }
1575   1        
1576   1      }
1577          
1578          /*******************************************************/
1579          /*******************************************************/
1580          /*******************************************************/
1581          /*******************************************************/
1582          /*******************************************************/
1583          /*******************************************************/
1584          void ShowDeleteCardUser(void)//界面-删除磁卡用户
1585          {
1586   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1587   1        {
1588   2          CardUserDeleteMgr.Status = InputCardUserID;
1589   2          DataInputMgr.Status = InputIdle;
1590   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1591   2        }
1592   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1593   1        {
1594   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1595   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1596   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1597   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1598   2          
1599   2          GUI_DataInputCreat(6,68,3,0x0000);
1600   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 27  

1601   2          if (DataInputMgr.Status == InputEnd)
1602   2          {
1603   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1604   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1605   3            {
1606   4              DataInputMgr.Status = InputIdle;    //Reinput
1607   4            }
1608   3            else if ( IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE )
1609   3            {
1610   4              DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1611   4              CardUserDeleteMgr.Status = Success; 
1612   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1613   4              //GUI_Flag_RefreshLCD = bTRUE;
1614   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1615   4              if ( CheckMemoryMgr.CardUserNum > 0 )
1616   4              {
1617   5                CheckMemoryMgr.CardUserNum-=1;
1618   5              }
1619   4                
1620   4            }
1621   3            else
1622   3            {
1623   4              CardUserDeleteMgr.Status = Fail;
1624   4              CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1625   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1626   4              //GUI_Flag_RefreshLCD = bTRUE;
1627   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1628   4            }
1629   3          }
1630   2          else if  (DataInputMgr.Status == InputExit)
1631   2          {
1632   3            CardUserDeleteMgr.Status = Fail;
1633   3            CardUserDeleteMgr.ErrorType = QUIT;
1634   3            CardUserDeleteMgr.TimeCnt = 0;
1635   3          }
1636   2        }
1637   1        
1638   1        else if  ( CardUserDeleteMgr.Status == Success)
1639   1        {
1640   2          
1641   2          if (--CardUserDeleteMgr.TimeCnt < 1 )
1642   2          {
1643   3            CurrentScreen = SCREEN_CardUserMenu;
1644   3            UnlockModeJudgment();
1645   3      //      #ifdef Function_TuyaWifi
1646   3      //      WifiMgr.PostMgr.Flag.Bits.CardSync = 1;
1647   3      //      #endif
1648   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteCardUser);
                    #endif
1651   3          }
1652   2        }
1653   1        else if ( CardUserDeleteMgr.Status == Fail)
1654   1        {
1655   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1656   2          {
1657   3      
1658   3          }
1659   2          else
1660   2          {
1661   3          
1662   3      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 28  

1663   3          }
1664   2          if ( CardUserDeleteMgr.TimeCnt-- < 1 )
1665   2          {
1666   3            CurrentScreen = SCREEN_CardUserMenu;
1667   3          }
1668   2        }
1669   1      }
1670          
1671          /*******************************************************/
1672          /*******************************************************/
1673          /*******************************************************/
1674          void ShowDeleteAllCardUser(void)//界面-删除全部磁卡用户
1675          {
1676   1        
1677   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1678   1        {
1679   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1680   2          AllCardUserDeleteMgr.Selection = NO;
1681   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1682   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1683   2        }
1684   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1685   1        { 
1686   2          #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                    DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1690   2        }
1691   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1692   1        {
1693   2          
1694   2          DeleteAllCardUserfromMemory();
1695   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1696   2          AllCardUserDeleteMgr.Status = Success;
1697   2          //GUI_Flag_RefreshLCD = bTRUE;
1698   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1699   2          CheckMemoryMgr.CardUserNum =0;
1700   2        }
1701   1        else if ( AllCardUserDeleteMgr.Status == Success )
1702   1        {
1703   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                  #endif
1707   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1708   2          {
1709   3            GoToCardMenu();
1710   3            UnlockModeJudgment();
1711   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteAllCardUser);
                    #endif
1714   3          }
1715   2        }
1716   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1717   1        {
1718   2          GoToCardMenu();
1719   2        }
1720   1      }
1721          
1722          
1723          /*******************************************************/
1724          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 29  

1725          /*******************************************************/
1726          void ShowRegisterPasscodeUser(void)//注册密码用户
1727          {
1728   1        uint8_t i;
1729   1        
1730   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1731   1        {
1732   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1733   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1734   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1735   2            )
1736   2          {
1737   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1738   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1739   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1740   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1741   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1745   3          }
1746   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1747   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1748   2          {
1749   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1750   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1751   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1752   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1753   3            Hardware_DelayMs(100);
1754   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
1758   3          }
1759   2          else
1760   2          {
1761   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1762   3            DataInputMgr.Status = InputIdle;
1763   3          }
1764   2        }
1765   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1766   1        {
1767   2          PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1768   2          PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1769   2          DataInputMgr.Status = InputIdle;
1770   2          //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1771   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1772   2          {
1773   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1774   3          }
1775   2          else
1776   2          {
1777   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1778   3          }
1779   2          
1780   2          PasscodeInputMgr.Point = 0x00;
1781   2          PasscodeInputMgr.PasscodeLen = 12;
1782   2          PasscodeInputMgr.Status = PasscodeInputStart;
1783   2          for (i=0;i<12;i++)
1784   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 30  

1785   3            PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1786   3          }
1787   2          PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1788   2          //GUI_Flag_RefreshLCD = bTRUE;
1789   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1790   2          {
1791   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1792   3          }
1793   2          else
1794   2          {
1795   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1796   3          }
1797   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1801   2        }
1802   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1803   1        {
1804   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_PasscodeInputCreat(5,0);
                  #endif
1808   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1809   2          {
1810   3            if ( PasscodeInputMgr.Point > 5 )
1811   3            {
1812   4              for (i=0;i<12;i++)
1813   4              {
1814   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1815   5              }
1816   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1817   4              PasscodeInputMgr.Point = 0x00;
1818   4              PasscodeInputMgr.PasscodeLen = 12;
1819   4              PasscodeInputMgr.Status = PasscodeInputStart;
1820   4              for (i=0;i<12;i++)
1821   4              {
1822   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1823   5              }
1824   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1825   4              //GUI_Flag_RefreshLCD = bTRUE;
1826   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1827   4              {
1828   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1829   5              }
1830   4              else
1831   4              {
1832   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1833   5              }
1834   4            }
1835   3            else
1836   3            {
1837   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1838   4              PasscodeInputMgr.Point = 0x00;
1839   4              PasscodeInputMgr.PasscodeLen = 12;
1840   4              PasscodeInputMgr.Status = PasscodeInputStart;
1841   4              for (i=0;i<12;i++)
1842   4              {
1843   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1844   5              }
1845   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1846   4              //GUI_Flag_RefreshLCD = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 31  

1847   4            }
1848   3          }
1849   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1850   2          {
1851   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1852   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1853   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1854   3          }
1855   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1858   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1859   2          {
1860   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1861   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1862   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1863   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1864   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1868   3          } 
1869   2        }
1870   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1871   1        {
1872   2          GUI_PasscodeInputCreat(5,0);
1873   2      
1874   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1875   2          {
1876   3            if ( PasscodeInputMgr.Point > 5 )
1877   3              {
1878   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1879   4                //GUI_Flag_RefreshLCD = bTRUE;
1880   4              }
1881   3            else
1882   3              {
1883   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1884   4                PasscodeInputMgr.Point = 0x00;
1885   4                PasscodeInputMgr.PasscodeLen = 12;
1886   4                PasscodeInputMgr.Status = PasscodeInputStart;
1887   4                for (i=0;i<12;i++)
1888   4                {
1889   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1890   5                }
1891   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1892   4                //GUI_Flag_RefreshLCD = bTRUE;
1893   4              }
1894   3          }
1895   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1896   2          {
1897   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1898   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1899   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1900   3          }
1901   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1902   2          {
1903   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1904   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1905   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1906   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1907   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 32  

                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1911   3          } 
1912   2        }
1913   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1914   1        {
1915   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1916   2          {
1917   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1918   3            {
1919   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1920   4              {
1921   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1922   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1923   5                //GUI_Flag_RefreshLCD = bTRUE;
1924   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1925   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                        #endif
1929   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1930   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1931   6                }
1932   5                else{
1933   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1934   6                }
1935   5              }
1936   4              else
1937   4              {
1938   5                //目前不返回失败
1939   5              }
1940   4            }
1941   3            else
1942   3            {
1943   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1944   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
1945   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1946   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
1947   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
                      #endif
1951   4            }
1952   3          }
1953   2          else
1954   2          {
1955   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1956   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
1957   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1958   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1959   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1963   3          }
1964   2        }
1965   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
1966   1        {
1967   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1968   2          {
1969   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 33  

                    #else
1972   3            
1973   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1974   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1975   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
1976   4              /*
1977   4              FpUserRegisterMgr.Status = AddUserToFPM;  
1978   4              FpRegisterMgr.Status = FPMcmdStart;
1979   4              FpUserRegisterMgr.UserID=0x01;
1980   4              CurrentScreen = SCREEN_RegisterMasterFp;
1981   4              */
1982   4              GoToMainMenu();
1983   4            }
1984   3            else
1985   3            {
1986   4              GoToPasswordMenu();
1987   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1988   4            }
1989   3            #endif
1990   3            
1991   3      //      #ifdef Function_TuyaWifi
1992   3      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
1993   3      //      #endif
1994   3            
1995   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddPasscodeUser);
                    #endif
1998   3          }
1999   2        }
2000   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
2001   1        {
2002   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
2003   2          {
2004   3      
2005   3          }
2006   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2007   2          {
2008   3      
2009   3          }
2010   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
2011   2          {
2012   3      
2013   3          }
2014   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2015   2          {
2016   3      
2017   3          }
2018   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
2019   2          {
2020   3          
2021   3          }
2022   2          else
2023   2          {
2024   3      
2025   3          }
2026   2        
2027   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
2028   2          {
2029   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
2030   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
2031   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2032   3              )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 34  

2033   3            {
2034   4              CurrentScreen = SCREEN_Main;
2035   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2036   4              FpIdentifyMgr.Status = FPMcmdStart;
2037   4              CardIdentifyMgr.Status = ReadingCardID;
2038   4            }
2039   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2040   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
2041   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2042   3            )
2043   3            {
2044   4              CurrentScreen = SCREEN_Main;
2045   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2046   4              FpIdentifyMgr.Status = FPMcmdStart;
2047   4              CardIdentifyMgr.Status = ReadingCardID;
2048   4            }
2049   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2050   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
2051   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2052   3              )
2053   3            {
2054   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
2055   4              {
2056   5                GoToPasswordMenu();
2057   5              }
2058   4              else{
2059   5                GoToPasswordMenu();
2060   5              }
2061   4            }
2062   3            else
2063   3            {
2064   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
2065   4              GoToPasswordMenu();
2066   4            }
2067   3          }
2068   2        }
2069   1      }
2070          
2071          /*******************************************************/
2072          /*******************************************************/
2073          /*******************************************************/
2074          void ShowDeletePasscodeUser(void)//界面-删除密码用户
2075          {
2076   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
2077   1        {
2078   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
2079   2          DataInputMgr.Status = InputIdle;
2080   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
2081   2        }
2082   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
2083   1          {
2084   2            if (PasscodeUserDeleteMgr.UserPriority == Master)
2085   2            {
2086   3      //        DisOneDigital16x8(6,8,1,NormalDisplay);
2087   3      //        DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
2088   3            }
2089   2            else
2090   2            {
2091   3      //        DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
2092   3      //        DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
2093   3      //        DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
2094   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 35  

2095   2            
2096   2            GUI_DataInputCreat(6,56,2,0x0000);
2097   2      
2098   2            if (DataInputMgr.Status == InputEnd)
2099   2            {
2100   3              PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
2101   3              if (  (((PasscodeUserDeleteMgr.UserID>(DEF_MAX_PASSCODEMASTER+DEF_MAX_PASSCODEUSER))||(PasscodeUserDel
             -eteMgr.UserID<(DEF_MAX_PASSCODEMASTER+1)))&&(PasscodeUserDeleteMgr.UserPriority == User))   
2102   3                ||(((PasscodeUserDeleteMgr.UserID > DEF_MAX_PASSCODEMASTER)||(PasscodeUserDeleteMgr.UserID<1))&&(Pas
             -scodeUserDeleteMgr.UserPriority == Master))
2103   3               )      
2104   3              {
2105   4                DataInputMgr.Status = InputIdle;    //Reinput
2106   4              }
2107   3              else
2108   3              {
2109   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
2110   4                DataInputMgr.Status = InputIdle;  
2111   4              }
2112   3            }
2113   2            else if  (DataInputMgr.Status == InputExit)
2114   2            {
2115   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2116   3              PasscodeUserDeleteMgr.ErrorType = QUIT;
2117   3              PasscodeUserDeleteMgr.TimeCnt = 0;
2118   3            }
2119   2          }
2120   1        else if ( PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2121   1        {
2122   2          if ( IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE )
2123   2            {
2124   3              if (PasscodeUserDeleteMgr.UserPriority == Master)
2125   3              {
2126   4                if ((CheckMemoryMgr.PasscodeMasterNum==0x01))
2127   4                //&&(CheckMemoryMgr.FpMasterNum == 0x00))
2128   4                {
2129   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2130   5                  PasscodeUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
2131   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2132   5                  //GUI_Flag_RefreshLCD = bTRUE;
2133   5                  DEF_Fail_Beep;
2134   5                }
2135   4                else
2136   4                {
2137   5                  DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2138   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2139   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2140   5                  //GUI_Flag_RefreshLCD = bTRUE;
2141   5                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2142   5                  if ( CheckMemoryMgr.PasscodeMasterNum > 0 )
2143   5                  {
2144   6                    CheckMemoryMgr.PasscodeMasterNum-=1;
2145   6                  }
2146   5                }
2147   4              }
2148   3              else
2149   3              {
2150   4                DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2151   4                PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2152   4                PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2153   4                //GUI_Flag_RefreshLCD = bTRUE;
2154   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 36  

2155   4                if ( CheckMemoryMgr.PasscodeUserNum > 0 )
2156   4                {
2157   5                  CheckMemoryMgr.PasscodeUserNum-=1;
2158   5                }
2159   4              }
2160   3                
2161   3            }
2162   2          else
2163   2            {
2164   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2165   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2166   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2167   3              //GUI_Flag_RefreshLCD = bTRUE;
2168   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
2169   3            }
2170   2        }
2171   1        else if  ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2172   1          {
2173   2            
2174   2            if (--PasscodeUserDeleteMgr.TimeCnt < 1 )
2175   2              {
2176   3                //CurrentScreen = SCREEN_PasscodeUserMenu;
2177   3                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2178   3                //GUI_Flag_RefreshLCD = bTRUE;
2179   3                UnlockModeJudgment();
2180   3                #ifdef Function_EventLog
                        GUI_CreatAndSaveLog(DeletePasscodeUser);
                        #endif
2183   3              }
2184   2          }
2185   1        else if ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2186   1          {
2187   2            if ( PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2188   2            {
2189   3      
2190   3            }
2191   2            else if ( PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
2192   2            {
2193   3      
2194   3            }
2195   2            else
2196   2            {
2197   3        
2198   3            }
2199   2            
2200   2            if (PasscodeUserDeleteMgr.TimeCnt-- < 1 )
2201   2            {
2202   3              if ( PasscodeUserDeleteMgr.ErrorType == QUIT )
2203   3              {
2204   4                if (PasscodeUserDeleteMgr.UserPriority == Master)
2205   4                {
2206   5                  CurrentScreen = SCREEN_PasscodeMasterMenu;
2207   5                }
2208   4                else{
2209   5                  CurrentScreen = SCREEN_PasscodeUserMenu;
2210   5                }
2211   4              }
2212   3              else
2213   3              {
2214   4                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2215   4                //GUI_Flag_RefreshLCD = bTRUE;
2216   4              }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 37  

2217   3            }
2218   2          }
2219   1        
2220   1      }
2221          
2222          /*******************************************************/
2223          /*******************************************************/
2224          /*******************************************************/
2225          void ShowDeleteAllPasscodeUser(void)//界面-删除全部密码用户
2226          {
2227   1        //uint8_t i;
2228   1        
2229   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2230   1        {
2231   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2232   2          AllPasscodeUserDeleteMgr.Selection = NO;
2233   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2234   2        }
2235   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2236   1        {
2237   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
2241   2        }
2242   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2243   1        {
2244   2          DeleteAllPasscodeUserfromMemory();
2245   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2246   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2247   2          GUI_Flag_RefreshLCD = bTRUE;
2248   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2249   2          CheckMemoryMgr.PasscodeUserNum = 0;
2250   2      //    #ifdef Function_TuyaWifi
2251   2      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
2252   2      //    #endif
2253   2        }
2254   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2255   1          {
2256   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
2259   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2260   2            {
2261   3              GoToPasswordMenu();
2262   3              UnlockModeJudgment();
2263   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
                      #endif
2266   3            }
2267   2          }
2268   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2269   1          {
2270   2            GoToPasswordMenu();
2271   2          }
2272   1      }
2273          
2274          /*******************************************************/
2275          /*******************************************************/
2276          /*******************************************************/
2277          void ShowTimeSetting(void)//界面-时间设定
2278          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 38  

2279   1        #ifdef Function_ScreenDisplay
                code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
              
                code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
                
                code uint8_t TimeStrEn[]={"23:01:01"};
              
                DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
              
                DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
                DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
                DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
                DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
                
                DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
                DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
                DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
                DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
              
                if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
                }
                else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
                }
                else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
                }
                else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
                }
                else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
                }
                
                else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 39  

                  DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
                }
                #endif
2348   1      }
2349          
2350          
2351          /*******************************************************/
2352          /*******************************************************/
2353          /*******************************************************/
2354          #ifdef Function_ScreenDisplay
              //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
              //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
              #endif
2358          void ShowLowBattery(void)//低电压界面
2359          {
2360   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
                DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
                #endif  
2364   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2365   1        {
2366   2          if (--BatteryMgr.TimeCnt < 1 )
2367   2          {
2368   3            CurrentScreen = SCREEN_Main;
2369   3            FpIdentifyMgr.Status = FPMcmdStart;
2370   3            CardIdentifyMgr.Status = ReadingCardID;
2371   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2372   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2373   3            {
2374   4              RefreshSystemSleepTime();
2375   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2376   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                      #endif
2380   4            }
2381   3            else
2382   3            {
2383   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2384   4            }
2385   3          }
2386   2        }
2387   1      }
2388          
2389          
2390          /*******************************************************/
2391          /*******************************************************/
2392          /*******************************************************/
2393          void ShowLanguageSetting(void)//语言设定
2394          {
2395   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2396   1        {
2397   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2398   2          {
2399   3            if ( VoiceMenuMgr.MenuPoint < 2 )
2400   3            {
2401   4              PLAY_VOICE_MULTISEGMENTS_FIXED(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2402   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 40  

2403   3            else
2404   3            {
2405   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2406   4            }
2407   3            VoiceMenuMgr.MenuPoint++;
2408   3          }
2409   2        }
2410   1      }
2411          
2412          /*******************************************************/
2413          /*******************************************************/
2414          //uint8_t VoiceWait=0;
2415          /*******************************************************/
2416          void ShowVolumeSetting(void)//声音设定
2417          { 
2418   1        #ifdef Function_ScreenDisplay
                code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
              //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
                code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
              //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
                
                DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
                DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
                #endif
2427   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2428   1        {
2429   2          {
2430   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2431   3            {
2432   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2433   4              VoiceMenuMgr.MenuPoint++;
2434   4            }
2435   3          }
2436   2        } 
2437   1      }
2438          
2439          /*******************************************************/
2440          /*******************************************************/
2441          /*******************************************************/
2442          void ShowMemoryUsage(void)//内存使用情况
2443          {
2444   1        
2445   1      }
2446          
2447          /*******************************************************/
2448          /*******************************************************/
2449          /*******************************************************/
2450          void ShowManagerIdentify(void)//管理员认证
2451          {
2452   1        uint8_t i;
2453   1        #ifdef Function_ScreenDisplay
                code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
                code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
              //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
                //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
                #endif
2460   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
2461   1        {
2462   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2463   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2464   2            )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 41  

2465   2          {
2466   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2469   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2470   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2471   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2472   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2473   3            DataInputMgr.Status = InputIdle;
2474   3            PasscodeUserRegisterMgr.UserID = 0x01;
2475   3            PasscodeUserRegisterMgr.UserPriority = Master;
2476   3            
2477   3            PasscodeInputMgr.Point = 0x00;
2478   3            PasscodeInputMgr.PasscodeLen = 12;
2479   3            PasscodeInputMgr.Status = PasscodeInputStart;
2480   3            for (i=0;i<12;i++)
2481   3            {
2482   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2483   4            }
2484   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2485   3            //GUI_Flag_RefreshLCD = bTRUE;
2486   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2487   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                      #endif
2491   3            #endif
2492   3            
2493   3          }
2494   2          else
2495   2          {
2496   3            PasscodeInputMgr.Point = 0x00;
2497   3            PasscodeInputMgr.PasscodeLen = 12;
2498   3            PasscodeInputMgr.Status = PasscodeInputStart;
2499   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2500   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2501   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2502   3            {
2503   4              PasscodeInputMgr.InputBuff[i]=0xff;
2504   4            }
2505   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2506   3            FpIdentifyMgr.Status = FPMcmdStart;
2507   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2508   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
                    #endif
2512   3          }
2513   2        }
2514   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
2515   1        {
2516   2      
2517   2          GUI_PasscodeInputCreat(6,16);
2518   2          
2519   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2520   2          { 
2521   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2522   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
2523   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2524   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2525   3               )
2526   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 42  

2527   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2528   4            }
2529   3            //GUI_Flag_RefreshLCD = bTRUE;
2530   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2531   3      
2532   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2533   3            {
2534   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2535   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                      #endif
2539   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2540   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2541   4              {
2542   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2543   5              } 
2544   4            }
2545   3            else
2546   3            {
2547   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2548   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                      #endif
2552   4            }
2553   3            
2554   3          }
2555   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2556   2          {
2557   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2558   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2559   3          }
2560   2      
2561   2          FpUserIdentify();
2562   2          if ( (FpIdentifyMgr.Status == success)
2563   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2564   2            )
2565   2          {
2566   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2567   3            FpIdentifyMgr.Status = FPMcmdStart;
2568   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2569   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                    #endif
2573   3            #ifdef Function_FPMbreathingLed
2574   3            FpIdentifyMgr.BreathingLED = 1;
2575   3            SetFPMbreathingLed(FPMbreathingLed_Green);
2576   3            #endif  
2577   3          }
2578   2          else if (( FpIdentifyMgr.Status == fail)
2579   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
2580   2            )
2581   2          {
2582   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2583   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
2584   4            }
2585   3            else{
2586   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2587   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 43  

2588   3            FpIdentifyMgr.Status = FPMcmdStart;
2589   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
2590   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2591   3            //GUI_Flag_RefreshLCD = bTRUE;
2592   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2593   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                    #endif
2597   3            #ifdef Function_FPMbreathingLed
2598   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2599   3            #endif
2600   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2601   3            {
2602   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2603   4            } 
2604   3          }
2605   2        }
2606   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2607   1        {
2608   2          GoToMainMenu();
2609   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
2610   2        }
2611   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2612   1        {
2613   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2614   2          {
2615   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2616   3            {
2617   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2618   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2619   4            }
2620   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2621   3            CardIdentifyMgr.Status = ReadingCardID;
2622   3            FpIdentifyMgr.Status = FPMcmdStart;
2623   3            CurrentScreen = SCREEN_Main;
2624   3            #ifdef Function_FPMbreathingLed
2625   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2626   3            #endif
2627   3          }
2628   2        }
2629   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2630   1        {
2631   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2632   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2633   2          CardIdentifyMgr.Status = ReadingCardID;
2634   2          FpIdentifyMgr.Status = FPMcmdStart;
2635   2          CurrentScreen = SCREEN_Main;
2636   2          #ifdef Function_FPMbreathingLed
2637   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2638   2          #endif
2639   2        }
2640   1      
2641   1      }
2642          /*******************************************************/
2643          /*******************************************************/
2644          /*******************************************************/
2645          void ShowUnlockingModeSetting(void)//界面-解锁模式设置
2646          {
2647   1        #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 44  

                code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
                code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
                code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
                #endif
2655   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2656   1        {
2657   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2658   2        }
2659   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2660   1        { 
2661   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
                    DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
                    #endif
2665   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2666   2            {
2667   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2668   3              {
2669   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2670   4                VoiceMenuMgr.MenuPoint++;
2671   4              }
2672   3            }
2673   2        }
2674   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2675   1        {
2676   2          UnlockingModeMgr.TimeCnt = 0;
2677   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2678   2          { 
2679   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2680   3            {
2681   4              #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
                      #endif
2685   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2686   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2687   4            }
2688   3          }
2689   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2690   2        }
2691   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2692   1        {
2693   2          if (UnlockingModeMgr.TimeCnt > 0)
2694   2          {
2695   3            UnlockingModeMgr.TimeCnt--;
2696   3          }
2697   2          else
2698   2          {
2699   3            SystemConfigSave();
2700   3            GoToSystemConfigMenu();
2701   3          }
2702   2        }
2703   1      }
2704          
2705          /*******************************************************/
2706          /*******************************************************/
2707          /*******************************************************/
2708          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2709          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 45  

2710   1        #ifdef Function_ScreenDisplay
                //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
              //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
                code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
              //  code uint8_t EnabledStrEn[]={"1. ON"};
                code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
              //  code uint8_t DisabledStrEn[]={"2. OFF"};
              
                DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
                DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
                #endif
2721   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2722   1        {
2723   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2724   2          {
2725   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2726   3            VoiceMenuMgr.MenuPoint++;
2727   3          }
2728   2        }
2729   1      }
2730          
2731          /*******************************************************/
2732          /*******************************************************/
2733          /*******************************************************/
2734          void ShowPickAlarmEnableSetting(void)//界面-防撬告警使能设置
2735          {
2736   1        #ifdef Function_ScreenDisplay
                code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
              //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
                code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
              //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
              
                DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
                DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
                #endif
2745   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2746   1        {
2747   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2748   2          {
2749   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2750   3            VoiceMenuMgr.MenuPoint++;
2751   3          }
2752   2          /*
2753   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2754   2          
2755   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2756   2          {
2757   2            VoiceMenuMgr.MenuPoint = 0;
2758   2          }
2759   2          */
2760   2        }
2761   1      
2762   1        
2763   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2764   1          {
2765   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2766   2          }
2767   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2768   1          {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 46  

2769   2            
2770   2          }
2771   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2772   1          {     
2773   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2774   2            SystemConfigSave();
2775   2            Config_AntiPrying_Interrupt();
2776   2            GoToSystemConfigMenu(); 
2777   2          }
2778   1      }
2779          
2780          /*******************************************************/
2781          /*******************************************************/
2782          extern uint16_t KeyHoldTimeCnt;
2783          /*******************************************************/
2784          void ShowRestoreFactoryDefault(void)//界面-恢复出厂
2785          {
2786   1        uint8_t i;
2787   1        #ifdef Function_ScreenDisplay
                code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
              //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
                #endif
2791   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2792   1      
2793   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2794   1        {
2795   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2796   2          //GUI_Flag_RefreshLCD = bTRUE;
2797   2          RestoreFactoryDefaultMgr.Selection = NO;
2798   2          //SET_LRandConfirmLED_ON();
2799   2          //SET_AP_LED_ON();
2800   2        }
2801   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2802   1        {
2803   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
                  DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
                  #endif
2808   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2809   2          {
2810   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2811   3            {
2812   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2813   4              VoiceMenuMgr.MenuPoint++;
2814   4            }
2815   3          }
2816   2        }
2817   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
2818   1        { 
2819   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
                  #endif
2823   2          //SET_ALLKEYLED_OFF();
2824   2          
2825   2          RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
2826   2      
2827   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2828   2      
2829   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 47  

2830   1        else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2831   1        {
2832   2          if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2833   2            {
2834   3              RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2835   3              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2836   3              RestoreFactoryDefaultMgr.FailTimes = 0x00;
2837   3            }
2838   2          else{ 
2839   3            RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2840   3            PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2841   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
2845   3          }
2846   2        } 
2847   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2848   1          {
2849   2        
2850   2            DeleteAllFpFromFPM();
2851   2            if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2852   2            {
2853   3              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2854   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2855   3              CheckMemoryMgr.FpUserNum = 0x00;
2856   3              CheckMemoryMgr.FpMasterNum = 0x00;  
2857   3              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2858   3              {
2859   4                FpUserMemoryMgr[i].UserID = 0xFFFF;
2860   4                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2861   4                FpUserMemoryMgr[i].UserPriority = Undefined;
2862   4              }
2863   3            }
2864   2            else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2865   2            {
2866   3              if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2867   3              {
2868   4                RestoreFactoryDefaultMgr.FailTimes++;
2869   4                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2870   4                RefreshSystemSleepTime();
2871   4              }
2872   3              else
2873   3              {
2874   4                RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2875   4                PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2876   4                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                        #endif
2880   4              }
2881   3            } 
2882   2          }
2883   1        
2884   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2885   1          {     
2886   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2887   2            {
2888   3              DeleteAllCardUserfromMemory();
2889   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2890   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2891   3              CheckMemoryMgr.CardUserNum = 0x00;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 48  

2892   3            } 
2893   2          }
2894   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2895   1          { 
2896   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2897   2            {
2898   3              RestoreFactory_Managerdata();
2899   3              DeleteAllPasscodeMasterfromMemory();
2900   3              DeleteAllPasscodeUserfromMemory();
2901   3              SystemConfigReset();
2902   3              #ifdef Function_EventLog
                      DeleteAllLog();
                      #endif
2905   3              
2906   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2907   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2908   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2909   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2910   3              //GUI_Flag_RefreshLCD = bTRUE;
2911   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2912   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
2916   3            }
2917   2          }
2918   1        
2919   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2920   1          {
2921   2      
2922   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2923   2            {
2924   3              CurrentScreen = SCREEN_Main;
2925   3              RefreshSystemSleepTime();
2926   3              KeyHoldTimeCnt=0;
2927   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2928   3              FpIdentifyMgr.Status = FPMcmdStart;
2929   3              CardIdentifyMgr.Status = ReadingCardID;
2930   3      
2931   3            }
2932   2          }
2933   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2934   1          {
2935   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2936   2            {
2937   3              CurrentScreen = SCREEN_Main;
2938   3              KeyHoldTimeCnt=0;
2939   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2940   3              FpIdentifyMgr.Status = FPMcmdStart;
2941   3              CardIdentifyMgr.Status = ReadingCardID;
2942   3            }
2943   2          }
2944   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2945   1          {
2946   2            GoToSystemConfigMenu();
2947   2          }
2948   1      
2949   1      }
2950          
2951          /*******************************************************/
2952          /*******************************************************/
2953          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 49  

2954          void ShowInitialization(void)//界面-初始化
2955          {
2956   1        
2957   1        uint8_t i;
2958   1        #ifdef Function_ScreenDisplay
                code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
              //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
                code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
                code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
              //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
                code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
              //  code uint8_t EepromStr_En[]={"Memory"}; 
                code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
              //  code uint8_t TouchStr_En[]={"Touch"}; 
                code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
                code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
                #endif  
2974   1        
2975   1        if ( InitializationMgr.Status == StartInitialization )
2976   1        {
2977   2          //SET_ALLKEYLED_OFF();
2978   2          #ifdef Function_ScreenDisplay
                  DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
                  DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
                  DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
                  #endif
2983   2          CheckMemoryMgr.Status = StartCheckMemory;
2984   2          InitializationMgr.Status = MemoryCheck;
2985   2        }
2986   1        else if ( InitializationMgr.Status == MemoryCheck )
2987   1        {
2988   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
                  #endif
2991   2          SystemConfigLoad();
2992   2          ReadLockBrand();
2993   2          InitializationMgr.MemoryCheckPass = bTRUE;
2994   2          InitializationMgr.Status = MemoryCheckWait;
2995   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2996   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2997   2        }
2998   1        else if ( InitializationMgr.Status == MemoryCheckWait )
2999   1        {
3000   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.MemoryCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3010   2          if (--InitializationMgr.TimeCnt < 1 )
3011   2          {
3012   3            InitializationMgr.Status = FingerPrintCheck;
3013   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 50  

                    DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
                    #endif
3018   3          }
3019   2        }
3020   1        else if ( InitializationMgr.Status == FingerPrintCheck )
3021   1        {
3022   2      
3023   2          GUI_GetUserNumList();   //read user number
3024   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
3025   2          {
3026   3            //SET_KEYLED_ON(KEY_TWO);
3027   3            #ifdef Function_FPMbreathingLed
3028   3            FpmAckMgr.Status = WaitACK;
3029   3            FPM_SetSecurityLevel(1);  //
3030   3            for (i=0;i<25;i++)
3031   3            {
3032   4              Hardware_DelayMs(10);
3033   4              FPM_Mgr_Task();
3034   4              if ( FpmAckMgr.Status == GotACK )
3035   4              {
3036   5                break;
3037   5              }
3038   4            }
3039   3            #endif
3040   3      
3041   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
3042   3            InitializationMgr.Status = FingerPrintCheckWait;
3043   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3044   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3045   3            
3046   3          }
3047   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
3048   2          { 
3049   3            //CheckMemoryMgr.Status = StartCheckMemory;
3050   3            //InitializationMgr.Status = StartInitialization;//redo
3051   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
3052   3            InitializationMgr.Status = FingerPrintCheckWait;
3053   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3054   3            DEF_Fail_Beep;
3055   3          }
3056   2        }
3057   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
3058   1        {
3059   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.FingerPrintCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3069   2          if (--InitializationMgr.TimeCnt < 1 )
3070   2          {
3071   3            InitializationMgr.Status = CardReaderCheck;
3072   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
                    #endif
3077   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 51  

3078   2        }
3079   1        else if ( InitializationMgr.Status == CardReaderCheck )
3080   1        {
3081   2          //SET_KEYLED_ON(KEY_THREE);
3082   2          InitializationMgr.CardReaderCheckPass = bTRUE;
3083   2          InitializationMgr.Status = CardReaderCheckWait;
3084   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3085   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3086   2        }
3087   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
3088   1        {
3089   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.CardReaderCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3099   2          if (--InitializationMgr.TimeCnt < 1 )
3100   2          {
3101   3            InitializationMgr.Status = TouchCheck;
3102   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
                    #endif
3107   3          }
3108   2        }
3109   1        else if ( InitializationMgr.Status == TouchCheck )
3110   1          {
3111   2            //SET_KEYLED_ON(KEY_FOUR);
3112   2            InitializationMgr.TouchCheckPass = bTRUE;
3113   2            InitializationMgr.Status = TouchCheckWait;
3114   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3115   2       
3116   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3117   2          }
3118   1        else if ( InitializationMgr.Status == TouchCheckWait )
3119   1          {
3120   2            #ifdef Function_ScreenDisplay
                    if (InitializationMgr.TouchCheckPass == bTRUE)
                    { 
                      DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                    }
                    else
                    {
                      DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                    }
                    #endif
3130   2            if (--InitializationMgr.TimeCnt < 1 )
3131   2            {
3132   3              InitializationMgr.Status = CheckFinished;
3133   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3134   3              #ifdef Function_ScreenDisplay
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
                        &&(InitializationMgr.MemoryCheckPass == bTRUE )
                        &&(InitializationMgr.CardReaderCheckPass == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 52  

                        &&(InitializationMgr.TouchCheckPass == bTRUE ) )
                      {
                        DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
                      }
                      else
                      {
                        DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
                      }
                      #endif
3149   3            }
3150   2          }
3151   1      
3152   1        else if ( InitializationMgr.Status == CheckFinished )
3153   1        {
3154   2          if (--InitializationMgr.TimeCnt < 1 )
3155   2          {
3156   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3157   3            {
3158   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3159   4              BatteryMgr.PostLowBattery = bFALSE;
3160   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3161   4              CurrentScreen = SCREEN_LowBattery;  
3162   4            }
3163   3            else
3164   3            {
3165   4              CurrentScreen = SCREEN_Main;
3166   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3167   4              FpIdentifyMgr.Status = FPMcmdStart;
3168   4              CardIdentifyMgr.Status = ReadingCardID;
3169   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3170   4            }
3171   3          }
3172   2        }
3173   1      }
3174          
3175          /*******************************************************/
3176          /*******************************************************/
3177          /*******************************************************/
3178          void ShowSystemLocked(void)//界面-系统锁定
3179          {
3180   1        #ifdef Function_ScreenDisplay
                uint16_t Temp;
                code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
              //  code uint8_t SystemLockedStrEn[]={"System Lock"};
                #endif
3185   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3186   1        {
3187   2          #ifdef Function_TuyaWifi
                  if( SafetyMonitorMgr.SystemLockedTimeDelay == DEF_SystemLockedTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = ErrorAlarm;
                  }
                  #endif
3194   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3195   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-625))
3196   2          {
3197   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3198   3            {
3199   4              if(VoiceMgr.Enable == bFALSE)
3200   4              {
3201   5                VoiceMgr.Enable = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 53  

3202   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3203   5                VoiceMgr.Enable = bFALSE;
3204   5              }
3205   4              else
3206   4              {
3207   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3208   5              }
3209   4            }
3210   3          }
3211   2        }
3212   1        else
3213   1        {
3214   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3215   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3216   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3217   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
3218   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3219   2          CurrentScreen = SCREEN_Main;
3220   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3221   2          FpIdentifyMgr.Status = FPMcmdStart;
3222   2          CardIdentifyMgr.Status = ReadingCardID;
3223   2          STOP_VOICEPLAY();
3224   2        }
3225   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
                DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
                Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
                DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
                DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
                DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
                #endif
3233   1      }
3234          
3235          /*******************************************************/
3236          /*******************************************************/
3237          /*******************************************************/
3238          #ifdef Function_ScreenDisplay
               code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
              // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
               //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
               //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
               code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
              // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
              #endif
3246          void ShowPickLockAlarm(void)//界面-防撬告警
3247          {
3248   1        bool_t Flag_ExitPickLockAlarm;
3249   1      
3250   1        RefreshSystemSleepTime();   //reset system sleep time
3251   1      
3252   1        #ifdef Function_ScreenDisplay
                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
                {
                  DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
                  Clear_Screen_Page(5);
                  DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
                }
                #endif  
3260   1        
3261   1        Flag_ExitPickLockAlarm = bFALSE;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 54  

3262   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
3263   1        {
3264   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3265   2          
3266   2          CardUserIdentify();
3267   2        }
3268   1      
3269   1          
3270   1        if ( CardIdentifyMgr.Status == Success)
3271   1        {
3272   2          Flag_ExitPickLockAlarm = bTRUE;
3273   2        }
3274   1        else if ( CardIdentifyMgr.Status == Fail)
3275   1        {
3276   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3277   2          {
3278   3            Flag_ExitPickLockAlarm = bTRUE;
3279   3          }
3280   2          else
3281   2          {
3282   3            CardIdentifyMgr.Status = ReadingCardID;
3283   3          }
3284   2        }
3285   1      
3286   1        FpUserIdentify();
3287   1        if ( FpIdentifyMgr.Status == success)
3288   1        {
3289   2          Flag_ExitPickLockAlarm = bTRUE; 
3290   2        }
3291   1        else if ( FpIdentifyMgr.Status == fail)
3292   1        {
3293   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3294   2          {
3295   3            Flag_ExitPickLockAlarm = bTRUE;   
3296   3          }
3297   2          else
3298   2          {
3299   3            FpIdentifyMgr.Status = FPMcmdStart;
3300   3          }
3301   2        }
3302   1      
3303   1        PasscodeUserIdentify();
3304   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3305   1        {
3306   2          Flag_ExitPickLockAlarm = bTRUE;
3307   2        }
3308   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3309   1        {
3310   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3311   2          {
3312   3            Flag_ExitPickLockAlarm = bTRUE;
3313   3          }
3314   2          else
3315   2          {
3316   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3317   3          }
3318   2        }
3319   1      
3320   1        if ( AntiPryingMgr.TimeCnt > 0 )
3321   1        {
3322   2          #ifdef Function_TuyaWifi
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 55  

                  if( AntiPryingMgr.TimeCnt == DEF_AntiPryingTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = PryAlarm;
                  }
                  #endif
3329   2          AntiPryingMgr.TimeCnt--;
3330   2        }
3331   1        else{
3332   2          Flag_ExitPickLockAlarm = bTRUE;
3333   2        }
3334   1        
3335   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3336   1        {
3337   2          STOP_VOICEPLAY();
3338   2          #ifdef Function_FPMbreathingLed
3339   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3340   2          #endif
3341   2          INT1_RST();
3342   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3343   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3344   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3345   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3346   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3347   2          CurrentScreen = SCREEN_Main;
3348   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3349   2          FpIdentifyMgr.Status = FPMcmdStart;
3350   2          CardIdentifyMgr.Status = ReadingCardID;
3351   2          RefreshSystemSleepTime();   //reset system sleep time
3352   2        }
3353   1        else
3354   1        {
3355   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3356   2          {
3357   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3358   3          }
3359   2        }
3360   1      }
3361          
3362          /*******************************************************/
3363          /*******************************************************/
3364          void ShowAgingTest(void)//界面-老化测试
3365          {
3366   1        #ifdef Function_ScreenDisplay
                uint8_t Str1[]={"AGING TEST"}; 
                uint8_t Str2[]={"MOTOR:"}; 
                uint8_t Str3[]={"INPUT:  . V"};
                uint8_t Str4[]={"SLIDE:"};
              
                DisEN16x8Str(0,16,Str1,NormalDisplay);
                #endif
3374   1        GUI_MotorAgingTest();
3375   1        #ifdef Function_ScreenDisplay
                DisEN16x8Str(4,0,Str2,NormalDisplay);
                DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
                DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
                DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
                DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
              
                DisEN16x8Str(6,0,Str3,NormalDisplay); 
                DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
                DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 56  

                #endif
3386   1      }
3387          /*******************************************************/
3388          /*******************************************************/
3389          /*******************************************************/
3390          
3391          void ShowEventLogBySequence(void)//界面-按顺序界面-事件日志
3392          {
3393   1        #ifdef Function_EventLog
                code uint8_t VoiceReportLogBuff[][5]=
                { 
                  {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
                  {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
                  {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
                  {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
                };
                  
                uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
                uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
              
                if (CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
                {
                  SearchEventLogBySequence();
                  CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
                  {
                    LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
                    LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
                    CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
                    VoiceMenuMgr.MenuPoint = 0;
                    VoiceMenuMgr.TotalMenuNum = 3;    
                  }
                  else
                  {
                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
                  }
                }
                else if (CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                {
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
                  {
                      DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
                  }
                  else
                  {
                    if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
                    {
                      LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
                      LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
                      VoiceReportLogMgr.Status = ReportLogInit;
                      Clear_Screen();
                    }
                    
                    DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    
                    if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
                    {
                      if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
                      {
                        PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
                        VoiceMenuMgr.MenuPoint++;
                      }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 57  

                      SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
                    }
                    else
                    {
                     // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    }
                  }
                }
                #endif
3456   1      }
3457          
3458          /*******************************************************/
3459          /*******************************************************/
3460          /*******************************************************/
3461          void ShowClearEventLog(void)//界面-清除事件日志
3462          {
3463   1        #ifdef Function_EventLog
                uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
                if (LogDeleteMgr.Status == StartLogDelete)
                {
                  LogDeleteMgr.DeleteSectorNum = 0;
                  LogDeleteMgr.Percentage = 0;
                  LogDeleteMgr.Status = WaitforLogDeleteCofirm;
                  PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
                }
                else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
                {
                  #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
                }
                else if (LogDeleteMgr.Status == LogDeleting)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    if ( LogDeleteMgr.Percentage == 0 )
                    {
                      #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,DELing,NormalDisplay);
                      #endif
                      if ( DeleteAllLog() != S_SUCCESS )
                      {
                        if ( DeleteAllLog() != S_SUCCESS )
                        {
                          DeleteAllLog();
                        }
                      }
                    }
                    LogDeleteMgr.Percentage++;
                  }
                  else
                  {
                    LogDeleteMgr.Status = LogDeleteSuccess;
                    LogDeleteMgr.Percentage = 0;
                    RefreshSystemSleepTime();
                    PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
                    #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 58  

                  }
                }
                else if (LogDeleteMgr.Status == LogDeleteSuccess)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    LogDeleteMgr.Percentage++;
                  }
                  else 
                  {
                    LogDeleteMgr.Status = QuitLogDelete;
                  }
                }
                else
                {
                  GotoLogMenu();
                }
                #endif
3527   1      }
3528          
3529          /*******************************************************/
3530          /*******************************************************/
3531          
3532          
3533          /*******************************************************/
3534          /*******************************************************/
3535          void GUI_Button_Monitor(void)//GUI按钮监视器
3536          {
3537   1        //DEBUG_MARK;
3538   1        uint8_t i;
3539   1        uint8_t Offset;
3540   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3541   1        {
3542   2          //return;
3543   2        }
3544   1        
3545   1        if ( MotorMgr.MotorStatus != IDLE )
3546   1        {
3547   2          return;
3548   2        }
3549   1      
3550   1        gui_keycode = Key_Scan();
3551   1      
3552   1        DEBUG_MARK;
3553   1      
3554   1        if ( gui_keycode != KEY_NONE )
3555   1        {
3556   2          RefreshSystemSleepTime();
3557   2        }
3558   1        switch ( CurrentScreen)
3559   1        {
3560   2          case SCREEN_Main:
3561   2      
3562   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3563   2            {
3564   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3569   3            }
3570   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 59  

3571   2            {
3572   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
3573   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3574   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
3575   3            }
3576   2            #ifdef Function_DoorBellTouchIndependented
3577   2            else if ( gui_keycode == KEY_DOORBELL )
3578   2            { 
3579   3              PLAY_VOICE_DOORBELL();
3580   3              DoorBellMgr.TimeCnt = 150;
3581   3              CurrentScreen = SCREEN_DoorBell;
3582   3            }
3583   2            #endif
3584   2      
3585   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3586   2            {
3587   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3588   3              {
3589   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3590   4                {
3591   5                  
3592   5                  PasscodeInputMgr.Point = 0x01;
3593   5                  PasscodeInputMgr.PasscodeLen = 16;
3594   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3595   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3596   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3597   5                  {
3598   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3599   6                  }
3600   5                  
3601   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3602   5                  DEF_ButtonPress_Voice;
3603   5                }
3604   4               }
3605   3              else if ( gui_keycode == KEY_ASTERISK )
3606   3              {
3607   4                DEF_ButtonPress_Voice;
3608   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3609   4                {
3610   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3611   5                }
3612   4                else 
3613   4                {
3614   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3615   5                  SystemPowerMgr.SleepSource = UserForced;
3616   5                }
3617   4              }
3618   3              else if ( gui_keycode == KEY_POUNDSIGN )
3619   3              {
3620   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3621   4                { 
3622   5                   DEF_ButtonPress_Voice;
3623   5                   CurrentScreen = SCREEN_ManagerIdentify;
3624   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3625   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3626   5                }
3627   4                else
3628   4                {
3629   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
                          PLAY_VOICE_DOORBELL();  //DOORBELL
                          DoorBellMgr.TimeCnt = 150;
                          CurrentScreen = SCREEN_DoorBell;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 60  

                          #else
3634   5                  DEF_ButtonPress_Voice;
3635   5                  #endif
3636   5                } 
3637   4              }
3638   3            }
3639   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3640   2                      &&( gui_keycode != KEY_DOORBELL )
3641   2                    )
3642   2            {
3643   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3644   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3645   3              {
3646   4                DEF_ButtonPress_Voice;
3647   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3648   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
3649   4              }
3650   3            }
3651   2            
3652   2            break;
3653   2            
3654   2          case SCREEN_MainMenu:
3655   2      
3656   2              if ( gui_keycode == KEY_ONE )
3657   2              {
3658   3                DEF_ButtonPress_Voice;
3659   3                Hardware_DelayMs(100);
3660   3                GoToFpMenu();
3661   3              }
3662   2              else if ( gui_keycode == KEY_TWO )
3663   2              {
3664   3                DEF_ButtonPress_Voice;
3665   3                Hardware_DelayMs(100);
3666   3                GoToPasswordMenu();
3667   3              }
3668   2              else if ( gui_keycode == KEY_THREE )
3669   2              {
3670   3                DEF_ButtonPress_Voice;
3671   3                Hardware_DelayMs(100);
3672   3                GoToCardMenu();
3673   3              }
3674   2              else if ( gui_keycode == KEY_FOUR )
3675   2              {
3676   3                DEF_ButtonPress_Voice;
3677   3                Hardware_DelayMs(100);
3678   3                GoToSystemConfigMenu();
3679   3              }
3680   2              #ifdef Function_TuyaWifi
                      else if (gui_keycode == KEY_FIVE)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_NetWorkLink;
                        WifiMgr.Link.Status = LinkStart;
                        Wifi_Rst();
                      }
                      #endif
3690   2      //        else if ( gui_keycode == KEY_FIVE )
3691   2      //        {
3692   2      //          DEF_ButtonPress_Voice;
3693   2      //          Hardware_DelayMs(100);
3694   2      //          GotoLogMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 61  

3695   2      //        }
3696   2              else if ( gui_keycode == KEY_ASTERISK )
3697   2              {
3698   3                #ifdef Function_FPMbreathingLed
3699   3                FpIdentifyMgr.BreathingLED = 0;
3700   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3701   3                #endif
3702   3                //DEF_ButtonPress_Voice;
3703   3                //FpmAckMgr.Status = WaitACK;
3704   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3705   3                CardIdentifyMgr.Status = ReadingCardID;
3706   3                FpIdentifyMgr.Status = FPMcmdStart;
3707   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3708   3                Hardware_DelayMs(100);
3709   3                CurrentScreen = SCREEN_Main;
3710   3                RefreshSystemSleepTime();
3711   3              }
3712   2      
3713   2              break;
3714   2              
3715   2          case SCREEN_EventLogMenu:
3716   2            
3717   2              #ifdef Function_EventLog
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_CheckEventLogBySequence;
                        CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_DeleteEventLog;
                        LogDeleteMgr.Status = StartLogDelete;
                      }
                      else if ( gui_keycode == KEY_ASTERISK )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToMainMenu();
                      }
                      #endif
3739   2              
3740   2              break;  
3741   2              
3742   2          case SCREEN_FpMenu:
3743   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3744   2              {
3745   3                #ifdef Function_FPMbreathingLed
3746   3                FpIdentifyMgr.BreathingLED = 0;
3747   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3748   3                #endif
3749   3              }
3750   2            
3751   2              if ( gui_keycode == KEY_ONE )
3752   2              {
3753   3                DEF_ButtonPress_Voice;
3754   3                Hardware_DelayMs(100);
3755   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3756   3                CurrentScreen = SCREEN_RegisterMasterFp;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 62  

3757   3                
3758   3              }
3759   2              else if ( gui_keycode == KEY_TWO )
3760   2              {
3761   3                DEF_ButtonPress_Voice;
3762   3                Hardware_DelayMs(100);
3763   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3764   3                CurrentScreen = SCREEN_RegisterUserFp;
3765   3              }
3766   2              else if ( gui_keycode == KEY_THREE )
3767   2              {
3768   3                DEF_ButtonPress_Voice;
3769   3                Hardware_DelayMs(100);
3770   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3771   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3772   3              }
3773   2              else if ( gui_keycode == KEY_ASTERISK )
3774   2              {
3775   3                DEF_ButtonPress_Voice;
3776   3                Hardware_DelayMs(100);
3777   3                GoToMainMenu();
3778   3              }
3779   2              break;
3780   2                
3781   2          case SCREEN_CardUserMenu:
3782   2      
3783   2              if ( gui_keycode == KEY_ONE )
3784   2              {
3785   3                DEF_ButtonPress_Voice;
3786   3                Hardware_DelayMs(100);
3787   3                CurrentScreen = SCREEN_RegisterCardUser;
3788   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3789   3              }
3790   2              else if ( gui_keycode == KEY_TWO )
3791   2              {
3792   3                DEF_ButtonPress_Voice;
3793   3                Hardware_DelayMs(100);
3794   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3795   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3796   3              }
3797   2              else if ( gui_keycode == KEY_ASTERISK )
3798   2              {
3799   3                DEF_ButtonPress_Voice;
3800   3                Hardware_DelayMs(100);
3801   3                GoToMainMenu(); 
3802   3              }
3803   2              break;
3804   2              
3805   2          case SCREEN_PasscodeMenu: 
3806   2      
3807   2              if ( gui_keycode == KEY_ONE )
3808   2              {
3809   3                DEF_ButtonPress_Voice;
3810   3                Hardware_DelayMs(100);
3811   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3812   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3813   3                PasscodeUserRegisterMgr.UserPriority = Master;
3814   3              }
3815   2              
3816   2              else if ( gui_keycode == KEY_TWO )
3817   2              {
3818   3                DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 63  

3819   3                Hardware_DelayMs(100);
3820   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3821   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3822   3                PasscodeUserRegisterMgr.UserPriority = User;
3823   3              }
3824   2              else if ( gui_keycode == KEY_THREE )
3825   2              {
3826   3                DEF_ButtonPress_Voice;
3827   3                Hardware_DelayMs(100);
3828   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3829   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3830   3              }
3831   2              else if ( gui_keycode == KEY_ASTERISK )
3832   2              {
3833   3                DEF_ButtonPress_Voice;
3834   3                Hardware_DelayMs(100);
3835   3                GoToMainMenu();
3836   3              }
3837   2            break;
3838   2                
3839   2          case SCREEN_SystemConfigMenu:
3840   2            
3841   2              Offset = 0;
3842   2                
3843   2      //          if ( gui_keycode == KEY_ONE  )
3844   2      //          {
3845   2      //            DEF_ButtonPress_Voice;
3846   2      //            Hardware_DelayMs(100);
3847   2      //            CurrentScreen = SCREEN_TimeSetting;
3848   2      //              #ifdef Function_USE_Internal_RTC
3849   2      //              SystemTime = UTCToSystemtime(G_SystemUTCTime);
3850   2      //              #elif defined Function_USE_External_RTC
3851   2      //              PCF8563_ReadTime();
3852   2      //              #endif
3853   2      //              GotSystemTime();  
3854   2      //          }
3855   2          #ifdef Function_VoiceEnabledEnglish
                        Offset = 1;
                        if ( gui_keycode == KEY_ONE )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          CurrentScreen = SCREEN_LanguageSetting;
                          VoiceMenuMgr.MenuPoint=0;
                          VoiceMenuMgr.TotalMenuNum = 3;
                        } 
                  #endif
3866   2                if ( gui_keycode == KEY_ONE+Offset )
3867   2                {
3868   3                  DEF_ButtonPress_Voice;
3869   3                  Hardware_DelayMs(100);
3870   3                  CurrentScreen = SCREEN_VolumeSetting;
3871   3                  VoiceMenuMgr.MenuPoint=0;
3872   3                  VoiceMenuMgr.TotalMenuNum = 3;
3873   3                }         
3874   2                else if ( gui_keycode == KEY_TWO+Offset )
3875   2                {
3876   3                  DEF_ButtonPress_Voice;
3877   3                  Hardware_DelayMs(100);
3878   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3879   3                  VoiceMenuMgr.MenuPoint=0;
3880   3                  VoiceMenuMgr.TotalMenuNum = 3;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 64  

3881   3                }
3882   2                else if ( gui_keycode == KEY_THREE+Offset )
3883   2                {
3884   3                  DEF_ButtonPress_Voice;
3885   3                  Hardware_DelayMs(100);
3886   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3887   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3888   3                  VoiceMenuMgr.MenuPoint=0;
3889   3                  VoiceMenuMgr.TotalMenuNum = 3;
3890   3                }
3891   2                else if ( gui_keycode == KEY_FOUR+Offset )
3892   2                {
3893   3                  DEF_ButtonPress_Voice;
3894   3                  Hardware_DelayMs(100);
3895   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3896   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3897   3                  VoiceMenuMgr.MenuPoint=0;
3898   3                  VoiceMenuMgr.TotalMenuNum = 3;
3899   3                }
3900   2                else if ( gui_keycode == KEY_FIVE+Offset )
3901   2                {
3902   3                  DEF_ButtonPress_Voice;
3903   3                  Hardware_DelayMs(100);
3904   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3905   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3906   3                  VoiceMenuMgr.MenuPoint=0;
3907   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3908   3                }
3909   2                else if ( gui_keycode == KEY_ASTERISK )
3910   2                {
3911   3                  DEF_ButtonPress_Voice;
3912   3                  Hardware_DelayMs(100);
3913   3                  GoToMainMenu(); 
3914   3                }
3915   2      
3916   2              break;
3917   2              
3918   2          #ifdef Function_TuyaWifi          
                  case SCREEN_NetWorkLink:
              
                    if (gui_keycode == KEY_ASTERISK)
                    {
                      DEF_ButtonPress_Voice;
                      Hardware_DelayMs(100);
                      WifiMgr.Link.Status = LinkIdle;
                      GoToMainMenu();
                    }
              
                    break;
                  #endif
3931   2      
3932   2          case SCREEN_RegisterUserFp:
3933   2              
3934   2              if ( FpUserRegisterMgr.Status == InputUserID )
3935   2              {
3936   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3937   3              }
3938   2              if ( gui_keycode == KEY_ASTERISK )
3939   2              {
3940   3                DEF_ButtonPress_Voice;
3941   3                Hardware_DelayMs(100);
3942   3                GoToFpMenu(); 
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 65  

3943   3              }
3944   2              
3945   2            break;
3946   2            
3947   2          case SCREEN_DeleteUserFp:
3948   2              if ( FpUserDeleteMgr.Status == InputUserID )
3949   2              {
3950   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3951   3              }
3952   2      
3953   2            break;
3954   2      
3955   2          case SCREEN_DeleteAllUserFp:
3956   2            
3957   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3958   2              {
3959   3                 if ( gui_keycode == KEY_POUNDSIGN )
3960   3                {
3961   4                  AllUserFpDeleteMgr.Selection = YES;
3962   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3963   4                }
3964   3                else if ( gui_keycode == KEY_ASTERISK )
3965   3                {
3966   4                  DEF_ButtonPress_Voice;
3967   4                  Hardware_DelayMs(100);
3968   4                  GoToFpMenu(); 
3969   4                }
3970   3              }
3971   2      
3972   2            break;
3973   2      
3974   2          case SCREEN_RegisterMasterFp:
3975   2              
3976   2              if ( FpUserRegisterMgr.Status == InputUserID )
3977   2              {
3978   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3979   3              }
3980   2              if ( gui_keycode == KEY_ASTERISK )
3981   2              {
3982   3                DEF_ButtonPress_Voice;
3983   3                Hardware_DelayMs(100);
3984   3                GoToFpMenu(); 
3985   3              }
3986   2              
3987   2            break;
3988   2            
3989   2          case SCREEN_DeleteMasterFp:
3990   2              if ( FpUserDeleteMgr.Status == InputUserID )
3991   2              {
3992   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3993   3              }
3994   2      
3995   2            break;
3996   2      
3997   2          case SCREEN_DeleteAllMasterFp:
3998   2            
3999   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
4000   2              {
4001   2                if ( gui_keycode == KEY_FOUR )
4002   2                {
4003   2                  DEF_ButtonPress_Voice;
4004   2                  AllUserFpDeleteMgr.Selection = YES;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 66  

4005   2                }
4006   2                else if ( gui_keycode == KEY_SIX )
4007   2                {
4008   2                  DEF_ButtonPress_Voice;
4009   2                  AllUserFpDeleteMgr.Selection = NO;
4010   2                }
4011   2                else if ( gui_keycode == KEY_POUNDSIGN )
4012   2                {
4013   2                  DEF_ButtonPress_Voice;
4014   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
4015   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
4016   2                  }
4017   2                  else{
4018   2                    AllUserFpDeleteMgr.Status = EXIT;
4019   2                  }
4020   2                }
4021   2              }*/
4022   2      
4023   2            break;
4024   2      
4025   2          case SCREEN_RegisterCardUser:
4026   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
4027   2              {
4028   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4029   3              }
4030   2              if ( gui_keycode == KEY_ASTERISK )
4031   2              {
4032   3                DEF_ButtonPress_Voice;
4033   3                Hardware_DelayMs(100);
4034   3                GoToCardMenu(); 
4035   3              }
4036   2      
4037   2            break;
4038   2            
4039   2          case SCREEN_DeleteCardUser:
4040   2      
4041   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
4042   2              {
4043   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4044   3              }
4045   2            break;
4046   2      
4047   2          case SCREEN_DeleteAllCardUser:
4048   2              
4049   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
4050   2              {
4051   3                if ( gui_keycode == KEY_POUNDSIGN )
4052   3                {
4053   4                  AllCardUserDeleteMgr.Selection = YES;
4054   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
4055   4                }
4056   3                else if ( gui_keycode == KEY_ASTERISK )
4057   3                {
4058   4                  DEF_ButtonPress_Voice;
4059   4                  Hardware_DelayMs(100);
4060   4                  GoToCardMenu(); 
4061   4                }
4062   3              }
4063   2      
4064   2            break;  
4065   2      
4066   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 67  

4067   2          case SCREEN_RegisterPasscodeUser:
4068   2      
4069   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
4070   2              {
4071   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4072   3              }
4073   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
4074   2              {
4075   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4076   3              }
4077   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
4078   2              {
4079   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4080   3              }
4081   2              
4082   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
4083   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
4084   2              {
4085   3                if ( gui_keycode == KEY_ASTERISK )
4086   3                {
4087   4                  DEF_ButtonPress_Voice;
4088   4                  Hardware_DelayMs(100);
4089   4                  GoToPasswordMenu(); 
4090   4                }
4091   3              }
4092   2          
4093   2            break;
4094   2            
4095   2          case SCREEN_DeletePasscodeUser:
4096   2      
4097   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
4098   2              {
4099   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4100   3              }
4101   2      
4102   2            break;
4103   2      
4104   2          case SCREEN_DeleteAllPasscodeUser:
4105   2            
4106   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
4107   2            {
4108   3              if ( gui_keycode == KEY_POUNDSIGN )
4109   3              {
4110   4                AllPasscodeUserDeleteMgr.Selection = YES;
4111   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
4112   4              }
4113   3              else if ( gui_keycode == KEY_ASTERISK )
4114   3              {
4115   4                DEF_ButtonPress_Voice;
4116   4                Hardware_DelayMs(100);
4117   4                GoToPasswordMenu(); 
4118   4              }
4119   3            }
4120   2            break;
4121   2            
4122   2      
4123   2          case SCREEN_TimeSetting:
4124   2            
4125   2          /*if ( TimeSettingMgr.Status == SetYearMajor)
4126   2              {
4127   2                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4128   2                {
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 68  

4129   2                  DEF_ButtonPress_Voice;
4130   2                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
4131   2                  TimeSettingMgr.Status = SetYearMinor;
4132   2                }
4133   2              }
4134   2              else if ( TimeSettingMgr.Status == SetYearMinor)
4135   2              {
4136   2                if ( gui_keycode == KEY_ASTERISK )
4137   2                {
4138   2                  DEF_ButtonPress_Voice;
4139   2                  TimeSettingMgr.Status = SetYearMajor;
4140   2                }
4141   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4142   2                {
4143   2                  DEF_ButtonPress_Voice;
4144   2                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
4145   2                  TimeSettingMgr.Status = SetMonthMajor;
4146   2                }
4147   2              }
4148   2              
4149   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
4150   2              {
4151   2                if ( (gui_keycode < KEY_TWO) )
4152   2                {
4153   2                  DEF_ButtonPress_Voice;
4154   2                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
4155   2                  TimeSettingMgr.Status = SetMonthMinor;
4156   2                }
4157   2              }
4158   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
4159   2              {
4160   2                if ( gui_keycode == KEY_ASTERISK )
4161   2                {
4162   2                  DEF_ButtonPress_Voice;
4163   2                  TimeSettingMgr.Status = SetYearMajor;
4164   2                }
4165   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4166   2                {
4167   2                  DEF_ButtonPress_Voice;
4168   2                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
4169   2                  if ( TempSystemTime.month > 0x12 ){
4170   2                    TempSystemTime.month = 0x12;
4171   2                  }
4172   2                  if(TempSystemTime.month == 0x00)
4173   2                  {
4174   2                   TempSystemTime.month = 0x01;
4175   2                  }
4176   2                  TimeSettingMgr.Status = SetDateMajor;
4177   2                }
4178   2              }
4179   2              
4180   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4181   2              {
4182   2                if ( gui_keycode == KEY_ASTERISK ){
4183   2                  DEF_ButtonPress_Voice;
4184   2                  TimeSettingMgr.Status = SetYearMajor;
4185   2                }
4186   2                else if ( (gui_keycode < KEY_FOUR) )
4187   2                {
4188   2                  DEF_ButtonPress_Voice;
4189   2                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4190   2                  TimeSettingMgr.Status = SetDateMinor;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 69  

4191   2                }
4192   2              }
4193   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4194   2              {
4195   2                if ( gui_keycode == KEY_ASTERISK ){
4196   2                  DEF_ButtonPress_Voice;
4197   2                  TimeSettingMgr.Status = SetYearMajor;
4198   2                }
4199   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4200   2                {
4201   2                  DEF_ButtonPress_Voice;
4202   2                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4203   2                  if ( TempSystemTime.date > 0x31 ){
4204   2                    TempSystemTime.date = 0x31;
4205   2                  }
4206   2                  if(TempSystemTime.date == 0x00)
4207   2                  {
4208   2                   TempSystemTime.date = 0x01;
4209   2                  }
4210   2                  TimeSettingMgr.Status = SetHourMajor;
4211   2                }
4212   2              }
4213   2      
4214   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4215   2              {
4216   2                if ( gui_keycode == KEY_ASTERISK ){
4217   2                  DEF_ButtonPress_Voice;
4218   2                  TimeSettingMgr.Status = SetYearMajor;
4219   2                }
4220   2                else if ( (gui_keycode < KEY_THREE )){
4221   2                  DEF_ButtonPress_Voice;
4222   2                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4223   2                  TimeSettingMgr.Status = SetHourMinor;
4224   2                }
4225   2              }
4226   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4227   2              {
4228   2                if ( gui_keycode == KEY_ASTERISK ){
4229   2                  DEF_ButtonPress_Voice;
4230   2                  TimeSettingMgr.Status = SetYearMajor;
4231   2                }
4232   2                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4233   2                {
4234   2                  DEF_ButtonPress_Voice;
4235   2                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
4236   2                  if (TempSystemTime.hour > 0x23){
4237   2                    TempSystemTime.hour = 0x23;
4238   2                  }
4239   2                  TimeSettingMgr.Status = SetMinuteMajor;
4240   2                }
4241   2              }
4242   2      
4243   2      
4244   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4245   2              {
4246   2                if ( gui_keycode == KEY_ASTERISK ){
4247   2                  DEF_ButtonPress_Voice;
4248   2                  TimeSettingMgr.Status = SetYearMajor;
4249   2                }
4250   2                else if ( gui_keycode < KEY_SIX)
4251   2                {
4252   2                  DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 70  

4253   2                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4254   2                  TimeSettingMgr.Status = SetMinuteMinor;
4255   2                }
4256   2              }
4257   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4258   2              {
4259   2                if ( gui_keycode == KEY_ASTERISK ){
4260   2                  DEF_ButtonPress_Voice;
4261   2                  TimeSettingMgr.Status = SetYearMajor;
4262   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4263   2                }
4264   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4265   2                  DEF_ButtonPress_Voice;
4266   2                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4267   2                  TimeSettingMgr.Status = SetSecondMajor;
4268   2                }
4269   2              }
4270   2      
4271   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4272   2              {
4273   2                if ( gui_keycode == KEY_ASTERISK ){
4274   2                  DEF_ButtonPress_Voice;
4275   2                  TimeSettingMgr.Status = SetYearMajor;
4276   2                }
4277   2                else if ( gui_keycode < KEY_SIX){
4278   2                  DEF_ButtonPress_Voice;
4279   2                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4280   2                  TimeSettingMgr.Status = SetSecondMinor;
4281   2                }
4282   2              }
4283   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4284   2              {
4285   2                if ( gui_keycode == KEY_ASTERISK ){
4286   2                  DEF_ButtonPress_Voice;
4287   2                  TimeSettingMgr.Status = SetYearMajor;
4288   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4289   2                }
4290   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4291   2                  DEF_ButtonPress_Voice;
4292   2                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4293   2                  TimeSettingMgr.Status = SetYearMajor;
4294   2                }
4295   2              }
4296   2      
4297   2              if ( gui_keycode == KEY_POUNDSIGN )
4298   2              {
4299   2                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4300   2                {
4301   2                  DEF_ButtonPress_Voice;
4302   2                  SaveSystemTime();
4303   2                  #ifdef Function_USE_Internal_RTC
4304   2                  G_SystemUTCTime = SystemTimeToUTC(SystemTime);
4305   2                  #elif defined Function_USE_External_RTC
4306   2                  PCF8563_WriteTime();
4307   2                  #endif
4308   2                  Hardware_DelayMs(100);
4309   2                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4310   2                }
4311   2                else{
4312   2                  Hardware_DelayMs(100);
4313   2                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4314   2                }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 71  

4315   2                  
4316   2                GoToSystemConfigMenu();         
4317   2              }
4318   2              else if ( gui_keycode == KEY_ASTERISK )
4319   2              {
4320   2                DEF_ButtonPress_Voice;
4321   2                Hardware_DelayMs(100);
4322   2                GoToSystemConfigMenu();   
4323   2      
4324   2                #ifdef Function_USE_Internal_RTC
4325   2                SystemTime = UTCToSystemtime(G_SystemUTCTime);
4326   2                #elif defined Function_USE_External_RTC
4327   2                PCF8563_ReadTime();
4328   2                #endif
4329   2        
4330   2                //GotSystemTime();      
4331   2              
4332   2                TimeSettingMgr.Status = SetYearMajor;
4333   2              }*/
4334   2      
4335   2            break;
4336   2      
4337   2            case SCREEN_RestoreFactoryDefault:
4338   2      
4339   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4340   2              {
4341   3                if ( gui_keycode == KEY_POUNDSIGN )
4342   3                {
4343   4                  DEF_ButtonPress_Voice;
4344   4                  Hardware_DelayMs(100);
4345   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4346   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4347   4                }
4348   3                else if ( gui_keycode == KEY_ASTERISK )
4349   3                {
4350   4                  DEF_ButtonPress_Voice;
4351   4                  Hardware_DelayMs(100);
4352   4                  GoToSystemConfigMenu(); 
4353   4                }
4354   3              }
4355   2      
4356   2              break;
4357   2      
4358   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
              
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        SystemLanguage = Chinese;       
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        SystemLanguage = English;         
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 72  

                      else if ( gui_keycode == KEY_ASTERISK)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToSystemConfigMenu();
                      }
                    break;
                  #endif
4385   2      
4386   2          case SCREEN_VolumeSetting:
4387   2      
4388   2            if ( gui_keycode == KEY_ONE )
4389   2            {
4390   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4391   3              Hardware_DelayMs(100);
4392   3              VoiceMgr.Enable = bTRUE;        
4393   3              SystemConfigSave();
4394   3              GoToSystemConfigMenu();
4395   3            }
4396   2            else if ( gui_keycode == KEY_TWO )
4397   2            {
4398   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4399   3              Hardware_DelayMs(100);
4400   3              VoiceMgr.Enable = bFALSE; 
4401   3              SystemConfigSave();
4402   3              GoToSystemConfigMenu();
4403   3            }
4404   2            else if ( gui_keycode == KEY_ASTERISK )
4405   2            {
4406   3              DEF_ButtonPress_Voice;
4407   3              Hardware_DelayMs(100);
4408   3              GoToSystemConfigMenu();
4409   3            }
4410   2            break;  
4411   2      /*        
4412   2          case SCREEN_ManagerPasscodeModify:
4413   2      
4414   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4415   2            {
4416   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4417   2            }
4418   2            
4419   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4420   2            {
4421   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4422   2            }
4423   2        
4424   2            break;
4425   2      */        
4426   2          case SCREEN_MemoryCheck:
4427   2            
4428   2            
4429   2            break;
4430   2            
4431   2          case SCREEN_ManagerIdentify:
4432   2      
4433   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4434   2                {
4435   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4436   3                }
4437   2            break;
4438   2              
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 73  

4439   2          case SCREEN_UnlockingModeSetting:
4440   2              
4441   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4442   2              {
4443   3                if ( gui_keycode == KEY_ONE )
4444   3                {
4445   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4446   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4447   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4448   4                  Hardware_DelayMs(100);
4449   4                }
4450   3                else if ( gui_keycode == KEY_TWO )
4451   3                {
4452   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4453   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4454   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4455   4                  {
4456   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4457   5                    Hardware_DelayMs(100);
4458   5                  }
4459   4                  else
4460   4                  {
4461   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4462   5                    Hardware_DelayMs(100);
4463   5                  }
4464   4                }
4465   3                else if ((gui_keycode == KEY_ASTERISK))
4466   3                {
4467   4                  DEF_ButtonPress_Voice;
4468   4                  Hardware_DelayMs(100);
4469   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4470   4                }
4471   3              }
4472   2            break;
4473   2      
4474   2            
4475   2            case SCREEN_ContinueOpenSetting:
4476   2            
4477   2                if ( gui_keycode == KEY_ONE )
4478   2                {
4479   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4480   3                  {
4481   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4482   4                    GUI_MotorContinueOpen();
4483   4                  }
4484   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4485   3                  Hardware_DelayMs(100);
4486   3                  GoToSystemConfigMenu();
4487   3                }
4488   2                else if ( gui_keycode == KEY_TWO )
4489   2                {
4490   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4491   3                  {
4492   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
4493   4                    MotorMgr.CWTimer = 0;
4494   4                    MotorMgr.CWWAITTimer =  0;  
4495   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4496   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
4497   4                    MotorMgr.MotorStatus = CCW; 
4498   4                    MotorMgr.CCWSoftStart = bTRUE;
4499   4                  }
4500   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 74  

4501   3                  Hardware_DelayMs(100);
4502   3                  GoToSystemConfigMenu();
4503   3                }
4504   2                else if ( gui_keycode == KEY_ASTERISK )
4505   2                {
4506   3                  DEF_ButtonPress_Voice;
4507   3                  Hardware_DelayMs(100);
4508   3                  GoToSystemConfigMenu();
4509   3                }
4510   2              break;
4511   2                
4512   2            case SCREEN_PickAlarmEnableSetting:
4513   2            
4514   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4515   2                {
4516   3                  if ( gui_keycode == KEY_ONE )
4517   3                  {
4518   4                    //PickAlarmEnableMgr.Selection = YES;
4519   4                    PickAlarmEnableMgr.Enable = bTRUE;
4520   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4521   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4522   4                    Hardware_DelayMs(100);
4523   4          
4524   4                  }
4525   3                  else if ( gui_keycode == KEY_TWO )
4526   3                  {
4527   4                    //PickAlarmEnableMgr.Selection = NO;
4528   4                    PickAlarmEnableMgr.Enable = bFALSE;
4529   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4530   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4531   4                    Hardware_DelayMs(100);
4532   4                    
4533   4                  }
4534   3                  else if ( gui_keycode == KEY_ASTERISK)
4535   3                  {
4536   4                    DEF_ButtonPress_Voice;
4537   4                    Hardware_DelayMs(100);
4538   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4539   4                  }
4540   3                }
4541   2                break;
4542   2      
4543   2            case SCREEN_SystemVersion:
4544   2      
4545   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4546   2                  {
4547   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4548   3                    CardIdentifyMgr.Status = ReadingCardID;
4549   3                    FpIdentifyMgr.Status = FPMcmdStart;
4550   3                    CurrentScreen = SCREEN_Main;
4551   3                  }
4552   2                break;
4553   2                  
4554   2            case SCREEN_PickLockAlarm:
4555   2        
4556   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4557   2            {
4558   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
4559   3              {
4560   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4561   4                {
4562   5                  
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 75  

4563   5                  PasscodeInputMgr.Point = 0x01;
4564   5                  PasscodeInputMgr.PasscodeLen = 16;
4565   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4566   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4567   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4568   5                  {
4569   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4570   6                  }
4571   5                  
4572   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4573   5                  //DEF_ButtonPress_Voice;
4574   5                }
4575   4               }
4576   3              else if ( gui_keycode == KEY_ASTERISK )
4577   3              {
4578   4              }
4579   3            }
4580   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4581   2            {
4582   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4583   3              {
4584   4                //DEF_ButtonPress_Voice;
4585   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4586   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4587   4              }
4588   3            }
4589   2            
4590   2            break;
4591   2      
4592   2            case SCREEN_SystemLocked:
4593   2              
4594   2              if ( gui_keycode != KEY_NONE )  
4595   2              {
4596   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4597   3                Hardware_DelayMs(100);
4598   3              }
4599   2            break;
4600   2      
4601   2            case SCREEN_CheckEventLogBySequence:
4602   2              
4603   2              #ifdef Function_EventLog
                      if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                      {
                        if ( gui_keycode == KEY_TWO )
                        { 
                          if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
                          {
                            DEF_ButtonPress_Voice;
                            CheckEventLogBySequenceMgr.OffsetEventLogNum--;
              
                            if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
                              LogMgr.DisplayPoint++;
                            }
                            else{
                              LogMgr.DisplayPoint = 0;
                            }
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 76  

                        else if ( gui_keycode == KEY_EIGHT )
                        { 
                          if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
                          {
                            DEF_ButtonPress_Voice;
                            if ( LogMgr.DisplayPoint > 0 )
                            {
                              LogMgr.DisplayPoint--;
                            }
                            else if( LogMgr.DisplayPoint == 0 )
                            {
                              if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
                              {
                                LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
                              }
                            }
                            CheckEventLogBySequenceMgr.OffsetEventLogNum++;
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if (gui_keycode == KEY_ASTERISK)
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4656   2      
4657   2            break;
4658   2      
4659   2            case SCREEN_DeleteEventLog:
4660   2              
4661   2              #ifdef Function_EventLog
                      if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
                      {
                        if ( gui_keycode == KEY_POUNDSIGN )
                        {
                          DEF_ButtonPress_Voice;
                          LogDeleteMgr.Status = LogDeleting;
                        }
                        else if ( gui_keycode == KEY_ASTERISK )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4677   2      
4678   2            break;
4679   2              
4680   2          default:
4681   2      
4682   2            break;
4683   2            
4684   2        }
4685   1        
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 77  

4686   1      }
4687          
4688          /*******************************************************/
4689          /*******************************************************/
4690          void GUI_Update_Screen(void)//GUI更新屏幕
4691          {
4692   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4693   1        {
4694   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_Flag_RefreshLCD = bFALSE;
                  #endif
4698   2          LastScreen =  CurrentScreen;
4699   2        }
4700   1        switch (CurrentScreen)
4701   1        {
4702   2          case SCREEN_Initialization:
4703   2      
4704   2            //SET_ALLKEYLED_OFF();
4705   2            ShowInitialization();
4706   2            break;
4707   2          
4708   2          case SCREEN_LowBattery:
4709   2      
4710   2            //SET_ALLKEYLED_OFF();
4711   2            ShowLowBattery();
4712   2            break;
4713   2      
4714   2          case SCREEN_PickLockAlarm:
4715   2      
4716   2            //SET_ALLKEYLED_ON();
4717   2            ShowPickLockAlarm();
4718   2            break;
4719   2      
4720   2          case SCREEN_Main:
4721   2            
4722   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4723   2            {
4724   3              //SET_ALLKEYLED_OFF();
4725   3            }
4726   2            else
4727   2            {
4728   3              //SET_ALLKEYLED_ON();
4729   3              GUI_UpadteMain();
4730   3            }
4731   2            break;
4732   2      
4733   2          case SCREEN_IdentifySuccess:
4734   2            
4735   2            //SET_ALLKEYLED_OFF();
4736   2            //KEYLED_WATERLIGHT_Task();
4737   2            ShowIdentifySuccessPage();
4738   2            break;
4739   2          
4740   2          case SCREEN_IdentifyFail:
4741   2              
4742   2            //KEYLED_IdentifyFail_Task();
4743   2            ShowIdentifyFailPage();
4744   2            break;
4745   2          
4746   2          case SCREEN_DoorBell:
4747   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 78  

4748   2            ShowDoorBell();
4749   2            break;
4750   2          
4751   2          case SCREEN_MainMenu:
4752   2      
4753   2            //SET_1234A_LED_ON();
4754   2            ShowMainMenu();
4755   2            break;
4756   2            
4757   2          case SCREEN_EventLogMenu:
4758   2            
4759   2            //SET_12A_LED_ON();
4760   2            #ifdef Function_EventLog
                    ShowLogMenu();
                    #endif
4763   2            break;
4764   2            
4765   2          case SCREEN_FpMenu:
4766   2            
4767   2            //SET_123A_LED_ON();
4768   2            ShowFpMenu();
4769   2            break;
4770   2          
4771   2          case SCREEN_CardUserMenu:
4772   2      
4773   2            //SET_12A_LED_ON();
4774   2            ShowCardUserMenu();
4775   2            break;
4776   2          
4777   2          case SCREEN_PasscodeMenu:
4778   2            
4779   2            //SET_123A_LED_ON();
4780   2            ShowPasscodeMenu();
4781   2            break;
4782   2          
4783   2          case SCREEN_SystemConfigMenu:
4784   2      
4785   2            //SET_123456A_LED_ON();
4786   2            ShowSystemConfigMenu();
4787   2            break;
4788   2          
4789   2          #ifdef Function_TuyaWifi
                  case SCREEN_NetWorkLink:
                    
                    ShowNetWorkConnecting();
                    break;
                  #endif
4795   2          
4796   2          case SCREEN_RegisterUserFp:
4797   2            
4798   2            //SET_ALLKEYLED_OFF();
4799   2            ShowRegisterUserFp();
4800   2            break;
4801   2          
4802   2          case SCREEN_DeleteUserFp:
4803   2            
4804   2            //SET_ALLKEYLED_ON();
4805   2            //ShowDeleteUserFp();
4806   2            break;
4807   2          
4808   2          case SCREEN_DeleteAllUserFp:
4809   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 79  

4810   2            //SET_AP_LED_ON();
4811   2            ShowDeleteAllUserFp();
4812   2            break;
4813   2          
4814   2          case SCREEN_RegisterMasterFp:
4815   2            
4816   2            //SET_ALLKEYLED_OFF();
4817   2            ShowRegisterMasterFp();
4818   2            break;
4819   2            
4820   2          case SCREEN_DeleteMasterFp:
4821   2            
4822   2            //SET_ALLKEYLED_ON();
4823   2            //ShowDeleteMasterFp();
4824   2            break;
4825   2      /*
4826   2          case SCREEN_DeleteAllMasterFp:
4827   2            SET_LRandConfirmLED_ON();
4828   2            ShowDeleteAllMasterFp();
4829   2      
4830   2            break;
4831   2      */
4832   2          case SCREEN_RegisterCardUser:
4833   2            //KEYLED_KEY5_Flash();
4834   2            ShowRegisterCardUser();
4835   2      
4836   2            break;
4837   2            
4838   2          case SCREEN_DeleteCardUser:
4839   2            //SET_ALLKEYLED_ON();
4840   2            //ShowDeleteCardUser();
4841   2      
4842   2            break;
4843   2      
4844   2          case SCREEN_DeleteAllCardUser:
4845   2            //SET_AP_LED_ON();
4846   2            ShowDeleteAllCardUser();
4847   2      
4848   2            break;
4849   2      
4850   2          case SCREEN_RegisterPasscodeUser:
4851   2            //SET_ALLKEYLED_ON();
4852   2            ShowRegisterPasscodeUser();
4853   2      
4854   2            break;
4855   2            
4856   2          case SCREEN_DeletePasscodeUser:
4857   2            //SET_ALLKEYLED_ON();
4858   2            //ShowDeletePasscodeUser();
4859   2      
4860   2            break;
4861   2      
4862   2          case SCREEN_DeleteAllPasscodeUser:
4863   2            //SET_AP_LED_ON();
4864   2            ShowDeleteAllPasscodeUser();
4865   2      
4866   2            break;
4867   2      
4868   2      
4869   2          case SCREEN_TimeSetting:
4870   2      
4871   2            //ShowTimeSetting();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 80  

4872   2      
4873   2            break;
4874   2      /*
4875   2          case SCREEN_ManagerPasscodeModify:
4876   2          //  SET_ALLKEYLED_ON();
4877   2          //  ShowModifyManagerPasscode();
4878   2      
4879   2            break;
4880   2      */      
4881   2          case SCREEN_RestoreFactoryDefault:
4882   2            //SET_AP_LED_ON();
4883   2            ShowRestoreFactoryDefault();
4884   2      
4885   2            break;
4886   2          
4887   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
                    //SET_12A_LED_ON();
                    ShowLanguageSetting();
              
                    break;
                  #endif
4894   2            
4895   2          case SCREEN_VolumeSetting:
4896   2            //SET_12A_LED_ON();
4897   2            ShowVolumeSetting();
4898   2      
4899   2            break;
4900   2      
4901   2          case SCREEN_MemoryCheck:
4902   2            //SET_UDandConfirmLED_ON();
4903   2            //ShowMemoryUsage();
4904   2      
4905   2            break;
4906   2            
4907   2          case SCREEN_ManagerIdentify:
4908   2      
4909   2            //SET_ALLKEYLED_ON();
4910   2            ShowManagerIdentify();
4911   2      
4912   2            break;
4913   2      
4914   2          case SCREEN_UnlockingModeSetting:
4915   2            //SET_12A_LED_ON();
4916   2            ShowUnlockingModeSetting();
4917   2          
4918   2            break;
4919   2            
4920   2          case SCREEN_ContinueOpenSetting:  
4921   2            //SET_12A_LED_ON();
4922   2            ShowContinuedOpenModeSetting();
4923   2            break;
4924   2            
4925   2          case SCREEN_PickAlarmEnableSetting: 
4926   2            //SET_12A_LED_ON();
4927   2            ShowPickAlarmEnableSetting();
4928   2            break;
4929   2            
4930   2          case SCREEN_SystemVersion:  
4931   2            //SET_AP_LED_ON();
4932   2            GUI_Update_Version();
4933   2            break;
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 81  

4934   2      
4935   2      //    case SCREEN_SelfTest:
4936   2      
4937   2            //SET_ALLKEYLED_ON();
4938   2            //ShowSelfTest();
4939   2      //      break;
4940   2          
4941   2          case SCREEN_AgingTest:
4942   2      
4943   2            //KEYLED_WATERLIGHT_Task();
4944   2            ShowAgingTest();
4945   2            break;
4946   2      
4947   2          case SCREEN_SystemLocked:
4948   2      
4949   2            //KEYLED_ASTERISK_Flash();
4950   2            ShowSystemLocked();
4951   2            break;
4952   2            
4953   2          case SCREEN_CheckEventLogBySequence:
4954   2            #ifdef Function_EventLog
                    ShowEventLogBySequence();
                    #endif
4957   2            break;
4958   2      
4959   2          case SCREEN_DeleteEventLog:
4960   2                  
4961   2          #ifdef Function_EventLog
                    ShowClearEventLog();
                  #endif
4964   2            break;
4965   2          
4966   2          default:
4967   2            break;
4968   2        }
4969   1      
4970   1      }
4971          /*******************************************************/
4972          /*******************************************************/
4973          /*******************************************************/
4974          void GUI_Init(void)//
4975          {
4976   1        //uint8_t i;
4977   1      
4978   1        GUI_ToggleFlag_05s=0x00;
4979   1        GUI_ToggleFlag_1s=0x01;
4980   1        FpIdentifyMgr.BreathingLED=0x00;
4981   1      
4982   1        GUI_Flag_RefreshLCD = bFALSE;
4983   1      
4984   1        FpIdentifyMgr.Status = FPMcmdStart;
4985   1        CardIdentifyMgr.Status = ReadingCardID;
4986   1        TimeSettingMgr.Status = SetYearMajor;
4987   1        BatteryMgr.PostLowBattery = bTRUE;
4988   1        
4989   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
4990   1      
4991   1        Key_Init();
4992   1        
4993   1        init_Managerdata();
4994   1      
4995   1        ReadCardUserMemoryFromEEPROM();
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 82  

4996   1      
4997   1        ReadPasscodeUserMemoryFromEEPROM();
4998   1      
4999   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
5000   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
5001   1      
5002   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
5003   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
5004   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
5005   1        UserIdentifyResultMgr.VoiceDelay = 0;
5006   1      
5007   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
5008   1              
5009   1        DEBUG_MARK;
5010   1          
5011   1        #ifdef Function_USE_Internal_RTC
                SystemTime = UTCToSystemtime(G_SystemUTCTime);
                #elif defined Function_USE_External_RTC
                PCF8563_ReadTime();
                #endif
5016   1        
5017   1        #ifdef Function_ScreenDisplay
                Display_Init();
                #endif
5020   1      
5021   1      }
5022          
5023          /*******************************************************/
5024          /*******************************************************/
5025          /*******************************************************/
5026          void GUI_Task(void)//
5027          {
5028   1        //uint8_t *Point;
5029   1        uint8_t i,j;
5030   1        if (++GUI_TimeCnt > 63)
5031   1        {
5032   2          GUI_ToggleFlag_1s^=0x01;
5033   2          GUI_TimeCnt =0;
5034   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
5035   2          {
5036   3            if(VoiceMgr.Enable == bFALSE)
5037   3            {
5038   4              VoiceMgr.Enable = bTRUE;
5039   4              DEF_ButtonPress_Voice;
5040   4              VoiceMgr.Enable = bFALSE;
5041   4            }
5042   3            else
5043   3            {
5044   4              DEF_ButtonPress_Voice;
5045   4            }
5046   3            RefreshSystemSleepTime();
5047   3          }
5048   2          #ifdef Function_FPMbreathingLed
5049   2          if( FpIdentifyMgr.BreathingLED > 0 )
5050   2          {
5051   3            FpIdentifyMgr.BreathingLED += 1;
5052   3            if( FpIdentifyMgr.BreathingLED == 4 )
5053   3            {
5054   4              FpIdentifyMgr.BreathingLED = 0;
5055   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
5056   4            }
5057   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 83  

5058   2          #endif
5059   2        }
5060   1        
5061   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
5062   2          GUI_ToggleFlag_05s^= 0x01;
5063   2        }
5064   1        
5065   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
5066   1        {
5067   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
5068   2        }
5069   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
5070   1        {
5071   2           LockBrand.BrandChangeTimeDelay--;
5072   2        }
5073   1      
5074   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
5075   1        {
5076   2          j=0;
5077   2          for (i=0;i<100;i++)
5078   2          {
5079   3            Hardware_DelayX5us(2);
5080   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
5081   3            {
5082   4              j++;
5083   4            }
5084   3          }
5085   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
5086   2          {
5087   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
5088   3          }
5089   2        }
5090   1        else
5091   1        {
5092   2          j=0;
5093   2          for (i=0;i<10;i++)
5094   2          {
5095   3            Hardware_DelayX5us(1);
5096   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
5097   3            {
5098   4              j++;
5099   4            }
5100   3          }
5101   2          if (j>8)
5102   2          {
5103   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
5104   3          }
5105   2        }
5106   1        
5107   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
5108   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
5109   1            &&( CurrentScreen != SCREEN_Initialization )
5110   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
5111   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
5112   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
5113   1        {
5114   2          CurrentScreen = SCREEN_PickLockAlarm;
5115   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
5116   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
5117   2          FpIdentifyMgr.Status = FPMcmdStart;
5118   2          CardIdentifyMgr.Status = ReadingCardID;
5119   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
C51 COMPILER V9.60.0.0   GUI                                                               05/09/2023 14:43:39 PAGE 84  

5120   2          #ifdef Function_FPMbreathingLed
5121   2          SetFPMbreathingLed(FPMbreathingLed_Off);
5122   2          #endif
5123   2        }
5124   1        
5125   1        GUI_Button_Monitor();
5126   1        
5127   1        GUI_Update_Screen();
5128   1        
5129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9098    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     45       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
