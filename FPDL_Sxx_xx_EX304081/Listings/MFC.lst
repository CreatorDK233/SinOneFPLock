C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MFC
OBJECT MODULE PLACED IN .\Objects\MFC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\ModuleLogic\MFC.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\MFC.lst) TABS(2) OBJECT(.\Object
                    -s\MFC.obj)

line level    source

   1          #include "MFC.h"
   2          #include "GUI_Function.h"
   3          #include "Project.h"
   4          #include "LCD.h"
   5          #include "Font_Menu.h"
   6          #include "Log.h"
   7          #include "global_variable.h"
   8          #include "Basic_Function.h"
   9          
  10          #include "EEPROM.h"
  11          #include "BeepMgr.h"
  12          #include "MFC_WS1850.h"
  13          
  14          extern DataInputMgr_t DataInputMgr;
  15          
  16          #define Def_UserSwingCardTimeDelay  Def_GuiTimeDelayCnt5s
  17          
  18          void ReadCardUserMemoryFromEEPROM(void)//从EEPROM读取卡片用户
  19          {
  20   1        EEPROM_ReadSequential(CardUserMemoryStartAddr,&CardMemoryMgr[0].UserID,(6*DEF_MAX_CARDUSER));
  21   1      }
  22          
  23          void WriteCardUserMemoryToEEPROM(void)//向EEPROM写入卡片用户
  24          {
  25   1        EEPROM_WriteSequential(CardUserMemoryStartAddr,&CardMemoryMgr[0].UserID,(6*DEF_MAX_CARDUSER));
  26   1      }
  27          
  28          void CardUserIdentify(void)//卡片用户认证
  29          {
  30   1        status_t GetCardID;
  31   1        uint8_t UserID;
  32   1        if (CardIdentifyMgr.Status == ReadingCardID)
  33   1        {
  34   2          GetCardID = MFC_Auto_Reader(CardIdentifyMgr.CID);
  35   2          if ( GetCardID == S_SUCCESS )
  36   2          {
  37   3            CardIdentifyMgr.Status = CheckCardIDifRegistered;
  38   3            RefreshSystemSleepTime();
  39   3          }
  40   2        }
  41   1        else if ( CardIdentifyMgr.Status == CheckCardIDifRegistered)
  42   1        {
  43   2          UserID = CompareCardIDwithMemory(CardIdentifyMgr.CID); 
  44   2          if ( UserID == 0x00 )   //Card ID is not registered
  45   2          {
  46   3            CardIdentifyMgr.Status = Fail;
  47   3            CardIdentifyMgr.TimeCnt = Def_IdendtifyFailScreenTimeDelay;
  48   3          }
  49   2          else
  50   2          {
  51   3            CardIdentifyMgr.UserID = UserID;
  52   3            CardIdentifyMgr.Status = Success; 
C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 2   

  53   3            CardIdentifyMgr.TimeCnt = Def_IdendtifySuccessScreenTimeDelay;
  54   3          }
  55   2        }
  56   1      }
  57          
  58          uint8_t CompareCardIDwithMemory(uint8_t *Point)//将新卡片ID与已有ID进行比较
  59          {
  60   1        uint8_t i;
  61   1        uint8_t CardUserID;
  62   1      
  63   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
  64   1        {
  65   2          if ( CardMemoryMgr[i].Status == CIDisValid )
  66   2          {
  67   3            if (  (CardMemoryMgr[i].CID[0] == *Point)
  68   3              &&(CardMemoryMgr[i].CID[1] == *(Point+1))
  69   3              &&(CardMemoryMgr[i].CID[2] == *(Point+2))
  70   3              &&(CardMemoryMgr[i].CID[3] == *(Point+3))
  71   3              //&&(CardMemoryMgr[i].CID[4] == *(Point+4))
  72   3               )
  73   3            {
  74   4              CardUserID = CardMemoryMgr[i].UserID;
  75   4              return CardUserID;
  76   4            }
  77   3          }
  78   2        }
  79   1        return 0;
  80   1      }
  81          
  82          uint8_t Get_Availabe_CardUserID(void)//获取已注册的卡片ID
  83          {
  84   1        uint8_t i;
  85   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
  86   1        {
  87   2          if ( CardMemoryMgr[i].Status != CIDisValid ){
  88   3            return (i+1);
  89   3          }
  90   2        }
  91   1        return 0;
  92   1      }
  93          
  94          status_t SaveCardUserToMemory(uint8_t *Point,uint8_t UserID)//保存卡片用户到EEPROM
  95          {
  96   1        uint8_t j;
  97   1      
  98   1        for (j=0;j<4;j++)
  99   1        {
 100   2          CardMemoryMgr[UserID-1].CID[j] = *(Point+j);
 101   2        }
 102   1        CardMemoryMgr[UserID-1].UserID = UserID;
 103   1        CardMemoryMgr[UserID-1].Status = CIDisValid;
 104   1        
 105   1        WriteCardUserMemoryToEEPROM();
 106   1        return S_SUCCESS;
 107   1      
 108   1      }
 109          
 110          void DeleteCardUserfromMemory(uint8_t UserID)//从EEPROM中删除卡片用户
 111          {
 112   1        uint8_t j;
 113   1      
 114   1        CardMemoryMgr[UserID-1].Status = CIDisInvalid;
C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 3   

 115   1        CardMemoryMgr[UserID-1].UserID = 0xFF;
 116   1        for (j=0;j<4;j++)
 117   1        {
 118   2          CardMemoryMgr[UserID-1].CID[j] = 0xFF;
 119   2        }
 120   1        WriteCardUserMemoryToEEPROM();
 121   1      }
 122          
 123          void DeleteAllCardUserfromMemory(void)//从EEPROM中删除所有卡片用户
 124          {
 125   1        uint8_t i,j;
 126   1      
 127   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 128   1        {
 129   2      
 130   2          CardMemoryMgr[i].Status = CIDisInvalid;
 131   2          CardMemoryMgr[i].UserID = 0xFF;
 132   2          for (j=0;j<4;j++)
 133   2          {
 134   3            CardMemoryMgr[i].CID[j] = 0xFF;
 135   3          }
 136   2      
 137   2        } 
 138   1        WriteCardUserMemoryToEEPROM();
 139   1      }
 140          
 141          bool_t IfCardUserIDisRegistered(uint8_t CardUserID)//判断卡片用户ID是否注册
 142          {
 143   1        uint8_t i;
 144   1      
 145   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 146   1        {
 147   2          if ( CardMemoryMgr[i].Status == CIDisValid )
 148   2            {
 149   3              if (  CardMemoryMgr[i].UserID == CardUserID)
 150   3              {
 151   4                return bTRUE;
 152   4              }
 153   3            }
 154   2        }
 155   1        return bFALSE;
 156   1      }
 157          
 158          uint8_t CheckHowManyRegisteredCardUser( void )//检查已注册卡片用户数量
 159          {
 160   1        uint8_t i,UserNum;
 161   1        UserNum =0;
 162   1        for (i=0;i<DEF_MAX_CARDUSER;i++)
 163   1        {
 164   2          if ( CardMemoryMgr[i].Status == CIDisValid )
 165   2          {
 166   3            UserNum++;
 167   3          }
 168   2        }
 169   1        return UserNum;
 170   1      }
 171          
 172          void ShowRegisterCardUser(void)//添加卡片用户
 173          {
 174   1        status_t GetCardID;
 175   1      
 176   1        if ( CardUserRegisterMgr.Status == StartCardUserRegister )
C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 4   

 177   1        {
 178   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
 179   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00))
 180   2          {
 181   3            CardUserRegisterMgr.Status = Fail;
 182   3            CardUserRegisterMgr.ErrorType = SystemNoMaster;
 183   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 184   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
 185   3            #ifdef Function_ScreenDisplay
 186   3            Clear_Screen();
 187   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
 188   3            #endif
 189   3          }
 190   2          else
 191   2          {
 192   3            if ( CheckMemoryMgr.CardUserNum < DEF_MAX_CARDUSER )
 193   3            {
 194   4              CardUserRegisterMgr.Status = InputCardUserID;
 195   4              DataInputMgr.Status = InputIdle;
 196   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
 197   4              #ifdef Function_ScreenDisplay
 198   4              Clear_Screen();
 199   4              DisHZ16x14Str(3,0,InputUserIDStr,NormalDisplay);
 200   4              #endif
 201   4            }
 202   3            else
 203   3            {
 204   4              CardUserRegisterMgr.Status = Fail;
 205   4              CardUserRegisterMgr.ErrorType = MemoryIsFull;
 206   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 207   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 208   4              #ifdef Function_ScreenDisplay
 209   4              Clear_Screen();
 210   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 211   4              #endif
 212   4            }
 213   3          }
 214   2        }
 215   1        if ( CardUserRegisterMgr.Status == InputCardUserID )
 216   1        {
 217   2          CardUserRegisterMgr.UserID = Get_Availabe_CardUserID();
 218   2          CardUserRegisterMgr.Status = ReadingCardID; 
 219   2          CardUserRegisterMgr.TimeCnt = Def_UserSwingCardTimeDelay;   //set to 5s
 220   2          //GUI_Flag_RefreshLCD = bTRUE;
 221   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseSwingCard);
 222   2          #ifdef Function_ScreenDisplay
 223   2          Clear_Screen();
 224   2          DisHZ16x14Str(3,40,PleaseSwingCardStr,NormalDisplay);
 225   2          #endif
 226   2        }
 227   1        else if ( CardUserRegisterMgr.Status == ReadingCardID)
 228   1        {
 229   2          GetCardID = MFC_Auto_Reader(CardUserRegisterMgr.CID);
 230   2          if ( GetCardID == S_SUCCESS )
 231   2          {
 232   3            CardUserRegisterMgr.Status = SavedCardID;
 233   3          }
 234   2          if ( --CardUserRegisterMgr.TimeCnt < 1 )
 235   2          {
 236   3            CardUserRegisterMgr.Status = Fail;
 237   3            CardUserRegisterMgr.ErrorType = TimeOut;
 238   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 5   

 239   3            //GUI_Flag_RefreshLCD = bTRUE;
 240   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 241   3            #ifdef Function_ScreenDisplay
 242   3            Clear_Screen();
 243   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
 244   3            #endif
 245   3          }
 246   2        }
 247   1        else if ( CardUserRegisterMgr.Status ==  SavedCardID )
 248   1        {
 249   2          if (CompareCardIDwithMemory(CardUserRegisterMgr.CID) == 0x00 )    //card CID is not be used
 250   2          {
 251   3            if ( SaveCardUserToMemory(CardUserRegisterMgr.CID,CardUserRegisterMgr.UserID) == S_SUCCESS )
 252   3            {
 253   4              CardUserRegisterMgr.Status = Success;
 254   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 255   4              //GUI_Flag_RefreshLCD = bTRUE;
 256   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 257   4              #ifdef Function_ScreenDisplay
 258   4              Clear_Screen();
 259   4              DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
 260   4              #endif
 261   4              CheckMemoryMgr.CardUserNum+=1;
 262   4            }
 263   3            else
 264   3            {
 265   4              CardUserRegisterMgr.Status = Fail;
 266   4              CardUserRegisterMgr.ErrorType = MemoryIsFull;
 267   4              CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 268   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 269   4              Hardware_DelayMs(100);
 270   4              #ifdef Function_ScreenDisplay
 271   4              Clear_Screen();
 272   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 273   4              #endif
 274   4            }
 275   3          }
 276   2          else
 277   2          {
 278   3            CardUserRegisterMgr.Status = Fail;
 279   3            CardUserRegisterMgr.ErrorType = CardCIDisBeUsed;
 280   3            CardUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
 281   3            //GUI_Flag_RefreshLCD = bTRUE;
 282   3            PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Card);
 283   3            #ifdef Function_ScreenDisplay
 284   3            DisHZ16x14Str(3,36,CardCIDisBeUsedStr,NormalDisplay);
 285   3            #endif
 286   3          }
 287   2        }
 288   1        else if ( CardUserRegisterMgr.Status ==  Success )
 289   1          {
 290   2            if ( --CardUserRegisterMgr.TimeCnt < 1 )
 291   2            {
 292   3              //CardUserRegisterMgr.Status = StartCardUserRegister;
 293   3              GoToCardMenu();
 294   3              #ifdef Function_EventLog
 295   3              GUI_CreatAndSaveLog(AddCardUser);
 296   3              #endif
 297   3            }
 298   2          }
 299   1        else if ( CardUserRegisterMgr.Status == Fail )
 300   1          {
C51 COMPILER V9.60.0.0   MFC                                                               04/19/2023 14:20:23 PAGE 6   

 301   2            if (CardUserRegisterMgr.ErrorType == UserIDisRegistered)
 302   2            {
 303   3            
 304   3            }
 305   2            else if ( CardUserRegisterMgr.ErrorType == SystemNoMaster )
 306   2            {
 307   3              
 308   3            }
 309   2            else if ( CardUserRegisterMgr.ErrorType == MemoryIsFull )
 310   2            {
 311   3            
 312   3            }
 313   2            else if ( CardUserRegisterMgr.ErrorType == CardCIDisBeUsed )
 314   2            {
 315   3              
 316   3            }
 317   2            else
 318   2            {
 319   3              
 320   3            }
 321   2            if ( CardUserRegisterMgr.TimeCnt-- < 1 )
 322   2            {
 323   3              GoToCardMenu();
 324   3            }
 325   2          }
 326   1      }
 327          
 328          
 329          
 330          
 331          
 332          
 333          
 334          
 335          
 336          
 337          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1092    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
