C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic) DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Object
                    -s\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          //Logic layer
   8          #include "RTC.h"
   9          #include "KeyScan.h"
  10          #include "Motor.h"
  11          #include "Log.h"
  12          #include "FP.h"
  13          #include "LCD.h"
  14          #include "MFC.h"
  15          //Application layer
  16          #include "GUI.h"
  17          #include "GUI_Function.h"
  18          #include "Basic_Function.h"
  19          #include "Voice_Menu.h"
  20          #include "Font_Menu.h"
  21          #include "Font.h"
  22          
  23          struct
  24          {
  25            enum{
  26              SetYearMajor=0,
  27              SetYearMinor=1,
  28              SetMonthMajor,
  29              SetMonthMinor,
  30              SetDateMajor,
  31              SetDateMinor,
  32              SetHourMajor,
  33              SetHourMinor,
  34              SetMinuteMajor,
  35              SetMinuteMinor,
  36              SetSecondMajor,
  37              SetSecondMinor
  38            }Status;
  39          
  40          }TimeSettingMgr;
  41          
  42          screen_t LastScreen;
  43          VoiceMenuMgr_t VoiceMenuMgr;
  44          DataInputMgr_t DataInputMgr;
  45          PasscodeInputMgr_t PasscodeInputMgr;
  46          uint8_t GUI_TimeCnt;
  47          uint8_t GUI_ToggleFlag_1s;
  48          uint8_t GUI_ToggleFlag_05s;
  49          bool_t GUI_Flag_RefreshLCD;
  50          
  51          keycode_t gui_keycode = KEY_NONE;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 2   

  53          uint8_t PasscodeBUFF1[12];
  54          
  55          /*******************************************************/
  56          /*******************************************************
  57          /*******************************************************/
  58          void ShowIdentifySuccessPage(void)//认证成功页面
  59          {
  60   1        #ifdef Function_ScreenDisplay
  61   1        uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
  62   1      //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
  63   1        uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
  64   1      //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
  65   1        uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
  66   1      //  uint8_t InitialStatusStrEn[]={"Initial"};
  67   1        #endif  
  68   1      
  69   1        if ( MotorMgr.MotorStatus != IDLE )
  70   1        {
  71   2          #ifdef Function_ScreenDisplay
  72   2          DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
  73   2          
  74   2          if ( UserIdentifyResultMgr.IdentifyType == CARD )
  75   2          {
  76   3            DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
  77   3            DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  78   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
  79   3          }
  80   2          else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
  81   2          {
  82   3            DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
  83   3            DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  84   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
  85   3          }
  86   2          else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
  87   2          {
  88   3            /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
  89   3            {
  90   3                DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
  91   3                DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  92   3            }
  93   3            else*/
  94   3            {
  95   4              DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
  96   4              DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
  97   4            }
  98   3            DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
  99   3          }
 100   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
 101   2          {
 102   3            
 103   3            DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
 104   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 105   3            DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
 106   3            DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
 107   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 108   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
 109   3          }
 110   2          else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
 111   2          {
 112   3            DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
 113   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 114   3            DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 3   

 115   3            DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
 116   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 117   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
 118   3          }
 119   2          else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
 120   2          {
 121   3            DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
 122   3            DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
 123   3            DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
 124   3            DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
 125   3            DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
 126   3            DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
 127   3          }
 128   2          else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
 129   2          {
 130   3          
 131   3              DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
 132   3          }
 133   2          DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
 134   2          
 135   2          #endif 
 136   2          
 137   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 138   2          {
 139   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 140   3            //Enable_KEYLED_WATERLIGHT(); 
 141   3            
 142   3            #ifdef Function_FPMbreathingLed
 143   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 144   3            //{
 145   3            SetFPMbreathingLed(FPMbreathingLed_Green);
 146   3            //}
 147   3            #endif  
 148   3                  
 149   3          }
 150   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 151   2          {
 152   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 153   3            {
 154   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 155   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 156   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 157   4              #ifdef Function_EventLog
 158   4              GUI_CreatAndSaveLog(OpenDoor);
 159   4              #endif
 160   4            }
 161   3            else if ( MotorMgr.CCWWAITTimer == 1)
 162   3            {
 163   4              //EMAGNET_RelaseTrigger();
 164   4            }
 165   3          }
 166   2        }
 167   1        else
 168   1        {
 169   2          #ifdef Function_ScreenDisplay
 170   2          GUI_Flag_RefreshLCD = bTRUE;
 171   2          DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
 172   2            DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
 173   2          #endif
 174   2          
 175   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 176   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 4   

 177   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 178   3            {
 179   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 180   4            }
 181   3            UserIdentifyResultMgr.TimeCnt--;
 182   3          }
 183   2          else
 184   2          {
 185   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 186   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 187   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 188   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 189   3            CardIdentifyMgr.Status = ReadingCardID;
 190   3            FpIdentifyMgr.Status = FPMcmdStart;
 191   3            CurrentScreen = SCREEN_Main;  
 192   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 193   3      //      #ifdef Function_FPMbreathingLed
 194   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 195   3      //      #endif  
 196   3          }
 197   2        }
 198   1      
 199   1      }
 200          /*******************************************************/
 201          /*******************************************************/
 202          /*******************************************************/
 203          void ShowIdentifyFailPage(void)//认证失败页面
 204          {
 205   1        #ifdef Function_ScreenDisplay
 206   1        DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
 207   1        
 208   1        if ( UserIdentifyResultMgr.IdentifyType == CARD )
 209   1        {
 210   2          DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 211   2        }
 212   1        else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 213   1        {
 214   2          if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
 215   2          {
 216   3            DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
 217   3            DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
 218   3          }
 219   2          else
 220   2          {
 221   3            DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 222   3          }
 223   2        }
 224   1        else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
 225   1        {
 226   2          DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
 227   2        }
 228   1        #endif
 229   1        
 230   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 231   1        {
 232   2          #ifdef Function_FPMbreathingLed
 233   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 234   2          //{
 235   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 236   2          //}
 237   2          #endif
 238   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 5   

 239   1      
 240   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 241   1        {
 242   2          UserIdentifyResultMgr.TimeCnt--;
 243   2        }
 244   1        else
 245   1        {
 246   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 247   2          CardIdentifyMgr.Status = ReadingCardID;
 248   2          FpIdentifyMgr.Status = FPMcmdStart;
 249   2          CurrentScreen = SCREEN_Main;
 250   2          RefreshSystemSleepTime();
 251   2          
 252   2          #ifdef Function_FPMbreathingLed
 253   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 254   2          #endif
 255   2        }
 256   1      }
 257          
 258          
 259          
 260          
 261          /*******************************************************/
 262          /*******************************************************/
 263          /*******************************************************/
 264          void DisplayMainPage(void)//界面_主页面
 265          {
 266   1        #ifdef Function_ScreenDisplay
 267   1        code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
 268   1        //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
 269   1        code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
 270   1      //  code uint8_t Str1En[]={"Sys without"};
 271   1        code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
 272   1      //  code uint8_t Str2En[]={"admin."};
 273   1        code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
 274   1      //  code uint8_t Str3En[]={"Input 2nd ID"};
 275   1        code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
             -HZ_end};
 276   1      //  code uint8_t Str4En[]={"Press # to menu"};
 277   1      
 278   1        uint8_t Empty32X20[80]={
 279   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 280   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 281   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 282   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 283   1          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
 284   1        };
 285   1      
 286   1        DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
 287   1        DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
 288   1        DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
 289   1        DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
 290   1        DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
 291   1          
 292   1          if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
 293   1          {
 294   2            if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 295   2                ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 296   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 297   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 298   2              )
 299   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 6   

 300   3              DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
 301   3              GUI_Flag_RefreshLCD = bTRUE;
 302   3            }
 303   2              
 304   2            else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
 305   2            {
 306   3              GUI_Flag_RefreshLCD = bTRUE;
 307   3              DisHZ16x14Str(3,4,Str4,NormalDisplay);          
 308   3            }
 309   2            
 310   2            else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 311   2            {
 312   3              Clear_Screen_Page(2);
 313   3              Clear_Screen_Page(3);
 314   3              Clear_Screen_Page(4);
 315   3              Clear_Screen_Page(5);
 316   3              DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
 317   3              DisHZ16x14Str(2,40,Str1,NormalDisplay);
 318   3              DisHZ16x14Str(4,40,Str2,NormalDisplay);
 319   3              GUI_Flag_RefreshLCD = bTRUE;
 320   3            }
 321   2            else
 322   2            {
 323   3              GUI_Flag_RefreshLCD = bTRUE;
 324   3              DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
 325   3              DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
 326   3      //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
 327   3                if (GUI_ToggleFlag_05s == 0 )
 328   3                {
 329   4                  DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
 330   4                }
 331   3                else
 332   3                {
 333   4                  DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
 334   4                }
 335   3            }
 336   2            //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
 337   2            ShowLockBrand();
 338   2          }
 339   1        #endif
 340   1      }
 341          
 342          /*******************************************************/
 343          void GUI_UpadteMain(void)//GUI_主界面
 344          {
 345   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 346   1        {
 347   2          CurrentScreen = SCREEN_SystemLocked;
 348   2          #ifdef Function_FPMbreathingLed
 349   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 350   2          #endif
 351   2        }
 352   1        
 353   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 354   1        {
 355   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 356   2          CardUserIdentify();
 357   2        }
 358   1      
 359   1        
 360   1        if ( CardIdentifyMgr.Status == Success)
 361   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 7   

 362   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 363   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 364   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 365   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 366   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 367   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 368   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 369   2          {
 370   3            UnlockSuccess(CARD);
 371   3          }
 372   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 373   2          {
 374   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 375   3            {
 376   4              UnlockSuccess(CARDandPASSCODE);
 377   4            }
 378   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 379   3            { 
 380   4              UnlockSuccess(FINGERPRINTandCARD);
 381   4            }
 382   3            else{ 
 383   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 384   4              {
 385   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 386   5                //CardIdentifyMgr.Status = ReadingCardID;
 387   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 388   5              }
 389   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 390   4              {
 391   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 392   5                {
 393   6                  CardIdentifyMgr.Status = ReadingCardID;
 394   6                }
 395   5                UserIdentifyResultMgr.VoiceDelay--;
 396   5              }
 397   4            }
 398   3          }
 399   2        }
 400   1        else if ( CardIdentifyMgr.Status == Fail)
 401   1        {
 402   2          
 403   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 404   2          {
 405   3            if ( (CardIdentifyMgr.CID[0] == 0x16)
 406   3              &&(CardIdentifyMgr.CID[1] == 0xD4)
 407   3              &&(CardIdentifyMgr.CID[2] == 0xDB)
 408   3              &&(CardIdentifyMgr.CID[3] == 0x3C) )
 409   3            {
 410   4              DEBUG_MARK;
 411   4              if ( LockBrand.BrandChangeTimeDelay == 0 )
 412   4              {
 413   5                WriteLockBrand();
 414   5                if ( LockBrand.GotBrandData == bTRUE )
 415   5                {
 416   6                  DEBUG_MARK;
 417   6                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 418   6                  LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 419   6                  RefreshSystemSleepTime();
 420   6                }
 421   5              }
 422   4              CardIdentifyMgr.Status = ReadingCardID;
 423   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 8   

 424   3            else
 425   3            {
 426   4              UnlockSuccess(INITIALSTATUS);
 427   4              RefreshSystemSleepTime();
 428   4            }
 429   3          }
 430   2          else
 431   2          {
 432   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 433   3            UserIdentifyResultMgr.IdentifyType = CARD;
 434   3            UserIdentifyResultMgr.CardUserID = 0x00;
 435   3            //Enable_KEYLED_IdentifyFail();
 436   3            CurrentScreen = SCREEN_IdentifyFail;
 437   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 438   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 439   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 440   3            {
 441   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 442   4            }
 443   3            else
 444   3            {
 445   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 446   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 447   4            }
 448   3          }
 449   2        }
 450   1      
 451   1        FpUserIdentify();
 452   1        if ( FpIdentifyMgr.Status == success)
 453   1        {
 454   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 455   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 456   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 457   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 458   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 459   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 460   2          {
 461   3            UnlockSuccess(FINGERPRINT);
 462   3          }
 463   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 464   2          {
 465   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 466   3            {
 467   4              UnlockSuccess(FINGERPRINTandCARD);
 468   4            }
 469   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 470   3            {
 471   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 472   4            }
 473   3            else
 474   3            {
 475   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 476   4              {
 477   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 478   5                //FpIdentifyMgr.Status = FPMcmdStart;
 479   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 480   5              }
 481   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 482   4              {
 483   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 484   5                {
 485   6                  FpIdentifyMgr.Status = FPMcmdStart;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 9   

 486   6                }
 487   5                UserIdentifyResultMgr.VoiceDelay--;
 488   5              }
 489   4            }
 490   3          }
 491   2        }
 492   1        else if ( FpIdentifyMgr.Status == fail)
 493   1        {
 494   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 495   2          {
 496   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 497   3          }
 498   2          else{
 499   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 500   3          }
 501   2          
 502   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 503   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 504   2            )
 505   2          {
 506   3            UnlockSuccess(INITIALSTATUS);
 507   3          }
 508   2          else
 509   2          {
 510   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 511   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 512   3            UserIdentifyResultMgr.FPUserID = 0x00;
 513   3            //Enable_KEYLED_IdentifyFail();
 514   3            CurrentScreen = SCREEN_IdentifyFail;
 515   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 516   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 517   3            
 518   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 519   3            {
 520   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 521   4            }
 522   3            else
 523   3            {
 524   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 525   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 526   4            }
 527   3          
 528   3          }
 529   2      
 530   2        }
 531   1      
 532   1        PasscodeUserIdentify();
 533   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 534   1        {
 535   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 536   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 537   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 538   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 539   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 540   2          if ((UserIdentifyResultMgr.UnlockingMode == SingalMode )
 541   2            ||(UserIdentifyResultMgr.PasscodeType == AppPasscode)
 542   2             )
 543   2          {
 544   3            UnlockSuccess(PASSCODE);  
 545   3          }
 546   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 547   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 10  

 548   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 549   3            {
 550   4              UnlockSuccess(CARDandPASSCODE);
 551   4            }
 552   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 553   3            { 
 554   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 555   4            }
 556   3            else
 557   3            {
 558   4                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 559   4                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 560   4                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 561   4            }
 562   3          }
 563   2      
 564   2        }
 565   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 566   1        {
 567   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 568   2          {
 569   3            UnlockSuccess(INITIALSTATUS);
 570   3          }
 571   2          else
 572   2          {
 573   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 574   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 575   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 576   3            //Enable_KEYLED_IdentifyFail();
 577   3            CurrentScreen = SCREEN_IdentifyFail;
 578   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 579   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 580   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 581   3            {
 582   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 583   4            }
 584   3            else
 585   3            {
 586   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 587   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 588   4            }
 589   3          }
 590   2        }
 591   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 592   1        {
 593   2          AgingTestMgr.TestTimes=0x0000;    
 594   2          CurrentScreen = SCREEN_AgingTest;
 595   2        }
 596   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 597   1        {
 598   2          GoToSystemVersion();
 599   2        } 
 600   1        if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 601   1        {
 602   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 603   2              ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 604   2              ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 605   2              ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 606   2            )
 607   2          {
 608   3            
 609   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 11  

 610   2          
 611   2        }
 612   1        #ifdef Function_ScreenDisplay
 613   1          DisplayMainPage();
 614   1        #endif
 615   1      
 616   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 617   1        {
 618   2          #ifdef Function_ScreenDisplay
 619   2          Clear_Screen();
 620   2          #endif
 621   2          //SET_ALLKEYLED_OFF();
 622   2        }
 623   1        
 624   1      }
 625          
 626          /*******************************************************/
 627          void ShowDoorBell(void)
 628          {
 629   1        DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
 630   1        if ( DoorBellMgr.TimeCnt > 0 )
 631   1        {
 632   2          DoorBellMgr.TimeCnt--;
 633   2        }
 634   1        else
 635   1        {
 636   2          CurrentScreen = SCREEN_Main;
 637   2        }
 638   1      }
 639          
 640          
 641          /*******************************************************/
 642          /*******************************************************/
 643          /*******************************************************/
 644          void ShowMainMenu(void)//界面_主菜单
 645          {
 646   1        #ifdef Function_ScreenDisplay
 647   1        uint8_t i,j;
 648   1        if( VoiceMenuMgr.MenuPoint<5 )
 649   1        {
 650   2          for (i=0;i<4;i++)
 651   2          {
 652   3            DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
 653   3          } 
 654   2        }
 655   1        else
 656   1        {
 657   2          for (j=0;j<1;j++)
 658   2          {
 659   3            DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
 660   3          } 
 661   2        }
 662   1        GUI_Flag_RefreshLCD = bTRUE;
 663   1        #endif
 664   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 665   1        {
 666   2          if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 667   2          {
 668   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 669   3            VoiceMenuMgr.MenuPoint++;
 670   3          }
 671   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 12  

 672   1      }
 673          /*******************************************************/
 674          /*******************************************************/
 675          /*******************************************************/
 676          void ShowLogMenu(void)//界面_日志菜单
 677          {
 678   1        #ifdef Function_ScreenDisplay
 679   1        uint8_t i;
 680   1        for (i=0;i<2;i++)
 681   1        {
 682   2          DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
 683   2        }   
 684   1        GUI_Flag_RefreshLCD = bTRUE;
 685   1        #endif
 686   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 687   1        {
 688   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 689   2          {
 690   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 691   3            VoiceMenuMgr.MenuPoint++;
 692   3          }
 693   2        }
 694   1        
 695   1      }
 696          
 697          /*******************************************************/
 698          /*******************************************************/
 699          /*******************************************************/
 700          void ShowFpMenu(void)//界面_指纹菜单
 701          {
 702   1        #ifdef Function_ScreenDisplay
 703   1        uint8_t i;
 704   1        for (i=0;i<3;i++)
 705   1        {
 706   2            DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
 707   2        }
 708   1        GUI_Flag_RefreshLCD = bTRUE;
 709   1        #endif
 710   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 711   1        {
 712   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 713   2          {
 714   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 715   3            VoiceMenuMgr.MenuPoint++;
 716   3          }
 717   2        }
 718   1      }
 719          
 720          
 721          /*******************************************************/
 722          /*******************************************************/
 723          /*******************************************************/
 724          void ShowPasscodeMenu(void)//界面_密码菜单
 725          {
 726   1        #ifdef Function_ScreenDisplay
 727   1        uint8_t i;
 728   1        for (i=0;i<3;i++)
 729   1        {
 730   2            DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
 731   2        } 
 732   1        #endif
 733   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 13  

 734   1        {
 735   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 736   2          {
 737   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 738   3            VoiceMenuMgr.MenuPoint++;
 739   3          }
 740   2        } 
 741   1      
 742   1      }
 743          
 744          /*******************************************************/
 745          /*******************************************************/
 746          /*******************************************************/
 747          void ShowCardUserMenu(void)//界面_磁卡菜单
 748          {
 749   1        #ifdef Function_ScreenDisplay
 750   1        uint8_t i;
 751   1        for (i=0;i<2;i++)
 752   1        {
 753   2            DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
 754   2        } 
 755   1        #endif
 756   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 757   1        {
 758   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 759   2          {
 760   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 761   3            VoiceMenuMgr.MenuPoint++;
 762   3          }
 763   2        } 
 764   1      }
 765          
 766          /*******************************************************/
 767          /*******************************************************/
 768          /*******************************************************/
 769          void ShowSystemConfigMenu(void)//界面_系统配置菜单
 770          {
 771   1        #ifdef Function_ScreenDisplay
 772   1        uint8_t i,j;
 773   1        if( VoiceMenuMgr.MenuPoint<5 )
 774   1        {
 775   2          for (i=0;i<4;i++)
 776   2          {
 777   3            DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
 778   3          } 
 779   2        }
 780   1        else
 781   1        {
 782   2          for (j=0;j<2;j++)
 783   2          {
 784   3            DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
 785   3          } 
 786   2        }
 787   1        GUI_Flag_RefreshLCD = bTRUE;
 788   1        #endif
 789   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 790   1        {
 791   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 792   2          {
 793   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 794   3            VoiceMenuMgr.MenuPoint++;
 795   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 14  

 796   2        }   
 797   1      }
 798          
 799          /*******************************************************/
 800          /*******************************************************/
 801          /*******************************************************/
 802          void ShowRegisterMasterFp(void)//界面_注册管理员指纹
 803          {
 804   1        #ifdef Function_ScreenDisplay
 805   1        code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
 806   1      //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
 807   1        #endif
 808   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 809   1        {
 810   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 811   2          {
 812   3            FpUserRegisterMgr.Status = AddUserToFPM;
 813   3            FpRegisterMgr.Status = FPMcmdStart;
 814   3            DataInputMgr.Status = InputIdle;
 815   3          }
 816   2          else
 817   2          {
 818   3            FpUserRegisterMgr.Status = RegisterUserFail;
 819   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 820   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 821   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 822   3            Hardware_DelayMs(100);
 823   3            #ifdef Function_ScreenDisplay
 824   3            Clear_Screen();
 825   3            DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
 826   3            #endif
 827   3          }
 828   2        }
 829   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 830   1        {
 831   2          FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 832   2          
 833   2          RegisterFp(FpUserRegisterMgr.UserID-1);
 834   2          
 835   2          if (FpRegisterMgr.Status == success)
 836   2          {
 837   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
 838   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 839   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 840   3            #ifdef Function_ScreenDisplay
 841   3            Clear_Screen();
 842   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
 843   3            #endif
 844   3            //GUI_Flag_RefreshLCD = bTRUE;
 845   3            CheckMemoryMgr.FpMasterNum+=1;
 846   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 847   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 848   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 849   3          }
 850   2          else if (FpRegisterMgr.Status == fail)
 851   2          {
 852   3            FpUserRegisterMgr.Status = RegisterUserFail;
 853   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 854   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 855   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 856   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 857   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 15  

 858   4              Clear_Screen();
 859   4              DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
 860   4              #endif
 861   4            }
 862   3            else
 863   3            {
 864   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 865   4              #ifdef Function_ScreenDisplay
 866   4              Clear_Screen();
 867   4              DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
 868   4              #endif
 869   4            }
 870   3            //GUI_Flag_RefreshLCD = bTRUE;
 871   3          }
 872   2        }
 873   1      
 874   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 875   1        {
 876   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 877   2          {
 878   3            GoToFpMenu();
 879   3            RefreshSystemSleepTime();
 880   3            #ifdef Function_EventLog
 881   3            GUI_CreatAndSaveLog(AddFpUser);
 882   3            #endif
 883   3      
 884   3            DEBUG_MARK;
 885   3          }
 886   2        }
 887   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
 888   1        {
 889   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
 890   2          {
 891   3            
 892   3          }
 893   2          
 894   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
 895   2          {
 896   3          
 897   3          }
 898   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
 899   2          {
 900   3        
 901   3          }
 902   2          else
 903   2          {
 904   3      
 905   3          }
 906   2          
 907   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 908   2          {
 909   3            GoToFpMenu();
 910   3          }
 911   2          DEBUG_MARK;
 912   2        }
 913   1      }
 914          
 915          /*******************************************************/
 916          /*******************************************************/
 917          /*******************************************************/
 918          void ShowDeleteMasterFp(void)//界面_删除管理员指纹
 919          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 16  

 920   1        //uint8_t i;
 921   1      
 922   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
 923   1        {
 924   2          FpUserDeleteMgr.Status = InputUserID;
 925   2          DataInputMgr.Status = InputIdle;
 926   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
 927   2        }
 928   1        
 929   1        if ( FpUserDeleteMgr.Status == InputUserID )
 930   1        {
 931   2          
 932   2          GUI_DataInputCreat(5,72,2,0x0000);
 933   2      
 934   2          if (DataInputMgr.Status == InputEnd)
 935   2          {
 936   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
 937   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
 938   3            {
 939   4              DataInputMgr.Status = InputIdle;    //Reinput
 940   4            }
 941   3            else
 942   3            {
 943   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
 944   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
 945   4              DataInputMgr.Status = InputIdle;  
 946   4            }
 947   3          }
 948   2          else if  (DataInputMgr.Status == InputExit)
 949   2          {
 950   3            FpUserDeleteMgr.Status = DeleteUserFail;
 951   3            FpUserDeleteMgr.ErrorType = QUIT;
 952   3            FpUserDeleteMgr.TimeCnt = 0;  
 953   3          }
 954   2        }
 955   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
 956   1        {
 957   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
 958   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
 959   2          {
 960   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
 961   3            {
 962   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
 963   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
 964   4              {
 965   5                FpUserDeleteMgr.Status = DeleteUserFail;
 966   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
 967   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
 968   5                //GUI_Flag_RefreshLCD = bTRUE;
 969   5                DEF_Fail_Beep;
 970   5              }
 971   4              else
 972   4              {
 973   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
 974   5                DataInputMgr.Status = InputIdle;  
 975   5                //GUI_Flag_RefreshLCD = bTRUE;
 976   5              }
 977   4            }
 978   3            else
 979   3            {
 980   4              FpUserDeleteMgr.Status = DeleteUserFail;
 981   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 17  

 982   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
 983   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
 984   4              //GUI_Flag_RefreshLCD = bTRUE;
 985   4            }
 986   3          }
 987   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
 988   2          {
 989   3            FpUserDeleteMgr.Status = DeleteUserFail;
 990   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
 991   3            FpUserDeleteMgr.ErrorType = QUIT;
 992   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
 993   3            //GUI_Flag_RefreshLCD = bTRUE;
 994   3          }
 995   2        }
 996   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
 997   1        {
 998   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
 999   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1000   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1001   2          FpmAckMgr.Status = WaitACK;
1002   2        }
1003   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1004   1          {
1005   2            if (FpmAckMgr.Status == GotACK)
1006   2              {
1007   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1008   3                {
1009   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1010   4                  //GUI_Flag_RefreshLCD = bTRUE;
1011   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1012   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1013   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1014   4                  {
1015   5                    CheckMemoryMgr.FpMasterNum-=1;
1016   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1017   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1018   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1019   5                  }
1020   4                }
1021   3                else
1022   3                {
1023   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1024   4                  //GUI_Flag_RefreshLCD = bTRUE;
1025   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1026   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1027   4                }
1028   3                DEBUG_MARK;
1029   3              }
1030   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1031   2              {
1032   3                FpUserDeleteMgr.Status = DeleteUserFail;
1033   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1034   3                //GUI_Flag_RefreshLCD = bTRUE;
1035   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1036   3              }
1037   2      
1038   2          }
1039   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1040   1          {
1041   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1042   2            {
1043   3              CurrentScreen = SCREEN_MasterFpMenu;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 18  

1044   3              UnlockModeJudgment();
1045   3              #ifdef Function_EventLog
1046   3              GUI_CreatAndSaveLog(DeleteFpUser);
1047   3              #endif
1048   3            }
1049   2            DEBUG_MARK;
1050   2          }
1051   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1052   1          {
1053   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1054   2            {
1055   3              
1056   3            }
1057   2            /*
1058   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1059   2            {
1060   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1061   2            }
1062   2            */
1063   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1064   2            {
1065   3              
1066   3            }
1067   2            else
1068   2            {
1069   3      
1070   3            }
1071   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1072   2            {
1073   3              CurrentScreen = SCREEN_MasterFpMenu;
1074   3            }
1075   2            DEBUG_MARK;
1076   2          }
1077   1        
1078   1      }
1079          /*******************************************************/
1080          /*******************************************************/
1081          /*******************************************************/
1082          void ShowRegisterUserFp(void)//界面_注册用户指纹
1083          {
1084   1        //uint8_t i;
1085   1        //uint16_t UserID;  
1086   1        //~{Lm<SV8NFSC;'~}
1087   1        #ifdef Function_ScreenDisplay
1088   1        code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
1089   1      //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
1090   1        #endif
1091   1        
1092   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1093   1        {
1094   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1095   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1096   2          )
1097   2          {
1098   3            FpUserRegisterMgr.Status = RegisterUserFail;
1099   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1100   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1101   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1102   3            #ifdef Function_ScreenDisplay
1103   3            Clear_Screen();
1104   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
1105   3            #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 19  

1106   3            //GUI_Flag_RefreshLCD = bTRUE;
1107   3          } 
1108   2          else
1109   2          {
1110   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1111   3            {
1112   4              FpUserRegisterMgr.Status = AddUserToFPM;
1113   4              FpRegisterMgr.Status = FPMcmdStart;
1114   4              DataInputMgr.Status = InputIdle;
1115   4            }
1116   3            else
1117   3            {
1118   4              FpUserRegisterMgr.Status = RegisterUserFail;
1119   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1120   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1121   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1122   4              Hardware_DelayMs(100);
1123   4              #ifdef Function_ScreenDisplay
1124   4              Clear_Screen();
1125   4              DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
1126   4              #endif
1127   4              //GUI_Flag_RefreshLCD = bTRUE;
1128   4            }
1129   3          }
1130   2        }
1131   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1132   1        {
1133   2          FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1134   2          
1135   2          RegisterFp(FpUserRegisterMgr.UserID-1);
1136   2          
1137   2          if (FpRegisterMgr.Status == success)
1138   2          {
1139   3            FpUserRegisterMgr.Status = RegisterUserSuccess;
1140   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1141   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1142   3            #ifdef Function_ScreenDisplay
1143   3            Clear_Screen();
1144   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1145   3            #endif
1146   3            CheckMemoryMgr.FpUserNum+=1;
1147   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1148   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1149   3            FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1150   3          }
1151   2          else if (FpRegisterMgr.Status == fail)
1152   2          {
1153   3            FpUserRegisterMgr.Status = RegisterUserFail;
1154   3            FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1155   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1156   3            if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1157   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1158   4              #ifdef Function_ScreenDisplay
1159   4              Clear_Screen();
1160   4              DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
1161   4              #endif
1162   4              //GUI_Flag_RefreshLCD = bTRUE;
1163   4            }
1164   3            else
1165   3            {
1166   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1167   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 20  

1168   4              Clear_Screen();
1169   4              DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1170   4              #endif
1171   4              //GUI_Flag_RefreshLCD = bTRUE;
1172   4            }
1173   3          }
1174   2        }
1175   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1176   1        {
1177   2          
1178   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1179   2          {
1180   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
1181   3            GoToFpMenu();
1182   3            RefreshSystemSleepTime();
1183   3            #ifdef Function_EventLog
1184   3            GUI_CreatAndSaveLog(AddFpUser);
1185   3            #endif
1186   3          }
1187   2          DEBUG_MARK;
1188   2        }
1189   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1190   1        {   
1191   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1192   2          {
1193   3          
1194   3          }
1195   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1196   2          {
1197   3            
1198   3          }
1199   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1200   2          {
1201   3            
1202   3          }
1203   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1204   2          {
1205   3            
1206   3          }
1207   2          else
1208   2          {
1209   3            
1210   3          }
1211   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1212   2          {
1213   3            GoToFpMenu();
1214   3          }
1215   2          DEBUG_MARK;
1216   2        }
1217   1      }
1218          
1219          /*******************************************************/
1220          /*******************************************************/
1221          /*******************************************************/
1222          void ShowDeleteUserFp(void)//界面_删除用户指纹
1223          {
1224   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1225   1        {
1226   2          FpUserDeleteMgr.Status = InputUserID;
1227   2          DataInputMgr.Status = InputIdle;
1228   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1229   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 21  

1230   1        if ( FpUserDeleteMgr.Status == InputUserID )
1231   1        {
1232   2            
1233   2            GUI_DataInputCreat(5,80,3,0x0000);
1234   2        
1235   2            if (DataInputMgr.Status == InputEnd)
1236   2            {
1237   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1238   3              if ((FpUserDeleteMgr.UserID >DEF_MAX_FPMASTER )&&( FpUserDeleteMgr.UserID < (DEF_MAX_FPMASTER+DEF_MAX_
             -FPUSER+1)) )
1239   3              {
1240   4                FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1241   4                CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1242   4                DataInputMgr.Status = InputIdle;
1243   4              }
1244   3              else        
1245   3              {
1246   4                DataInputMgr.Status = InputIdle;    //Reinput
1247   4              }
1248   3      
1249   3            }
1250   2            else if  (DataInputMgr.Status == InputExit)
1251   2            {
1252   3              FpUserDeleteMgr.Status = DeleteUserFail;
1253   3              FpUserDeleteMgr.ErrorType = QUIT;
1254   3              FpUserDeleteMgr.TimeCnt = 0;
1255   3            }
1256   2        }
1257   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1258   1        {
1259   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1260   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1261   2          {
1262   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1263   3            {
1264   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1265   4              DataInputMgr.Status = InputIdle;  
1266   4              //GUI_Flag_RefreshLCD = bTRUE;
1267   4            }
1268   3            else
1269   3            {
1270   4              FpUserDeleteMgr.Status = DeleteUserFail;
1271   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1272   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1273   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1274   4              //GUI_Flag_RefreshLCD = bTRUE;
1275   4            }
1276   3          }
1277   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1278   2          {
1279   3            FpUserDeleteMgr.Status = DeleteUserFail;
1280   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1281   3            FpUserDeleteMgr.ErrorType = QUIT;
1282   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1283   3            //GUI_Flag_RefreshLCD = bTRUE;
1284   3          }
1285   2        }
1286   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1287   1        {
1288   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1289   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1290   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 22  

1291   2          FpmAckMgr.Status = WaitACK;
1292   2        }
1293   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1294   1          {
1295   2            if (FpmAckMgr.Status == GotACK)
1296   2              {
1297   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1298   3                {
1299   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1300   4                  //GUI_Flag_RefreshLCD = bTRUE;
1301   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1302   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1303   4                  if ( CheckMemoryMgr.FpUserNum > 0 )
1304   4                  {
1305   5                    CheckMemoryMgr.FpUserNum-=1;
1306   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1307   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1308   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1309   5                  }
1310   4                }
1311   3                else
1312   3                {
1313   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1314   4                  //GUI_Flag_RefreshLCD = bTRUE;
1315   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1316   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1317   4                }
1318   3                DEBUG_MARK;
1319   3              }
1320   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1321   2              {
1322   3                FpUserDeleteMgr.Status = DeleteUserFail;
1323   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1324   3                //GUI_Flag_RefreshLCD = bTRUE;
1325   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1326   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1327   3              }
1328   2      
1329   2          }
1330   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1331   1          {
1332   2            
1333   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1334   2            {
1335   3              CurrentScreen = SCREEN_UserFpMenu;
1336   3              UnlockModeJudgment();
1337   3              #ifdef Function_EventLog
1338   3              GUI_CreatAndSaveLog(DeleteFpUser);
1339   3              #endif
1340   3            }
1341   2            DEBUG_MARK;
1342   2          }
1343   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1344   1          {
1345   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1346   2            {
1347   3      
1348   3            }
1349   2            else
1350   2            {
1351   3      
1352   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 23  

1353   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1354   2            {
1355   3              CurrentScreen = SCREEN_UserFpMenu;
1356   3            }
1357   2            DEBUG_MARK;
1358   2          }
1359   1        
1360   1      }
1361          
1362          
1363          /*******************************************************/
1364          /*******************************************************/
1365          /*******************************************************/
1366          void ShowDeleteAllUserFp(void)//界面_删除所有用户指纹
1367          {
1368   1        uint16_t i;
1369   1        
1370   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1371   1        {
1372   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1373   2          AllUserFpDeleteMgr.Selection = NO;
1374   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1375   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1376   2          #ifdef Function_ScreenDisplay
1377   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
1378   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
1379   2          #endif
1380   2        }
1381   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1382   1        {
1383   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1384   2          //{
1385   2            
1386   2          //}
1387   2        }
1388   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1389   1        {
1390   2          
1391   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1392   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
1393   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1394   2          //GUI_Flag_RefreshLCD = bTRUE;
1395   2          FpmAckMgr.Status = WaitACK;
1396   2        }
1397   1        
1398   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1399   1            {
1400   2              if (FpmAckMgr.Status == GotACK)
1401   2              {
1402   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1403   3                {
1404   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1405   4                  //GUI_Flag_RefreshLCD = bTRUE;
1406   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1407   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1408   4                  CheckMemoryMgr.FpUserNum=0;
1409   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1410   4                  {
1411   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1412   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1413   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1414   5                  }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 24  

1415   4                }
1416   3                else
1417   3                {
1418   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1419   4                  //GUI_Flag_RefreshLCD = bTRUE;
1420   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1421   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1422   4                }
1423   3                DEBUG_MARK;
1424   3              }
1425   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1426   2              {
1427   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1428   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1429   3                //GUI_Flag_RefreshLCD = bTRUE;
1430   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1431   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1432   3              }
1433   2            }
1434   1        
1435   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1436   1          {
1437   2            #ifdef Function_ScreenDisplay
1438   2            Clear_Screen();
1439   2            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1440   2            #endif
1441   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1442   2            {
1443   3              GoToFpMenu();
1444   3              #ifdef Function_EventLog
1445   3              GUI_CreatAndSaveLog(DeleteAllFpUser);
1446   3              #endif
1447   3            }
1448   2          }
1449   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1450   1          {
1451   2            #ifdef Function_ScreenDisplay
1452   2            Clear_Screen();
1453   2            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1454   2            #endif
1455   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1456   2            {
1457   3              GoToFpMenu();
1458   3            }
1459   2          }
1460   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1461   1          {
1462   2            GoToFpMenu();
1463   2          }
1464   1        
1465   1      }
1466          
1467          /*******************************************************/
1468          /*******************************************************/
1469          /*******************************************************/
1470          /*******************************************************/
1471          /*******************************************************/
1472          /*******************************************************/
1473          void ShowDeleteCardUser(void)//界面_删除磁卡用户
1474          {
1475   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1476   1        {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 25  

1477   2          CardUserDeleteMgr.Status = InputCardUserID;
1478   2          DataInputMgr.Status = InputIdle;
1479   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1480   2        }
1481   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1482   1        {
1483   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1484   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1485   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1486   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1487   2          
1488   2          GUI_DataInputCreat(6,68,3,0x0000);
1489   2      
1490   2          if (DataInputMgr.Status == InputEnd)
1491   2          {
1492   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1493   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1494   3            {
1495   4              DataInputMgr.Status = InputIdle;    //Reinput
1496   4            }
1497   3            else if ( IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE )
1498   3            {
1499   4              DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1500   4              CardUserDeleteMgr.Status = Success; 
1501   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1502   4              //GUI_Flag_RefreshLCD = bTRUE;
1503   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1504   4              if ( CheckMemoryMgr.CardUserNum > 0 )
1505   4              {
1506   5                CheckMemoryMgr.CardUserNum-=1;
1507   5              }
1508   4                
1509   4            }
1510   3            else
1511   3            {
1512   4              CardUserDeleteMgr.Status = Fail;
1513   4              CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1514   4              CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1515   4              //GUI_Flag_RefreshLCD = bTRUE;
1516   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1517   4            }
1518   3          }
1519   2          else if  (DataInputMgr.Status == InputExit)
1520   2          {
1521   3            CardUserDeleteMgr.Status = Fail;
1522   3            CardUserDeleteMgr.ErrorType = QUIT;
1523   3            CardUserDeleteMgr.TimeCnt = 0;
1524   3          }
1525   2        }
1526   1        
1527   1        else if  ( CardUserDeleteMgr.Status == Success)
1528   1        {
1529   2          
1530   2          if (--CardUserDeleteMgr.TimeCnt < 1 )
1531   2          {
1532   3            CurrentScreen = SCREEN_CardUserMenu;
1533   3            UnlockModeJudgment();
1534   3            #ifdef Function_EventLog
1535   3            GUI_CreatAndSaveLog(DeleteCardUser);
1536   3            #endif
1537   3          }
1538   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 26  

1539   1        else if ( CardUserDeleteMgr.Status == Fail)
1540   1        {
1541   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1542   2          {
1543   3      
1544   3          }
1545   2          else
1546   2          {
1547   3          
1548   3      
1549   3          }
1550   2          if ( CardUserDeleteMgr.TimeCnt-- < 1 )
1551   2          {
1552   3            CurrentScreen = SCREEN_CardUserMenu;
1553   3          }
1554   2        }
1555   1      }
1556          
1557          /*******************************************************/
1558          /*******************************************************/
1559          /*******************************************************/
1560          void ShowDeleteAllCardUser(void)//界面_删除全部磁卡用户
1561          {
1562   1        
1563   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1564   1        {
1565   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1566   2          AllCardUserDeleteMgr.Selection = NO;
1567   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1568   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1569   2        }
1570   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1571   1        { 
1572   2          #ifdef Function_ScreenDisplay
1573   2            DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
1574   2            DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
1575   2          #endif
1576   2        }
1577   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1578   1        {
1579   2          
1580   2          DeleteAllCardUserfromMemory();
1581   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1582   2          AllCardUserDeleteMgr.Status = Success;
1583   2          //GUI_Flag_RefreshLCD = bTRUE;
1584   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1585   2          CheckMemoryMgr.CardUserNum =0;
1586   2        }
1587   1        else if ( AllCardUserDeleteMgr.Status == Success )
1588   1        {
1589   2          #ifdef Function_ScreenDisplay
1590   2          Clear_Screen();
1591   2          DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1592   2          #endif
1593   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1594   2          {
1595   3            GoToCardMenu();
1596   3            UnlockModeJudgment();
1597   3            #ifdef Function_EventLog
1598   3            GUI_CreatAndSaveLog(DeleteAllCardUser);
1599   3            #endif
1600   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 27  

1601   2        }
1602   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1603   1        {
1604   2          GoToCardMenu();
1605   2        }
1606   1      }
1607          
1608          
1609          /*******************************************************/
1610          /*******************************************************/
1611          /*******************************************************/
1612          
1613          void ShowRegisterPasscodeUser(void)//注册密码用户
1614          {
1615   1        uint8_t i;
1616   1        
1617   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1618   1        {
1619   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1620   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1621   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1622   2            )
1623   2          {
1624   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1625   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1626   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1627   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1628   3            #ifdef Function_ScreenDisplay
1629   3            Clear_Screen();
1630   3            DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
1631   3            #endif
1632   3          }
1633   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1634   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1635   2          {
1636   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1637   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1638   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1639   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1640   3            Hardware_DelayMs(100);
1641   3            #ifdef Function_ScreenDisplay
1642   3            Clear_Screen();
1643   3            DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
1644   3            #endif
1645   3          }
1646   2          else
1647   2          {
1648   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1649   3            DataInputMgr.Status = InputIdle;
1650   3            for (i=0;i<12;i++)
1651   3            {
1652   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1653   4            }
1654   3          }
1655   2        }
1656   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1657   1        {
1658   2          PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1659   2          PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1660   2          DataInputMgr.Status = InputIdle;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 28  

1661   2          //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1662   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1663   2          {
1664   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1665   3          }
1666   2          else
1667   2          {
1668   3            PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1669   3          }
1670   2          
1671   2          PasscodeInputMgr.Point = 0x00;
1672   2          PasscodeInputMgr.PasscodeLen = 12;
1673   2          PasscodeInputMgr.Status = PasscodeInputStart;
1674   2          for (i=0;i<12;i++)
1675   2          {
1676   3            PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1677   3          }
1678   2          PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1679   2          //GUI_Flag_RefreshLCD = bTRUE;
1680   2          if (PasscodeUserRegisterMgr.UserPriority == Master)
1681   2          {
1682   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1683   3          }
1684   2          else
1685   2          {
1686   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1687   3          }
1688   2          #ifdef Function_ScreenDisplay
1689   2          Clear_Screen();
1690   2          DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
1691   2          #endif
1692   2        }
1693   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1694   1        {
1695   2          #ifdef Function_ScreenDisplay
1696   2          Clear_Screen();
1697   2          DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
1698   2          GUI_PasscodeInputCreat(5,0);
1699   2          #endif
1700   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1701   2          {
1702   3            if ( PasscodeInputMgr.Point > 5 )
1703   3            {
1704   4              for (i=0;i<12;i++)
1705   4              {
1706   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1707   5              }
1708   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1709   4              PasscodeInputMgr.Point = 0x00;
1710   4              PasscodeInputMgr.PasscodeLen = 12;
1711   4              PasscodeInputMgr.Status = PasscodeInputStart;
1712   4              for (i=0;i<12;i++)
1713   4              {
1714   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1715   5              }
1716   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1717   4              //GUI_Flag_RefreshLCD = bTRUE;
1718   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1719   4              {
1720   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1721   5              }
1722   4              else
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 29  

1723   4              {
1724   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1725   5              }
1726   4            }
1727   3            else
1728   3            {
1729   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1730   4              PasscodeInputMgr.Point = 0x00;
1731   4              PasscodeInputMgr.PasscodeLen = 12;
1732   4              PasscodeInputMgr.Status = PasscodeInputStart;
1733   4              for (i=0;i<12;i++)
1734   4              {
1735   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1736   5              }
1737   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1738   4              //GUI_Flag_RefreshLCD = bTRUE;
1739   4            }
1740   3          }
1741   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1742   2          {
1743   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1744   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1745   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1746   3          }
1747   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1748   2          {
1749   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1750   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1751   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1752   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1753   3            #ifdef Function_ScreenDisplay
1754   3            Clear_Screen();
1755   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1756   3            #endif
1757   3          } 
1758   2        }
1759   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1760   1        {
1761   2          GUI_PasscodeInputCreat(5,0);
1762   2      
1763   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1764   2          {
1765   3            if ( PasscodeInputMgr.Point > 5 )
1766   3              {
1767   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1768   4                //GUI_Flag_RefreshLCD = bTRUE;
1769   4              }
1770   3            else
1771   3              {
1772   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1773   4                PasscodeInputMgr.Point = 0x00;
1774   4                PasscodeInputMgr.PasscodeLen = 12;
1775   4                PasscodeInputMgr.Status = PasscodeInputStart;
1776   4                for (i=0;i<12;i++)
1777   4                {
1778   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1779   5                }
1780   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1781   4                //GUI_Flag_RefreshLCD = bTRUE;
1782   4              }
1783   3          }
1784   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 30  

1785   2          {
1786   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1787   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1788   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1789   3          }
1790   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1791   2          {
1792   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1793   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1794   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1795   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1796   3            #ifdef Function_ScreenDisplay
1797   3            Clear_Screen();
1798   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1799   3            #endif
1800   3          } 
1801   2        }
1802   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1803   1        {
1804   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1805   2          {
1806   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1807   3            {
1808   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1809   4              {
1810   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1811   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1812   5                //GUI_Flag_RefreshLCD = bTRUE;
1813   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1814   5                #ifdef Function_ScreenDisplay
1815   5                Clear_Screen();
1816   5                DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
1817   5                #endif
1818   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1819   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1820   6                }
1821   5                else{
1822   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1823   6                }
1824   5              }
1825   4              else
1826   4              {
1827   5                //目前不返回失败
1828   5              }
1829   4            }
1830   3            else
1831   3            {
1832   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1833   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
1834   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1835   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
1836   4              #ifdef Function_ScreenDisplay
1837   4              Clear_Screen();
1838   4              DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
1839   4              #endif
1840   4            }
1841   3          }
1842   2          else
1843   2          {
1844   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1845   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
1846   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 31  

1847   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1848   3            #ifdef Function_ScreenDisplay
1849   3            Clear_Screen();
1850   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
1851   3            #endif
1852   3          }
1853   2        }
1854   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
1855   1        {
1856   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1857   2          {
1858   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
                    #else
1861   3            
1862   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1863   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1864   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
1865   4              /*
1866   4              FpUserRegisterMgr.Status = AddUserToFPM;  
1867   4              FpRegisterMgr.Status = FPMcmdStart;
1868   4              FpUserRegisterMgr.UserID=0x01;
1869   4              CurrentScreen = SCREEN_RegisterMasterFp;
1870   4              */
1871   4              GoToMainMenu();
1872   4            }
1873   3            else
1874   3            {
1875   4              GoToPasswordMenu();
1876   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1877   4            }
1878   3            #endif
1879   3      
1880   3            #ifdef Function_EventLog
1881   3            GUI_CreatAndSaveLog(AddPasscodeUser);
1882   3            #endif
1883   3          }
1884   2        }
1885   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
1886   1        {
1887   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
1888   2          {
1889   3      
1890   3          }
1891   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
1892   2          {
1893   3      
1894   3          }
1895   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
1896   2          {
1897   3      
1898   3          }
1899   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
1900   2          {
1901   3      
1902   3          }
1903   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
1904   2          {
1905   3          
1906   3          }
1907   2          else
1908   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 32  

1909   3      
1910   3          }
1911   2        
1912   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1913   2          {
1914   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
1915   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
1916   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1917   3              )
1918   3            {
1919   4              CurrentScreen = SCREEN_Main;
1920   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
1921   4              FpIdentifyMgr.Status = FPMcmdStart;
1922   4              CardIdentifyMgr.Status = ReadingCardID;
1923   4            }
1924   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1925   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
1926   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1927   3            )
1928   3            {
1929   4              CurrentScreen = SCREEN_Main;
1930   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
1931   4              FpIdentifyMgr.Status = FPMcmdStart;
1932   4              CardIdentifyMgr.Status = ReadingCardID;
1933   4            }
1934   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
1935   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
1936   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
1937   3              )
1938   3            {
1939   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1940   4              {
1941   5                GoToPasswordMenu();
1942   5              }
1943   4              else{
1944   5                GoToPasswordMenu();
1945   5              }
1946   4            }
1947   3            else
1948   3            {
1949   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
1950   4              GoToPasswordMenu();
1951   4            }
1952   3          }
1953   2        }
1954   1      }
1955          
1956          /*******************************************************/
1957          /*******************************************************/
1958          /*******************************************************/
1959          void ShowDeletePasscodeUser(void)//界面_删除密码用户
1960          {
1961   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
1962   1        {
1963   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
1964   2          DataInputMgr.Status = InputIdle;
1965   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1966   2        }
1967   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
1968   1          {
1969   2            if (PasscodeUserDeleteMgr.UserPriority == Master)
1970   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 33  

1971   3      //        DisOneDigital16x8(6,8,1,NormalDisplay);
1972   3      //        DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
1973   3            }
1974   2            else
1975   2            {
1976   3      //        DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
1977   3      //        DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
1978   3      //        DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
1979   3            }
1980   2            
1981   2            GUI_DataInputCreat(6,56,2,0x0000);
1982   2      
1983   2            if (DataInputMgr.Status == InputEnd)
1984   2            {
1985   3              PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
1986   3              if (  (((PasscodeUserDeleteMgr.UserID>(DEF_MAX_PASSCODEMASTER+DEF_MAX_PASSCODEUSER))||(PasscodeUserDel
             -eteMgr.UserID<(DEF_MAX_PASSCODEMASTER+1)))&&(PasscodeUserDeleteMgr.UserPriority == User))   
1987   3                ||(((PasscodeUserDeleteMgr.UserID > DEF_MAX_PASSCODEMASTER)||(PasscodeUserDeleteMgr.UserID<1))&&(Pas
             -scodeUserDeleteMgr.UserPriority == Master))
1988   3               )      
1989   3              {
1990   4                DataInputMgr.Status = InputIdle;    //Reinput
1991   4              }
1992   3              else
1993   3              {
1994   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
1995   4                DataInputMgr.Status = InputIdle;  
1996   4              }
1997   3            }
1998   2            else if  (DataInputMgr.Status == InputExit)
1999   2            {
2000   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2001   3              PasscodeUserDeleteMgr.ErrorType = QUIT;
2002   3              PasscodeUserDeleteMgr.TimeCnt = 0;
2003   3            }
2004   2          }
2005   1        else if ( PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2006   1        {
2007   2          if ( IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE )
2008   2            {
2009   3              if (PasscodeUserDeleteMgr.UserPriority == Master)
2010   3              {
2011   4                if ((CheckMemoryMgr.PasscodeMasterNum==0x01))
2012   4                //&&(CheckMemoryMgr.FpMasterNum == 0x00))
2013   4                {
2014   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2015   5                  PasscodeUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
2016   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2017   5                  //GUI_Flag_RefreshLCD = bTRUE;
2018   5                  DEF_Fail_Beep;
2019   5                }
2020   4                else
2021   4                {
2022   5                  DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2023   5                  PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2024   5                  PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2025   5                  //GUI_Flag_RefreshLCD = bTRUE;
2026   5                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2027   5                  if ( CheckMemoryMgr.PasscodeMasterNum > 0 )
2028   5                  {
2029   6                    CheckMemoryMgr.PasscodeMasterNum-=1;
2030   6                  }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 34  

2031   5                }
2032   4              }
2033   3              else
2034   3              {
2035   4                DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2036   4                PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess; 
2037   4                PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2038   4                //GUI_Flag_RefreshLCD = bTRUE;
2039   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2040   4                if ( CheckMemoryMgr.PasscodeUserNum > 0 )
2041   4                {
2042   5                  CheckMemoryMgr.PasscodeUserNum-=1;
2043   5                }
2044   4              }
2045   3                
2046   3            }
2047   2          else
2048   2            {
2049   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2050   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2051   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2052   3              //GUI_Flag_RefreshLCD = bTRUE;
2053   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
2054   3            }
2055   2        }
2056   1        else if  ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2057   1          {
2058   2            
2059   2            if (--PasscodeUserDeleteMgr.TimeCnt < 1 )
2060   2              {
2061   3                //CurrentScreen = SCREEN_PasscodeUserMenu;
2062   3                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2063   3                //GUI_Flag_RefreshLCD = bTRUE;
2064   3                UnlockModeJudgment();
2065   3                #ifdef Function_EventLog
2066   3                GUI_CreatAndSaveLog(DeletePasscodeUser);
2067   3                #endif
2068   3              }
2069   2          }
2070   1        else if ( PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2071   1          {
2072   2            if ( PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2073   2            {
2074   3      
2075   3            }
2076   2            else if ( PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
2077   2            {
2078   3      
2079   3            }
2080   2            else
2081   2            {
2082   3        
2083   3            }
2084   2            
2085   2            if (PasscodeUserDeleteMgr.TimeCnt-- < 1 )
2086   2            {
2087   3              if ( PasscodeUserDeleteMgr.ErrorType == QUIT )
2088   3              {
2089   4                if (PasscodeUserDeleteMgr.UserPriority == Master)
2090   4                {
2091   5                  CurrentScreen = SCREEN_PasscodeMasterMenu;
2092   5                }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 35  

2093   4                else{
2094   5                  CurrentScreen = SCREEN_PasscodeUserMenu;
2095   5                }
2096   4              }
2097   3              else
2098   3              {
2099   4                PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2100   4                //GUI_Flag_RefreshLCD = bTRUE;
2101   4              }
2102   3            }
2103   2          }
2104   1        
2105   1      }
2106          
2107          /*******************************************************/
2108          /*******************************************************/
2109          /*******************************************************/
2110          void ShowDeleteAllPasscodeUser(void)//界面_删除全部密码用户
2111          {
2112   1        //uint8_t i;
2113   1        
2114   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2115   1        {
2116   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2117   2          AllPasscodeUserDeleteMgr.Selection = NO;
2118   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2119   2        }
2120   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2121   1        {
2122   2          #ifdef Function_ScreenDisplay
2123   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
2124   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
2125   2          #endif
2126   2        }
2127   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2128   1        {
2129   2          DeleteAllPasscodeUserfromMemory();
2130   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2131   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2132   2          GUI_Flag_RefreshLCD = bTRUE;
2133   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2134   2          CheckMemoryMgr.PasscodeUserNum = 0;
2135   2        }
2136   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2137   1          {
2138   2            #ifdef Function_ScreenDisplay
2139   2            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
2140   2            #endif
2141   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2142   2            {
2143   3              GoToPasswordMenu();
2144   3              UnlockModeJudgment();
2145   3              #ifdef Function_EventLog
2146   3              GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
2147   3              #endif
2148   3            }
2149   2          }
2150   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2151   1          {
2152   2            GoToPasswordMenu();
2153   2          }
2154   1      }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 36  

2155          
2156          /*******************************************************/
2157          /*******************************************************/
2158          /*******************************************************/
2159          void ShowTimeSetting(void)//界面_时间设定
2160          {
2161   1        #ifdef Function_ScreenDisplay
2162   1        code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
2163   1      
2164   1        code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
2165   1        
2166   1        code uint8_t TimeStrEn[]={"23:01:01"};
2167   1      
2168   1        DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
2169   1      
2170   1        DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
2171   1        DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
2172   1        DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
2173   1        DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
2174   1        
2175   1        DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
2176   1        DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
2177   1        DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
2178   1        DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
2179   1      
2180   1        if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
2181   1        {
2182   2          DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
2183   2        }
2184   1        else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
2185   1        {
2186   2          DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
2187   2        }
2188   1        else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
2189   1        {
2190   2          DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
2191   2        }
2192   1        else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
2193   1        {
2194   2          DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
2195   2        }
2196   1        else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
2197   1        {
2198   2          DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
2199   2        }
2200   1        else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
2201   1        {
2202   2          DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
2203   2        }
2204   1        
2205   1        else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
2206   1        {
2207   2          DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
2208   2        }
2209   1        else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
2210   1        {
2211   2          DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
2212   2        }
2213   1        else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
2214   1        {
2215   2          DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
2216   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 37  

2217   1        else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
2218   1        {
2219   2          DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
2220   2        }
2221   1        else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
2222   1        {
2223   2          DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
2224   2        }
2225   1        else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
2226   1        {
2227   2          DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
2228   2        }
2229   1        #endif
2230   1      }
2231          
2232          
2233          /*******************************************************/
2234          /*******************************************************/
2235          /*******************************************************/
2236          #ifdef Function_ScreenDisplay
2237          //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
2238          //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
2239          #endif
2240          void ShowLowBattery(void)//低电压界面
2241          {
2242   1        #ifdef Function_ScreenDisplay
2243   1        DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
2244   1        DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
2245   1        #endif  
2246   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2247   1        {
2248   2          if (--BatteryMgr.TimeCnt < 1 )
2249   2          {
2250   3            CurrentScreen = SCREEN_Main;
2251   3            FpIdentifyMgr.Status = FPMcmdStart;
2252   3            CardIdentifyMgr.Status = ReadingCardID;
2253   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2254   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2255   3            {
2256   4              RefreshSystemSleepTime();
2257   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2258   4              #ifdef Function_ScreenDisplay
2259   4              Clear_Screen();
2260   4              DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
2261   4              #endif
2262   4            }
2263   3            else
2264   3            {
2265   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2266   4            }
2267   3          }
2268   2        }
2269   1      }
2270          
2271          
2272          /*******************************************************/
2273          /*******************************************************/
2274          /*******************************************************/
2275          void ShowLanguageSetting(void)//界面_语言设定
2276          {
2277   1        
2278   1        /*code uint8_t LanguageStr[]={ZF_1,ZF_xiaoshudian,HZ_zhong,HZ_wenzi,HZ_end};
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 38  

2279   1      //  code uint8_t LanguageStrEn[]={"2.English"};
2280   1          
2281   1          DisHZ16x14Str(0,10,LanguageStr,NormalDisplay);
2282   1        
2283   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2284   1        {
2285   1          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2286   1          {
2287   1            if ( VoiceMenuMgr.MenuPoint < 2 )
2288   1            {
2289   1              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2290   1            }
2291   1      //      else
2292   1      //      {
2293   1      //        PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2294   1      //      }
2295   1            VoiceMenuMgr.MenuPoint++;
2296   1          }
2297   1        }*/
2298   1      }
2299          
2300          /*******************************************************/
2301          /*******************************************************/
2302          //uint8_t VoiceWait=0;
2303          /*******************************************************/
2304          void ShowVolumeSetting(void)//界面_音量设定
2305          { 
2306   1        #ifdef Function_ScreenDisplay
2307   1        code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
2308   1      //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
2309   1        code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
2310   1      //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
2311   1        
2312   1        DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
2313   1        DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
2314   1        #endif
2315   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2316   1        {
2317   2          {
2318   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2319   3            {
2320   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2321   4              VoiceMenuMgr.MenuPoint++;
2322   4            }
2323   3          }
2324   2        } 
2325   1      }
2326          
2327          /*******************************************************/
2328          /*******************************************************/
2329          /*******************************************************/
2330          void ShowMemoryUsage(void)//界面_内存使用情况
2331          {
2332   1        
2333   1      }
2334          
2335          /*******************************************************/
2336          /*******************************************************/
2337          /*******************************************************/
2338          void ShowManagerIdentify(void)//界面_管理员认证
2339          {
2340   1        uint8_t i;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 39  

2341   1        #ifdef Function_ScreenDisplay
2342   1        code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
2343   1      //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
2344   1        code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
2345   1      //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
2346   1        //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
2347   1        #endif
2348   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
2349   1        {
2350   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2351   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2352   2            )
2353   2          {
2354   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2357   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2358   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2359   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2360   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2361   3            DataInputMgr.Status = InputIdle;
2362   3            PasscodeUserRegisterMgr.UserID = 0x01;
2363   3            PasscodeUserRegisterMgr.UserPriority = Master;
2364   3            
2365   3            PasscodeInputMgr.Point = 0x00;
2366   3            PasscodeInputMgr.PasscodeLen = 12;
2367   3            PasscodeInputMgr.Status = PasscodeInputStart;
2368   3            for (i=0;i<12;i++)
2369   3            {
2370   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2371   4            }
2372   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2373   3            //GUI_Flag_RefreshLCD = bTRUE;
2374   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2375   3              #ifdef Function_ScreenDisplay
2376   3              Clear_Screen();
2377   3              DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
2378   3              #endif
2379   3            #endif
2380   3            
2381   3          }
2382   2          else
2383   2          {
2384   3            PasscodeInputMgr.Point = 0x00;
2385   3            PasscodeInputMgr.PasscodeLen = 12;
2386   3            PasscodeInputMgr.Status = PasscodeInputStart;
2387   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2388   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2389   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2390   3            {
2391   4              PasscodeInputMgr.InputBuff[i]=0xff;
2392   4            }
2393   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2394   3            FpIdentifyMgr.Status = FPMcmdStart;
2395   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2396   3            #ifdef Function_ScreenDisplay
2397   3            Clear_Screen();
2398   3            DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
2399   3            #endif
2400   3          }
2401   2        }
2402   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 40  

2403   1        {
2404   2      
2405   2          GUI_PasscodeInputCreat(6,16);
2406   2          
2407   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2408   2          {
2409   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2410   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
2411   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2412   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2413   3               )
2414   3            {
2415   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2416   4            }
2417   3            //GUI_Flag_RefreshLCD = bTRUE;
2418   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2419   3      
2420   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2421   3            {
2422   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2423   4              #ifdef Function_ScreenDisplay
2424   4              Clear_Screen();
2425   4              DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
2426   4              #endif
2427   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2428   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2429   4              {
2430   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2431   5              } 
2432   4            }
2433   3            else
2434   3            {
2435   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2436   4              #ifdef Function_ScreenDisplay
2437   4              Clear_Screen();
2438   4              DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
2439   4              #endif
2440   4            }
2441   3            
2442   3          }
2443   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2444   2          {
2445   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2446   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2447   3          }
2448   2      
2449   2          FpUserIdentify();
2450   2          if ( (FpIdentifyMgr.Status == success)
2451   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2452   2            )
2453   2          {
2454   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2455   3            FpIdentifyMgr.Status = FPMcmdStart;
2456   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2457   3            #ifdef Function_ScreenDisplay
2458   3            Clear_Screen();
2459   3            DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
2460   3            #endif
2461   3            #ifdef Function_FPMbreathingLed
2462   3            FpIdentifyMgr.BreathingLED = 1;
2463   3            SetFPMbreathingLed(FPMbreathingLed_Green);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 41  

2464   3            #endif  
2465   3          }
2466   2          else if (( FpIdentifyMgr.Status == fail)
2467   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
2468   2            )
2469   2          {
2470   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2471   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
2472   4            }
2473   3            else{
2474   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2475   4            }
2476   3            FpIdentifyMgr.Status = FPMcmdStart;
2477   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
2478   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2479   3            //GUI_Flag_RefreshLCD = bTRUE;
2480   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2481   3            #ifdef Function_ScreenDisplay
2482   3            Clear_Screen();
2483   3            DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
2484   3            #endif
2485   3            #ifdef Function_FPMbreathingLed
2486   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2487   3            #endif
2488   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2489   3            {
2490   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2491   4            }
2492   3          }
2493   2        }
2494   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2495   1        {
2496   2          GoToMainMenu();
2497   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
2498   2        }
2499   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2500   1        {
2501   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2502   2          {
2503   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2504   3            {
2505   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2506   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2507   4            }
2508   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2509   3            CardIdentifyMgr.Status = ReadingCardID;
2510   3            FpIdentifyMgr.Status = FPMcmdStart;
2511   3            CurrentScreen = SCREEN_Main;
2512   3            #ifdef Function_FPMbreathingLed
2513   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2514   3            #endif
2515   3          }
2516   2        }
2517   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2518   1        {
2519   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2520   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2521   2          CardIdentifyMgr.Status = ReadingCardID;
2522   2          FpIdentifyMgr.Status = FPMcmdStart;
2523   2          CurrentScreen = SCREEN_Main;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 42  

2524   2          #ifdef Function_FPMbreathingLed
2525   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2526   2          #endif
2527   2        }
2528   1      
2529   1      }
2530          /*******************************************************/
2531          /*******************************************************/
2532          /*******************************************************/
2533          void ShowUnlockingModeSetting(void)//界面_解锁模式设置
2534          {
2535   1        #ifdef Function_ScreenDisplay
2536   1        code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
2537   1      //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
2538   1        code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
2539   1      //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
2540   1        code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
2541   1      //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
2542   1        #endif
2543   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2544   1        {
2545   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2546   2        }
2547   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2548   1        { 
2549   2            #ifdef Function_ScreenDisplay
2550   2            DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
2551   2            DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
2552   2            #endif
2553   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2554   2            {
2555   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2556   3              {
2557   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2558   4                VoiceMenuMgr.MenuPoint++;
2559   4              }
2560   3            }
2561   2        }
2562   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2563   1        {
2564   2          UnlockingModeMgr.TimeCnt = 0;
2565   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2566   2          { 
2567   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2568   3            {
2569   4              #ifdef Function_ScreenDisplay
2570   4                Clear_Screen();
2571   4                DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
2572   4              #endif
2573   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2574   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2575   4            }
2576   3          }
2577   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2578   2        }
2579   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2580   1        {
2581   2          if (UnlockingModeMgr.TimeCnt > 0)
2582   2          {
2583   3            UnlockingModeMgr.TimeCnt--;
2584   3          }
2585   2          else
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 43  

2586   2          {
2587   3            SystemConfigSave();
2588   3            GoToSystemConfigMenu();
2589   3          }
2590   2        }
2591   1      }
2592          
2593          /*******************************************************/
2594          /*******************************************************/
2595          /*******************************************************/
2596          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2597          {
2598   1        #ifdef Function_ScreenDisplay
2599   1        //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
2600   1      //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
2601   1        code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
2602   1      //  code uint8_t EnabledStrEn[]={"1. ON"};
2603   1        code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
2604   1      //  code uint8_t DisabledStrEn[]={"2. OFF"};
2605   1      
2606   1        DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
2607   1        DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
2608   1        #endif
2609   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2610   1        {
2611   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2612   2          {
2613   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2614   3            VoiceMenuMgr.MenuPoint++;
2615   3          }
2616   2        }
2617   1      }
2618          
2619          /*******************************************************/
2620          /*******************************************************/
2621          /*******************************************************/
2622          void ShowPickAlarmEnableSetting(void)//界面_防撬告警使能设置
2623          {
2624   1        #ifdef Function_ScreenDisplay
2625   1        code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
2626   1      //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
2627   1        code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
2628   1      //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
2629   1      
2630   1        DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
2631   1        DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
2632   1        #endif
2633   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2634   1        {
2635   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2636   2          {
2637   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2638   3            VoiceMenuMgr.MenuPoint++;
2639   3          }
2640   2          /*
2641   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2642   2          
2643   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2644   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 44  

2645   2            VoiceMenuMgr.MenuPoint = 0;
2646   2          }
2647   2          */
2648   2        }
2649   1      
2650   1        
2651   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2652   1          {
2653   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2654   2          }
2655   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2656   1          {
2657   2            
2658   2          }
2659   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2660   1          {     
2661   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2662   2            SystemConfigSave();
2663   2            Config_AntiPrying_Interrupt();
2664   2            GoToSystemConfigMenu(); 
2665   2          }
2666   1      }
2667          
2668          /*******************************************************/
2669          /*******************************************************/
2670          extern uint16_t KeyHoldTimeCnt;
2671          /*******************************************************/
2672          void ShowRestoreFactoryDefault(void)//界面_恢复出厂
2673          {
2674   1        uint8_t i;
2675   1        #ifdef Function_ScreenDisplay
2676   1        code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
2677   1      //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
2678   1        #endif
2679   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2680   1      
2681   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2682   1        {
2683   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2684   2          //GUI_Flag_RefreshLCD = bTRUE;
2685   2          RestoreFactoryDefaultMgr.Selection = NO;
2686   2          //SET_LRandConfirmLED_ON();
2687   2          //SET_AP_LED_ON();
2688   2        }
2689   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2690   1        {
2691   2          #ifdef Function_ScreenDisplay
2692   2          Clear_Screen();
2693   2          DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
2694   2          DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
2695   2          #endif
2696   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2697   2          {
2698   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2699   3            {
2700   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2701   4              VoiceMenuMgr.MenuPoint++;
2702   4            }
2703   3          }
2704   2        }
2705   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 45  

2706   1        { 
2707   2          #ifdef Function_ScreenDisplay
2708   2          Clear_Screen();
2709   2          DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
2710   2          #endif
2711   2          //SET_ALLKEYLED_OFF();
2712   2          
2713   2          RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
2714   2      
2715   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2716   2      
2717   2        }
2718   1        else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2719   1        {
2720   2          if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2721   2            {
2722   3              RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2723   3              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2724   3              RestoreFactoryDefaultMgr.FailTimes = 0x00;
2725   3            }
2726   2          else{ 
2727   3            RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2728   3            PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2729   3            #ifdef Function_ScreenDisplay
2730   3            Clear_Screen();
2731   3            DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
2732   3            #endif
2733   3          }
2734   2        } 
2735   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2736   1          {
2737   2        
2738   2            DeleteAllFpFromFPM();
2739   2            if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2740   2            {
2741   3              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2742   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2743   3              CheckMemoryMgr.FpUserNum = 0x00;
2744   3              CheckMemoryMgr.FpMasterNum = 0x00;  
2745   3              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2746   3              {
2747   4                FpUserMemoryMgr[i].UserID = 0xFFFF;
2748   4                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2749   4                FpUserMemoryMgr[i].UserPriority = Undefined;
2750   4              } 
2751   3            }
2752   2            else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2753   2            {
2754   3              if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2755   3              {
2756   4                RestoreFactoryDefaultMgr.FailTimes++;
2757   4                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2758   4                RefreshSystemSleepTime();
2759   4              }
2760   3              else
2761   3              {
2762   4                RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2763   4                PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2764   4                #ifdef Function_ScreenDisplay
2765   4                Clear_Screen();
2766   4                DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
2767   4                #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 46  

2768   4              }
2769   3            } 
2770   2          }
2771   1        
2772   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2773   1          {     
2774   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2775   2            {
2776   3              DeleteAllCardUserfromMemory();
2777   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2778   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2779   3              CheckMemoryMgr.CardUserNum = 0x00;
2780   3            } 
2781   2          }
2782   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2783   1          { 
2784   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2785   2            {
2786   3              DeleteAllPasscodeMasterfromMemory();
2787   3              DeleteAllPasscodeUserfromMemory();
2788   3              SystemConfigReset();
2789   3              #ifdef Function_EventLog
2790   3              DeleteAllLog();
2791   3              #endif
2792   3              
2793   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2794   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2795   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2796   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2797   3              //GUI_Flag_RefreshLCD = bTRUE;
2798   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2799   3              #ifdef Function_ScreenDisplay
2800   3              Clear_Screen();
2801   3              DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
2802   3              #endif
2803   3            }
2804   2          }
2805   1        
2806   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2807   1          {
2808   2      
2809   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2810   2            {
2811   3              CurrentScreen = SCREEN_Main;
2812   3              RefreshSystemSleepTime();
2813   3              KeyHoldTimeCnt=0;
2814   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2815   3              FpIdentifyMgr.Status = FPMcmdStart;
2816   3              CardIdentifyMgr.Status = ReadingCardID;
2817   3      
2818   3            }
2819   2          }
2820   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2821   1          {
2822   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2823   2            {
2824   3              CurrentScreen = SCREEN_Main;
2825   3              KeyHoldTimeCnt=0;
2826   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2827   3              FpIdentifyMgr.Status = FPMcmdStart;
2828   3              CardIdentifyMgr.Status = ReadingCardID;
2829   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 47  

2830   2          }
2831   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2832   1          {
2833   2            GoToSystemConfigMenu();
2834   2          }
2835   1      
2836   1      }
2837          
2838          /*******************************************************/
2839          /*******************************************************/
2840          /*******************************************************/
2841          void ShowInitialization(void)//界面_初始化
2842          {
2843   1        
2844   1        uint8_t i;
2845   1        #ifdef Function_ScreenDisplay
2846   1        code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
2847   1      //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
2848   1        code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
2849   1      //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
2850   1        code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
2851   1      //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
2852   1        code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
2853   1      //  code uint8_t EepromStr_En[]={"Memory"}; 
2854   1        code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
2855   1      //  code uint8_t TouchStr_En[]={"Touch"}; 
2856   1        code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
2857   1      //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
2858   1        code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
2859   1      //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
2860   1        #endif  
2861   1        
2862   1        if ( InitializationMgr.Status == StartInitialization )
2863   1        {
2864   2          //SET_ALLKEYLED_OFF();
2865   2          #ifdef Function_ScreenDisplay
2866   2          DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
2867   2          DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
2868   2          DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
2869   2          #endif
2870   2          CheckMemoryMgr.Status = StartCheckMemory;
2871   2          InitializationMgr.Status = MemoryCheck;
2872   2        }
2873   1        else if ( InitializationMgr.Status == MemoryCheck )
2874   1        {
2875   2          #ifdef Function_ScreenDisplay
2876   2          DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
2877   2          #endif
2878   2          SystemConfigLoad();
2879   2          ReadLockBrand();
2880   2          InitializationMgr.MemoryCheckPass = bTRUE;
2881   2          InitializationMgr.Status = MemoryCheckWait;
2882   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2883   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2884   2        }
2885   1        else if ( InitializationMgr.Status == MemoryCheckWait )
2886   1        {
2887   2          #ifdef Function_ScreenDisplay
2888   2          if (InitializationMgr.MemoryCheckPass == bTRUE)
2889   2          { 
2890   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2891   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 48  

2892   2          else
2893   2          {
2894   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
2895   3          }
2896   2          #endif
2897   2          if (--InitializationMgr.TimeCnt < 1 )
2898   2          {
2899   3            InitializationMgr.Status = FingerPrintCheck;
2900   3            #ifdef Function_ScreenDisplay
2901   3            Clear_Screen_Page(4);
2902   3            Clear_Screen_Page(5);
2903   3            DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
2904   3            #endif
2905   3          }
2906   2        }
2907   1        else if ( InitializationMgr.Status == FingerPrintCheck )
2908   1        {
2909   2      
2910   2          GUI_GetUserNumList();   //read user number
2911   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
2912   2          {
2913   3            //SET_KEYLED_ON(KEY_TWO);
2914   3            #ifdef Function_FPMbreathingLed
2915   3            FpmAckMgr.Status = WaitACK;
2916   3            FPM_SetSecurityLevel(1);  //
2917   3            for (i=0;i<25;i++)
2918   3            {
2919   4              Hardware_DelayMs(10);
2920   4              FPM_Mgr_Task();
2921   4              if ( FpmAckMgr.Status == GotACK )
2922   4              {
2923   5                break;
2924   5              }
2925   4            }
2926   3            #endif
2927   3      
2928   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
2929   3            InitializationMgr.Status = FingerPrintCheckWait;
2930   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2931   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2932   3            
2933   3          }
2934   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
2935   2          { 
2936   3            //CheckMemoryMgr.Status = StartCheckMemory;
2937   3            //InitializationMgr.Status = StartInitialization;//redo
2938   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
2939   3            InitializationMgr.Status = FingerPrintCheckWait;
2940   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2941   3            DEF_Fail_Beep;
2942   3          }
2943   2        }
2944   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
2945   1        {
2946   2          #ifdef Function_ScreenDisplay
2947   2          if (InitializationMgr.FingerPrintCheckPass == bTRUE)
2948   2          { 
2949   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2950   3          }
2951   2          else
2952   2          {
2953   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 49  

2954   3          }
2955   2          #endif
2956   2          if (--InitializationMgr.TimeCnt < 1 )
2957   2          {
2958   3            InitializationMgr.Status = CardReaderCheck;
2959   3            #ifdef Function_ScreenDisplay
2960   3            Clear_Screen_Page(4);
2961   3            Clear_Screen_Page(5); 
2962   3            DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
2963   3            #endif
2964   3          }
2965   2        }
2966   1        else if ( InitializationMgr.Status == CardReaderCheck )
2967   1        {
2968   2          //SET_KEYLED_ON(KEY_THREE);
2969   2          InitializationMgr.CardReaderCheckPass = bTRUE;
2970   2          InitializationMgr.Status = CardReaderCheckWait;
2971   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2972   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
2973   2        }
2974   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
2975   1        {
2976   2          #ifdef Function_ScreenDisplay
2977   2          if (InitializationMgr.CardReaderCheckPass == bTRUE)
2978   2          { 
2979   3            DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
2980   3          }
2981   2          else
2982   2          {
2983   3            DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
2984   3          }
2985   2          #endif
2986   2          if (--InitializationMgr.TimeCnt < 1 )
2987   2          {
2988   3            InitializationMgr.Status = TouchCheck;
2989   3            #ifdef Function_ScreenDisplay
2990   3            Clear_Screen_Page(4);
2991   3            Clear_Screen_Page(5); 
2992   3            DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
2993   3            #endif
2994   3          }
2995   2        }
2996   1        else if ( InitializationMgr.Status == TouchCheck )
2997   1          {
2998   2            //SET_KEYLED_ON(KEY_FOUR);
2999   2            InitializationMgr.TouchCheckPass = bTRUE;
3000   2            InitializationMgr.Status = TouchCheckWait;
3001   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3002   2       
3003   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3004   2          }
3005   1        else if ( InitializationMgr.Status == TouchCheckWait )
3006   1          {
3007   2            #ifdef Function_ScreenDisplay
3008   2            if (InitializationMgr.TouchCheckPass == bTRUE)
3009   2            { 
3010   3              DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
3011   3            }
3012   2            else
3013   2            {
3014   3              DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
3015   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 50  

3016   2            #endif
3017   2            if (--InitializationMgr.TimeCnt < 1 )
3018   2            {
3019   3              InitializationMgr.Status = CheckFinished;
3020   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3021   3              #ifdef Function_ScreenDisplay
3022   3              Clear_Screen_Page(4);
3023   3              Clear_Screen_Page(5);
3024   3              if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
3025   3                &&(InitializationMgr.MemoryCheckPass == bTRUE )
3026   3                &&(InitializationMgr.CardReaderCheckPass == bTRUE )
3027   3                &&(InitializationMgr.TouchCheckPass == bTRUE ) )
3028   3              {
3029   4                DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
3030   4              }
3031   3              else
3032   3              {
3033   4                DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
3034   4              }
3035   3              #endif
3036   3            }
3037   2          }
3038   1      
3039   1        else if ( InitializationMgr.Status == CheckFinished )
3040   1        {
3041   2          if (--InitializationMgr.TimeCnt < 1 )
3042   2          {
3043   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3044   3            {
3045   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3046   4              BatteryMgr.PostLowBattery = bFALSE;
3047   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3048   4              CurrentScreen = SCREEN_LowBattery;  
3049   4            }
3050   3            else
3051   3            {
3052   4              CurrentScreen = SCREEN_Main;
3053   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3054   4              FpIdentifyMgr.Status = FPMcmdStart;
3055   4              CardIdentifyMgr.Status = ReadingCardID;
3056   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3057   4            }
3058   3          }
3059   2        }
3060   1      }
3061          
3062          /*******************************************************/
3063          /*******************************************************/
3064          /*******************************************************/
3065          void ShowSystemLocked(void)//界面_系统锁定
3066          {
3067   1        #ifdef Function_ScreenDisplay
3068   1        uint16_t Temp;
3069   1        code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
3070   1      //  code uint8_t SystemLockedStrEn[]={"System Lock"};
3071   1        #endif
3072   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3073   1        {
3074   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3075   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-625))
3076   2          {
3077   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 51  

3078   3            {
3079   4              if(VoiceMgr.Enable == bFALSE)
3080   4              {
3081   5                VoiceMgr.Enable = bTRUE;
3082   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3083   5                VoiceMgr.Enable = bFALSE;
3084   5              }
3085   4              else
3086   4              {
3087   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3088   5              }
3089   4            }
3090   3          }
3091   2        }
3092   1        else
3093   1        {
3094   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3095   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3096   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3097   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
3098   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3099   2          CurrentScreen = SCREEN_Main;
3100   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3101   2          FpIdentifyMgr.Status = FPMcmdStart;
3102   2          CardIdentifyMgr.Status = ReadingCardID;
3103   2          STOP_VOICEPLAY();
3104   2        }
3105   1        #ifdef Function_ScreenDisplay
3106   1        DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
3107   1        DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
3108   1        Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
3109   1        DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
3110   1        DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
3111   1        DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
3112   1        #endif
3113   1      }
3114          
3115          /*******************************************************/
3116          /*******************************************************/
3117          /*******************************************************/
3118          #ifdef Function_ScreenDisplay
3119           code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
3120          // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
3121           //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
3122           //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
3123           code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
3124          // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
3125          #endif
3126          void ShowPickLockAlarm(void)//界面_防撬告警
3127          {
3128   1        bool_t Flag_ExitPickLockAlarm;
3129   1      
3130   1        RefreshSystemSleepTime();   //reset system sleep time
3131   1      
3132   1        #ifdef Function_ScreenDisplay
3133   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3134   1        {
3135   2          DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
3136   2          Clear_Screen_Page(5);
3137   2          DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 52  

3138   2        }
3139   1        #endif  
3140   1        
3141   1        Flag_ExitPickLockAlarm = bFALSE;
3142   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
3143   1        {
3144   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3145   2          
3146   2          CardUserIdentify();
3147   2        }
3148   1      
3149   1          
3150   1        if ( CardIdentifyMgr.Status == Success)
3151   1        {
3152   2          Flag_ExitPickLockAlarm = bTRUE;
3153   2        }
3154   1        else if ( CardIdentifyMgr.Status == Fail)
3155   1        {
3156   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3157   2          {
3158   3            Flag_ExitPickLockAlarm = bTRUE;
3159   3          }
3160   2          else
3161   2          {
3162   3            CardIdentifyMgr.Status = ReadingCardID;
3163   3          }
3164   2        }
3165   1      
3166   1        FpUserIdentify();
3167   1        if ( FpIdentifyMgr.Status == success)
3168   1        {
3169   2          Flag_ExitPickLockAlarm = bTRUE; 
3170   2        }
3171   1        else if ( FpIdentifyMgr.Status == fail)
3172   1        {
3173   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3174   2          {
3175   3            Flag_ExitPickLockAlarm = bTRUE;   
3176   3          }
3177   2          else
3178   2          {
3179   3            FpIdentifyMgr.Status = FPMcmdStart;
3180   3          }
3181   2        }
3182   1      
3183   1        PasscodeUserIdentify();
3184   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3185   1        {
3186   2          Flag_ExitPickLockAlarm = bTRUE;
3187   2        }
3188   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3189   1        {
3190   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3191   2          {
3192   3            Flag_ExitPickLockAlarm = bTRUE;
3193   3          }
3194   2          else
3195   2          {
3196   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3197   3          }
3198   2        }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 53  

3199   1      
3200   1        if ( AntiPryingMgr.TimeCnt > 0 ){
3201   2          AntiPryingMgr.TimeCnt--;
3202   2        }
3203   1        else{
3204   2          Flag_ExitPickLockAlarm = bTRUE;
3205   2        }
3206   1        
3207   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3208   1        {
3209   2          STOP_VOICEPLAY();
3210   2          #ifdef Function_FPMbreathingLed
3211   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3212   2          #endif
3213   2          INT1_RST();
3214   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3215   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3216   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3217   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3218   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3219   2          CurrentScreen = SCREEN_Main;
3220   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3221   2          FpIdentifyMgr.Status = FPMcmdStart;
3222   2          CardIdentifyMgr.Status = ReadingCardID;
3223   2          RefreshSystemSleepTime();   //reset system sleep time
3224   2        }
3225   1        else
3226   1        {
3227   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3228   2          {
3229   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3230   3          }
3231   2        }
3232   1      }
3233          
3234          /*******************************************************/
3235          /*******************************************************/
3236          void ShowAgingTest(void)//界面_老化测试
3237          {
3238   1        #ifdef Function_ScreenDisplay
3239   1        uint8_t Str1[]={"AGING TEST"}; 
3240   1        uint8_t Str2[]={"MOTOR:"}; 
3241   1        uint8_t Str3[]={"INPUT:  . V"};
3242   1        uint8_t Str4[]={"SLIDE:"};
3243   1      
3244   1        DisEN16x8Str(0,16,Str1,NormalDisplay);
3245   1        #endif
3246   1        GUI_MotorAgingTest();
3247   1        #ifdef Function_ScreenDisplay
3248   1        DisEN16x8Str(4,0,Str2,NormalDisplay);
3249   1        DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
3250   1        DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
3251   1        DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
3252   1        DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
3253   1      
3254   1        DisEN16x8Str(6,0,Str3,NormalDisplay); 
3255   1        DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
3256   1        DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
3257   1        #endif
3258   1      }
3259          /*******************************************************/
3260          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 54  

3261          /*******************************************************/
3262          
3263          void ShowEventLogBySequence(void)//界面_按顺序界面_事件日志
3264          {
3265   1        #ifdef Function_EventLog
3266   1        code uint8_t VoiceReportLogBuff[][5]=
3267   1        { 
3268   1          {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
3269   1          {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
3270   1          {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
3271   1          {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
3272   1        };
3273   1      
3274   1        uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
3275   1        uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
3276   1      
3277   1        if ( CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
3278   1        {
3279   2          SearchEventLogBySequence();
3280   2          CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
3281   2          if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
3282   2          {
3283   3            LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
3284   3            LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
3285   3            CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
3286   3            VoiceMenuMgr.MenuPoint = 0;
3287   3            VoiceMenuMgr.TotalMenuNum = 3;    
3288   3          }
3289   2          else
3290   2          {
3291   3            PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
3292   3          }
3293   2        }
3294   1        else if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
3295   1        {
3296   2          if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
3297   2          {
3298   3              DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
3299   3          }
3300   2          else
3301   2          {
3302   3            //LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
3303   3            if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
3304   3            {
3305   4              LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
3306   4              LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
3307   4              //VoiceReportLogMgr.Status = ReportLogInit;
3308   4              Clear_Screen();
3309   4              DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3310   4            }
3311   3            //DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3312   3            
3313   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
3314   3            {
3315   4              if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3316   4              {
3317   5                PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
3318   5                VoiceMenuMgr.MenuPoint++;
3319   5              }
3320   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
3321   4            }
3322   3            else
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 55  

3323   3            {
3324   4             // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
3325   4            }
3326   3          }
3327   2        }
3328   1        #endif
3329   1      }
3330          
3331          /*******************************************************/
3332          /*******************************************************/
3333          /*******************************************************/
3334          void ShowClearEventLog(void)//界面_清除事件日志
3335          {
3336   1        #ifdef Function_EventLog
3337   1        uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
3338   1        if (LogDeleteMgr.Status == StartLogDelete)
3339   1        {
3340   2          LogDeleteMgr.DeleteSectorNum = 0;
3341   2          LogDeleteMgr.Percentage = 0;
3342   2          LogDeleteMgr.Status = WaitforLogDeleteCofirm;
3343   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
3344   2        }
3345   1        else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
3346   1        {
3347   2          #ifdef Function_ScreenDisplay
3348   2          DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
3349   2          DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
3350   2          #endif
3351   2        }
3352   1        else if (LogDeleteMgr.Status == LogDeleting)
3353   1        {
3354   2          if ( LogDeleteMgr.Percentage < 100 )
3355   2          {
3356   3            if ( LogDeleteMgr.Percentage == 0 )
3357   3            {
3358   4              #ifdef Function_ScreenDisplay
3359   4              Clear_Screen();
3360   4              DisHZ16x14Str(3,30,DELing,NormalDisplay);
3361   4              #endif
3362   4              if ( DeleteAllLog() != S_SUCCESS )
3363   4              {
3364   5                if ( DeleteAllLog() != S_SUCCESS )
3365   5                {
3366   6                  DeleteAllLog();
3367   6                }
3368   5              }
3369   4            }
3370   3            LogDeleteMgr.Percentage++;
3371   3          }
3372   2          else
3373   2          {
3374   3            LogDeleteMgr.Status = LogDeleteSuccess;
3375   3            LogDeleteMgr.Percentage = 0;
3376   3            RefreshSystemSleepTime();
3377   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
3378   3            #ifdef Function_ScreenDisplay
3379   3            Clear_Screen();
3380   3            DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
3381   3            #endif
3382   3          }
3383   2        }
3384   1        else if (LogDeleteMgr.Status == LogDeleteSuccess)
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 56  

3385   1        {
3386   2          if ( LogDeleteMgr.Percentage < 100 )
3387   2          {
3388   3            LogDeleteMgr.Percentage++;
3389   3          }
3390   2          else 
3391   2          {
3392   3            LogDeleteMgr.Status = QuitLogDelete;
3393   3          }
3394   2        }
3395   1        else
3396   1        {
3397   2          GotoLogMenu();
3398   2        }
3399   1        #endif
3400   1      }
3401          
3402          /*******************************************************/
3403          /*******************************************************/
3404          
3405          
3406          /*******************************************************/
3407          /*******************************************************/
3408          void GUI_Button_Monitor(void)//GUI按钮监视器
3409          {
3410   1        //DEBUG_MARK;
3411   1        uint8_t i;
3412   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3413   1        {
3414   2          //return;
3415   2        }
3416   1        
3417   1        if ( MotorMgr.MotorStatus != IDLE )
3418   1        {
3419   2          return;
3420   2        }
3421   1      
3422   1        gui_keycode = Key_Scan();
3423   1      
3424   1        DEBUG_MARK;
3425   1      
3426   1        if ( gui_keycode != KEY_NONE )
3427   1        {
3428   2          RefreshSystemSleepTime();
3429   2        }
3430   1        switch ( CurrentScreen)
3431   1        {
3432   2          case SCREEN_Main:
3433   2      
3434   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3435   2            {
3436   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3441   3            }
3442   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
3443   2            {
3444   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
3445   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3446   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 57  

3447   3            }
3448   2            #ifdef Function_DoorBellTouchIndependented
                    else if ( gui_keycode == KEY_DOORBELL )
                    { 
                      PLAY_VOICE_DOORBELL();  
                    }
                    #endif
3454   2      
3455   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3456   2            {
3457   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3458   3              {
3459   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3460   4                {
3461   5                  
3462   5                  PasscodeInputMgr.Point = 0x01;
3463   5                  PasscodeInputMgr.PasscodeLen = 16;
3464   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3465   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3466   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3467   5                  {
3468   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3469   6                  }
3470   5                  
3471   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3472   5                  DEF_ButtonPress_Voice;
3473   5                }
3474   4               }
3475   3              else if ( gui_keycode == KEY_ASTERISK )
3476   3              {
3477   4                DEF_ButtonPress_Voice;
3478   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3479   4                {
3480   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3481   5                }
3482   4                else 
3483   4                {
3484   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3485   5                  SystemPowerMgr.SleepSource = UserForced;
3486   5                }
3487   4              }
3488   3              else if ( gui_keycode == KEY_POUNDSIGN )
3489   3              { 
3490   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3491   4                { 
3492   5                   DEF_ButtonPress_Voice;
3493   5                   CurrentScreen = SCREEN_ManagerIdentify;
3494   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3495   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3496   5                }
3497   4                else
3498   4                {
3499   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
3500   5                  PLAY_VOICE_DOORBELL();  //DOORBELL
3501   5                  DoorBellMgr.TimeCnt = 150;
3502   5                  CurrentScreen = SCREEN_DoorBell;
3503   5                  #else
                          DEF_ButtonPress_Voice;
                          #endif
3506   5                } 
3507   4              }
3508   3            }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 58  

3509   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3510   2                      &&( gui_keycode != KEY_DOORBELL )
3511   2                    )
3512   2            {
3513   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3514   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3515   3              {
3516   4                DEF_ButtonPress_Voice;
3517   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3518   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
3519   4              }
3520   3            }
3521   2            
3522   2            break;
3523   2            
3524   2          case SCREEN_MainMenu:
3525   2      
3526   2              if ( gui_keycode == KEY_ONE )
3527   2              {
3528   3                DEF_ButtonPress_Voice;
3529   3                Hardware_DelayMs(100);
3530   3                GoToFpMenu();
3531   3              }
3532   2              else if ( gui_keycode == KEY_TWO )
3533   2              {
3534   3                DEF_ButtonPress_Voice;
3535   3                Hardware_DelayMs(100);
3536   3                GoToPasswordMenu();
3537   3              }
3538   2              else if ( gui_keycode == KEY_THREE )
3539   2              {
3540   3                DEF_ButtonPress_Voice;
3541   3                Hardware_DelayMs(100);
3542   3                GoToCardMenu();
3543   3              }
3544   2              else if ( gui_keycode == KEY_FOUR )
3545   2              {
3546   3                DEF_ButtonPress_Voice;
3547   3                Hardware_DelayMs(100);
3548   3                GoToSystemConfigMenu();
3549   3              }
3550   2              else if ( gui_keycode == KEY_FIVE )
3551   2              {
3552   3                DEF_ButtonPress_Voice;
3553   3                Hardware_DelayMs(100);
3554   3                GotoLogMenu();
3555   3              }
3556   2              else if ( gui_keycode == KEY_ASTERISK )
3557   2              {
3558   3                #ifdef Function_FPMbreathingLed
3559   3                FpIdentifyMgr.BreathingLED = 0;
3560   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3561   3                #endif
3562   3                //DEF_ButtonPress_Voice;
3563   3                //FpmAckMgr.Status = WaitACK;
3564   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3565   3                CardIdentifyMgr.Status = ReadingCardID;
3566   3                FpIdentifyMgr.Status = FPMcmdStart;
3567   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3568   3                Hardware_DelayMs(100);
3569   3                CurrentScreen = SCREEN_Main;
3570   3              }
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 59  

3571   2      
3572   2              break;
3573   2              
3574   2          case SCREEN_EventLogMenu:
3575   2            
3576   2              #ifdef Function_EventLog
3577   2              if ( gui_keycode == KEY_ONE )
3578   2              {
3579   3                DEF_ButtonPress_Voice;
3580   3                Hardware_DelayMs(100);
3581   3                CurrentScreen = SCREEN_CheckEventLogBySequence;
3582   3                CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
3583   3              }
3584   2              else if ( gui_keycode == KEY_TWO )
3585   2              {
3586   3                DEF_ButtonPress_Voice;
3587   3                Hardware_DelayMs(100);
3588   3                CurrentScreen = SCREEN_DeleteEventLog;
3589   3                LogDeleteMgr.Status = StartLogDelete;
3590   3              }
3591   2              else if ( gui_keycode == KEY_ASTERISK )
3592   2              {
3593   3                DEF_ButtonPress_Voice;
3594   3                Hardware_DelayMs(100);
3595   3                GoToMainMenu();
3596   3              }
3597   2              #endif
3598   2              
3599   2              break;  
3600   2              
3601   2          case SCREEN_FpMenu:
3602   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3603   2              {
3604   3                #ifdef Function_FPMbreathingLed
3605   3                FpIdentifyMgr.BreathingLED = 0;
3606   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3607   3                #endif
3608   3              }
3609   2            
3610   2              if ( gui_keycode == KEY_ONE )
3611   2              {
3612   3                DEF_ButtonPress_Voice;
3613   3                Hardware_DelayMs(100);
3614   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3615   3                CurrentScreen = SCREEN_RegisterMasterFp;
3616   3                
3617   3              }
3618   2              else if ( gui_keycode == KEY_TWO )
3619   2              {
3620   3                DEF_ButtonPress_Voice;
3621   3                Hardware_DelayMs(100);
3622   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3623   3                CurrentScreen = SCREEN_RegisterUserFp;
3624   3              }
3625   2              else if ( gui_keycode == KEY_THREE )
3626   2              {
3627   3                DEF_ButtonPress_Voice;
3628   3                Hardware_DelayMs(100);
3629   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3630   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3631   3              }
3632   2              else if ( gui_keycode == KEY_ASTERISK )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 60  

3633   2              {
3634   3                DEF_ButtonPress_Voice;
3635   3                Hardware_DelayMs(100);
3636   3                GoToMainMenu();
3637   3              }
3638   2              break;
3639   2                
3640   2          case SCREEN_CardUserMenu:
3641   2      
3642   2              if ( gui_keycode == KEY_ONE )
3643   2              {
3644   3                DEF_ButtonPress_Voice;
3645   3                Hardware_DelayMs(100);
3646   3                CurrentScreen = SCREEN_RegisterCardUser;
3647   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3648   3              }
3649   2              else if ( gui_keycode == KEY_TWO )
3650   2              {
3651   3                DEF_ButtonPress_Voice;
3652   3                Hardware_DelayMs(100);
3653   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3654   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3655   3              }
3656   2              else if ( gui_keycode == KEY_ASTERISK )
3657   2              {
3658   3                DEF_ButtonPress_Voice;
3659   3                Hardware_DelayMs(100);
3660   3                GoToMainMenu(); 
3661   3              }
3662   2              break;
3663   2              
3664   2          case SCREEN_PasscodeMenu: 
3665   2      
3666   2              if ( gui_keycode == KEY_ONE )
3667   2              {
3668   3                DEF_ButtonPress_Voice;
3669   3                Hardware_DelayMs(100);
3670   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3671   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3672   3                PasscodeUserRegisterMgr.UserPriority = Master;
3673   3              }
3674   2              
3675   2              else if ( gui_keycode == KEY_TWO )
3676   2              {
3677   3                DEF_ButtonPress_Voice;
3678   3                Hardware_DelayMs(100);
3679   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3680   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3681   3                PasscodeUserRegisterMgr.UserPriority = User;
3682   3              }
3683   2              else if ( gui_keycode == KEY_THREE )
3684   2              {
3685   3                DEF_ButtonPress_Voice;
3686   3                Hardware_DelayMs(100);
3687   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3688   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3689   3              }
3690   2              else if ( gui_keycode == KEY_ASTERISK )
3691   2              {
3692   3                DEF_ButtonPress_Voice;
3693   3                Hardware_DelayMs(100);
3694   3                GoToMainMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 61  

3695   3              }
3696   2            break;
3697   2                
3698   2          case SCREEN_SystemConfigMenu:
3699   2                
3700   2                if ( gui_keycode == KEY_ONE  )
3701   2                {
3702   3                  DEF_ButtonPress_Voice;
3703   3                  Hardware_DelayMs(100);
3704   3                  CurrentScreen = SCREEN_TimeSetting;
3705   3                    #ifdef Function_USE_Internal_RTC
3706   3                    SystemTime = UTCToSystemtime(G_SystemUTCTime);
3707   3                    #else
                            PCF8563_ReadTime();
                            #endif
3710   3                    GotSystemTime();  
3711   3                }
3712   2                else if ( gui_keycode == KEY_TWO )
3713   2                {
3714   3                  DEF_ButtonPress_Voice;
3715   3                  Hardware_DelayMs(100);
3716   3                  CurrentScreen = SCREEN_VolumeSetting;
3717   3                  VoiceMenuMgr.MenuPoint=0;
3718   3                  VoiceMenuMgr.TotalMenuNum = 3;
3719   3                }         
3720   2                else if ( gui_keycode == KEY_THREE )
3721   2                {
3722   3                  DEF_ButtonPress_Voice;
3723   3                  Hardware_DelayMs(100);
3724   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3725   3                  VoiceMenuMgr.MenuPoint=0;
3726   3                  VoiceMenuMgr.TotalMenuNum = 3;
3727   3                }
3728   2                else if ( gui_keycode == KEY_FOUR )
3729   2                {
3730   3                  DEF_ButtonPress_Voice;
3731   3                  Hardware_DelayMs(100);
3732   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3733   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3734   3                  VoiceMenuMgr.MenuPoint=0;
3735   3                  VoiceMenuMgr.TotalMenuNum = 3;
3736   3                }
3737   2                else if ( gui_keycode == KEY_FIVE )
3738   2                {
3739   3                  DEF_ButtonPress_Voice;
3740   3                  Hardware_DelayMs(100);
3741   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3742   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3743   3                  VoiceMenuMgr.MenuPoint=0;
3744   3                  VoiceMenuMgr.TotalMenuNum = 3;
3745   3                }
3746   2                else if ( gui_keycode == KEY_SIX )
3747   2                {
3748   3                  DEF_ButtonPress_Voice;
3749   3                  Hardware_DelayMs(100);
3750   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3751   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3752   3                  VoiceMenuMgr.MenuPoint=0;
3753   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3754   3                }
3755   2                else if ( gui_keycode == KEY_ASTERISK )
3756   2                {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 62  

3757   3                  DEF_ButtonPress_Voice;
3758   3                  Hardware_DelayMs(100);
3759   3                  GoToMainMenu(); 
3760   3                }
3761   2      
3762   2              break;
3763   2      
3764   2          case SCREEN_RegisterUserFp:
3765   2              
3766   2              if ( FpUserRegisterMgr.Status == InputUserID )
3767   2              {
3768   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3769   3              }
3770   2              if ( gui_keycode == KEY_ASTERISK )
3771   2              {
3772   3                DEF_ButtonPress_Voice;
3773   3                Hardware_DelayMs(100);
3774   3                GoToFpMenu(); 
3775   3              }
3776   2              
3777   2            break;
3778   2            
3779   2          case SCREEN_DeleteUserFp:
3780   2              if ( FpUserDeleteMgr.Status == InputUserID )
3781   2              {
3782   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3783   3              }
3784   2      
3785   2            break;
3786   2      
3787   2          case SCREEN_DeleteAllUserFp:
3788   2            
3789   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3790   2              {
3791   3                 if ( gui_keycode == KEY_POUNDSIGN )
3792   3                {
3793   4                  AllUserFpDeleteMgr.Selection = YES;
3794   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3795   4                }
3796   3                else if ( gui_keycode == KEY_ASTERISK )
3797   3                {
3798   4                  DEF_ButtonPress_Voice;
3799   4                  Hardware_DelayMs(100);
3800   4                  GoToFpMenu(); 
3801   4                }
3802   3              }
3803   2      
3804   2            break;
3805   2      
3806   2          case SCREEN_RegisterMasterFp:
3807   2              
3808   2              if ( FpUserRegisterMgr.Status == InputUserID )
3809   2              {
3810   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3811   3              }
3812   2              if ( gui_keycode == KEY_ASTERISK )
3813   2              {
3814   3                DEF_ButtonPress_Voice;
3815   3                Hardware_DelayMs(100);
3816   3                GoToFpMenu(); 
3817   3              }
3818   2              
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 63  

3819   2            break;
3820   2            
3821   2          case SCREEN_DeleteMasterFp:
3822   2              if ( FpUserDeleteMgr.Status == InputUserID )
3823   2              {
3824   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3825   3              }
3826   2      
3827   2            break;
3828   2      
3829   2          case SCREEN_DeleteAllMasterFp:
3830   2            
3831   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
3832   2              {
3833   2                if ( gui_keycode == KEY_FOUR )
3834   2                {
3835   2                  DEF_ButtonPress_Voice;
3836   2                  AllUserFpDeleteMgr.Selection = YES;
3837   2                }
3838   2                else if ( gui_keycode == KEY_SIX )
3839   2                {
3840   2                  DEF_ButtonPress_Voice;
3841   2                  AllUserFpDeleteMgr.Selection = NO;
3842   2                }
3843   2                else if ( gui_keycode == KEY_POUNDSIGN )
3844   2                {
3845   2                  DEF_ButtonPress_Voice;
3846   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
3847   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
3848   2                  }
3849   2                  else{
3850   2                    AllUserFpDeleteMgr.Status = EXIT;
3851   2                  }
3852   2                }
3853   2              }*/
3854   2      
3855   2            break;
3856   2      
3857   2          case SCREEN_RegisterCardUser:
3858   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
3859   2              {
3860   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3861   3              }
3862   2              if ( gui_keycode == KEY_ASTERISK )
3863   2              {
3864   3                DEF_ButtonPress_Voice;
3865   3                Hardware_DelayMs(100);
3866   3                GoToCardMenu(); 
3867   3              }
3868   2      
3869   2            break;
3870   2            
3871   2          case SCREEN_DeleteCardUser:
3872   2      
3873   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
3874   2              {
3875   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3876   3              }
3877   2            break;
3878   2      
3879   2          case SCREEN_DeleteAllCardUser:
3880   2              
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 64  

3881   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
3882   2              {
3883   3                if ( gui_keycode == KEY_POUNDSIGN )
3884   3                {
3885   4                  AllCardUserDeleteMgr.Selection = YES;
3886   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
3887   4                }
3888   3                else if ( gui_keycode == KEY_ASTERISK )
3889   3                {
3890   4                  DEF_ButtonPress_Voice;
3891   4                  Hardware_DelayMs(100);
3892   4                  GoToCardMenu(); 
3893   4                }
3894   3              }
3895   2      
3896   2            break;  
3897   2      
3898   2      
3899   2          case SCREEN_RegisterPasscodeUser:
3900   2      
3901   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
3902   2              {
3903   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3904   3              }
3905   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
3906   2              {
3907   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
3908   3              }
3909   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
3910   2              {
3911   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
3912   3              }
3913   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
3914   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
3915   2              {
3916   3                if ( gui_keycode == KEY_ASTERISK )
3917   3                {
3918   4                  DEF_ButtonPress_Voice;
3919   4                  Hardware_DelayMs(100);
3920   4                  GoToPasswordMenu(); 
3921   4                }
3922   3              }
3923   2          
3924   2            break;
3925   2            
3926   2          case SCREEN_DeletePasscodeUser:
3927   2      
3928   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
3929   2              {
3930   3                GUI_UserIDinputButtonMonitor(gui_keycode);
3931   3              }
3932   2      
3933   2            break;
3934   2      
3935   2          case SCREEN_DeleteAllPasscodeUser:
3936   2            
3937   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
3938   2            {
3939   3              if ( gui_keycode == KEY_POUNDSIGN )
3940   3              {
3941   4                AllPasscodeUserDeleteMgr.Selection = YES;
3942   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 65  

3943   4              }
3944   3              else if ( gui_keycode == KEY_ASTERISK )
3945   3              {
3946   4                DEF_ButtonPress_Voice;
3947   4                Hardware_DelayMs(100);
3948   4                GoToPasswordMenu(); 
3949   4              }
3950   3            }
3951   2            break;
3952   2            
3953   2      
3954   2          case SCREEN_TimeSetting:
3955   2            
3956   2          if ( TimeSettingMgr.Status == SetYearMajor)
3957   2              {
3958   3                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
3959   3                {
3960   4                  DEF_ButtonPress_Voice;
3961   4                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
3962   4                  TimeSettingMgr.Status = SetYearMinor;
3963   4                }
3964   3              }
3965   2              else if ( TimeSettingMgr.Status == SetYearMinor)
3966   2              {
3967   3                if ( gui_keycode == KEY_ASTERISK )
3968   3                {
3969   4                  DEF_ButtonPress_Voice;
3970   4                  TimeSettingMgr.Status = SetYearMajor;
3971   4                }
3972   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
3973   3                {
3974   4                  DEF_ButtonPress_Voice;
3975   4                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
3976   4                  TimeSettingMgr.Status = SetMonthMajor;
3977   4                }
3978   3              }
3979   2              
3980   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
3981   2              {
3982   3                if ( (gui_keycode < KEY_TWO) )
3983   3                {
3984   4                  DEF_ButtonPress_Voice;
3985   4                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
3986   4                  TimeSettingMgr.Status = SetMonthMinor;
3987   4                }
3988   3              }
3989   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
3990   2              {
3991   3                if ( gui_keycode == KEY_ASTERISK )
3992   3                {
3993   4                  DEF_ButtonPress_Voice;
3994   4                  TimeSettingMgr.Status = SetYearMajor;
3995   4                }
3996   3                else if ( gui_keycode <= KEY_NINE )
3997   3                {
3998   4                  DEF_ButtonPress_Voice;
3999   4                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
4000   4                  if ( TempSystemTime.month > 0x12 ){
4001   5                    TempSystemTime.month = 0x12;
4002   5                  }
4003   4                  if(TempSystemTime.month == 0x00)
4004   4                  {
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 66  

4005   5                   TempSystemTime.month = 0x01;
4006   5                  }
4007   4                  TimeSettingMgr.Status = SetDateMajor;
4008   4                }
4009   3              }
4010   2              
4011   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4012   2              {
4013   3                if ( gui_keycode == KEY_ASTERISK ){
4014   4                  DEF_ButtonPress_Voice;
4015   4                  TimeSettingMgr.Status = SetYearMajor;
4016   4                }
4017   3                else if ( (gui_keycode < KEY_FOUR) )
4018   3                {
4019   4                  DEF_ButtonPress_Voice;
4020   4                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4021   4                  TimeSettingMgr.Status = SetDateMinor;
4022   4                }
4023   3              }
4024   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4025   2              {
4026   3                if ( gui_keycode == KEY_ASTERISK ){
4027   4                  DEF_ButtonPress_Voice;
4028   4                  TimeSettingMgr.Status = SetYearMajor;
4029   4                }
4030   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4031   3                {
4032   4                  DEF_ButtonPress_Voice;
4033   4                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4034   4                  if ( TempSystemTime.date > 0x31 ){
4035   5                    TempSystemTime.date = 0x31;
4036   5                  }
4037   4                  if(TempSystemTime.date == 0x00)
4038   4                  {
4039   5                   TempSystemTime.date = 0x01;
4040   5                  }
4041   4                  TimeSettingMgr.Status = SetHourMajor;
4042   4                }
4043   3              }
4044   2      
4045   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4046   2              {
4047   3                if ( gui_keycode == KEY_ASTERISK ){
4048   4                  DEF_ButtonPress_Voice;
4049   4                  TimeSettingMgr.Status = SetYearMajor;
4050   4                }
4051   3                else if ( (gui_keycode < KEY_THREE )){
4052   4                  DEF_ButtonPress_Voice;
4053   4                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4054   4                  TimeSettingMgr.Status = SetHourMinor;
4055   4                }
4056   3              }
4057   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4058   2              {
4059   3                if ( gui_keycode == KEY_ASTERISK ){
4060   4                  DEF_ButtonPress_Voice;
4061   4                  TimeSettingMgr.Status = SetYearMajor;
4062   4                }
4063   3                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4064   3                {
4065   4                  DEF_ButtonPress_Voice;
4066   4                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 67  

4067   4                  if (TempSystemTime.hour > 0x23){
4068   5                    TempSystemTime.hour = 0x23;
4069   5                  }
4070   4                  TimeSettingMgr.Status = SetMinuteMajor;
4071   4                }
4072   3              }
4073   2      
4074   2      
4075   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4076   2              {
4077   3                if ( gui_keycode == KEY_ASTERISK ){
4078   4                  DEF_ButtonPress_Voice;
4079   4                  TimeSettingMgr.Status = SetYearMajor;
4080   4                }
4081   3                else if ( gui_keycode < KEY_SIX)
4082   3                {
4083   4                  DEF_ButtonPress_Voice;
4084   4                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4085   4                  TimeSettingMgr.Status = SetMinuteMinor;
4086   4                }
4087   3              }
4088   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4089   2              {
4090   3                if ( gui_keycode == KEY_ASTERISK ){
4091   4                  DEF_ButtonPress_Voice;
4092   4                  TimeSettingMgr.Status = SetYearMajor;
4093   4      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4094   4                }
4095   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4096   4                  DEF_ButtonPress_Voice;
4097   4                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4098   4                  TimeSettingMgr.Status = SetSecondMajor;
4099   4                }
4100   3              }
4101   2      
4102   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4103   2              {
4104   3                if ( gui_keycode == KEY_ASTERISK ){
4105   4                  DEF_ButtonPress_Voice;
4106   4                  TimeSettingMgr.Status = SetYearMajor;
4107   4                }
4108   3                else if ( gui_keycode < KEY_SIX){
4109   4                  DEF_ButtonPress_Voice;
4110   4                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4111   4                  TimeSettingMgr.Status = SetSecondMinor;
4112   4                }
4113   3              }
4114   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4115   2              {
4116   3                if ( gui_keycode == KEY_ASTERISK ){
4117   4                  DEF_ButtonPress_Voice;
4118   4                  TimeSettingMgr.Status = SetYearMajor;
4119   4      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4120   4                }
4121   3                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4122   4                  DEF_ButtonPress_Voice;
4123   4                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4124   4                  TimeSettingMgr.Status = SetYearMajor;
4125   4                }
4126   3              }
4127   2      
4128   2              if ( gui_keycode == KEY_POUNDSIGN )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 68  

4129   2              {
4130   3                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4131   3                {
4132   4                  DEF_ButtonPress_Voice;
4133   4                  SaveSystemTime();
4134   4                  #ifdef Function_USE_Internal_RTC
4135   4                  G_SystemUTCTime = SystemTimeToUTC(SystemTime);
4136   4                  #else
                          PCF8563_WriteTime();
                          #endif
4139   4                  Hardware_DelayMs(100);
4140   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4141   4                }
4142   3                else{
4143   4                  Hardware_DelayMs(100);
4144   4                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4145   4                }
4146   3                  
4147   3                GoToSystemConfigMenu();         
4148   3              }
4149   2              else if ( gui_keycode == KEY_ASTERISK )
4150   2              {
4151   3                DEF_ButtonPress_Voice;
4152   3                Hardware_DelayMs(100);
4153   3                GoToSystemConfigMenu();   
4154   3      
4155   3                #ifdef Function_USE_Internal_RTC
4156   3                SystemTime = UTCToSystemtime(G_SystemUTCTime);
4157   3                #else
                        PCF8563_ReadTime();
                        #endif
4160   3        
4161   3                //GotSystemTime();      
4162   3              
4163   3                TimeSettingMgr.Status = SetYearMajor;
4164   3              }
4165   2      
4166   2            break;
4167   2      
4168   2            case SCREEN_RestoreFactoryDefault:
4169   2      
4170   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4171   2              {
4172   3                if ( gui_keycode == KEY_POUNDSIGN )
4173   3                {
4174   4                  DEF_ButtonPress_Voice;
4175   4                  Hardware_DelayMs(100);
4176   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4177   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4178   4                }
4179   3                else if ( gui_keycode == KEY_ASTERISK )
4180   3                {
4181   4                  DEF_ButtonPress_Voice;
4182   4                  Hardware_DelayMs(100);
4183   4                  GoToSystemConfigMenu(); 
4184   4                }
4185   3              }
4186   2      
4187   2              break;
4188   2      
4189   2      //    case SCREEN_LanguageSetting:
4190   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 69  

4191   2      //        if ( gui_keycode == KEY_ONE )
4192   2      //        {
4193   2      //          DEF_ButtonPress_Voice;
4194   2      //          SystemLanguage = Chinese;       
4195   2      //          SystemConfigSave();
4196   2      //          GoToSystemConfigMenu();
4197   2      //        }
4198   2      //        else if ( gui_keycode == KEY_TWO )
4199   2      //        {
4200   2      //          DEF_ButtonPress_Voice;
4201   2      //          SystemLanguage = English;         
4202   2      //          SystemConfigSave();
4203   2      //          GoToSystemConfigMenu();
4204   2      //        }
4205   2      //        else if ( gui_keycode == KEY_ASTERISK)
4206   2      //        {
4207   2      //          DEF_ButtonPress_Voice;
4208   2      //          GoToSystemConfigMenu();
4209   2      //        }
4210   2      //      break;
4211   2      
4212   2          case SCREEN_VolumeSetting:
4213   2      
4214   2            if ( gui_keycode == KEY_ONE )
4215   2            {
4216   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4217   3              Hardware_DelayMs(100);
4218   3              VoiceMgr.Enable = bTRUE;        
4219   3              SystemConfigSave();
4220   3              GoToSystemConfigMenu();
4221   3            }
4222   2            else if ( gui_keycode == KEY_TWO )
4223   2            {
4224   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4225   3              Hardware_DelayMs(100);
4226   3              VoiceMgr.Enable = bFALSE; 
4227   3              SystemConfigSave();
4228   3              GoToSystemConfigMenu();
4229   3            }
4230   2            else if ( gui_keycode == KEY_ASTERISK )
4231   2            {
4232   3              DEF_ButtonPress_Voice;
4233   3              Hardware_DelayMs(100);
4234   3              GoToSystemConfigMenu();
4235   3            }
4236   2            break;  
4237   2      /*        
4238   2          case SCREEN_ManagerPasscodeModify:
4239   2      
4240   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4241   2            {
4242   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4243   2            }
4244   2            
4245   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4246   2            {
4247   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4248   2            }
4249   2        
4250   2            break;
4251   2      */        
4252   2          case SCREEN_MemoryCheck:
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 70  

4253   2            
4254   2            
4255   2            break;
4256   2            
4257   2          case SCREEN_ManagerIdentify:
4258   2      
4259   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4260   2                {
4261   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4262   3                }
4263   2            break;
4264   2              
4265   2          case SCREEN_UnlockingModeSetting:
4266   2              
4267   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4268   2              {
4269   3                if ( gui_keycode == KEY_ONE )
4270   3                {
4271   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4272   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4273   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4274   4                  Hardware_DelayMs(100);
4275   4                }
4276   3                else if ( gui_keycode == KEY_TWO )
4277   3                {
4278   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4279   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4280   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4281   4                  {
4282   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4283   5                    Hardware_DelayMs(100);
4284   5                  }
4285   4                  else
4286   4                  {
4287   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4288   5                    Hardware_DelayMs(100);
4289   5                  }
4290   4                }
4291   3                else if ((gui_keycode == KEY_ASTERISK))
4292   3                {
4293   4                  DEF_ButtonPress_Voice;
4294   4                  Hardware_DelayMs(100);
4295   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4296   4                }
4297   3              }
4298   2            break;
4299   2      
4300   2            
4301   2            case SCREEN_ContinueOpenSetting:
4302   2            
4303   2                if ( gui_keycode == KEY_ONE )
4304   2                {
4305   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4306   3                  {
4307   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4308   4                    GUI_MotorContinueOpen();
4309   4                  }
4310   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4311   3                  Hardware_DelayMs(100);
4312   3                  GoToSystemConfigMenu();
4313   3                }
4314   2                else if ( gui_keycode == KEY_TWO )
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 71  

4315   2                {
4316   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4317   3                  {
4318   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
4319   4                    MotorMgr.CWTimer = 0;
4320   4                    MotorMgr.CWWAITTimer =  0;  
4321   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4322   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
4323   4                    MotorMgr.MotorStatus = CCW; 
4324   4                    MotorMgr.CCWSoftStart = bTRUE;
4325   4                  }
4326   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
4327   3                  Hardware_DelayMs(100);
4328   3                  GoToSystemConfigMenu();
4329   3                }
4330   2                else if ( gui_keycode == KEY_ASTERISK )
4331   2                {
4332   3                  DEF_ButtonPress_Voice;
4333   3                  Hardware_DelayMs(100);
4334   3                  GoToSystemConfigMenu();
4335   3                }
4336   2              break;
4337   2                
4338   2            case SCREEN_PickAlarmEnableSetting:
4339   2            
4340   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4341   2                {
4342   3                  if ( gui_keycode == KEY_ONE )
4343   3                  {
4344   4                    //PickAlarmEnableMgr.Selection = YES;
4345   4                    PickAlarmEnableMgr.Enable = bTRUE;
4346   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4347   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4348   4                    Hardware_DelayMs(100);
4349   4          
4350   4                  }
4351   3                  else if ( gui_keycode == KEY_TWO )
4352   3                  {
4353   4                    //PickAlarmEnableMgr.Selection = NO;
4354   4                    PickAlarmEnableMgr.Enable = bFALSE;
4355   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4356   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4357   4                    Hardware_DelayMs(100);
4358   4                    
4359   4                  }
4360   3                  else if ( gui_keycode == KEY_ASTERISK)
4361   3                  {
4362   4                    DEF_ButtonPress_Voice;
4363   4                    Hardware_DelayMs(100);
4364   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4365   4                  }
4366   3                }
4367   2                break;
4368   2      
4369   2            case SCREEN_SystemVersion:
4370   2      
4371   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4372   2                  {
4373   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4374   3                    CardIdentifyMgr.Status = ReadingCardID;
4375   3                    FpIdentifyMgr.Status = FPMcmdStart;
4376   3                    CurrentScreen = SCREEN_Main;
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 72  

4377   3                  }
4378   2                break;
4379   2                  
4380   2            case SCREEN_PickLockAlarm:
4381   2        
4382   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4383   2            {
4384   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
4385   3              {
4386   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4387   4                {
4388   5                  
4389   5                  PasscodeInputMgr.Point = 0x01;
4390   5                  PasscodeInputMgr.PasscodeLen = 16;
4391   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4392   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4393   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4394   5                  {
4395   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4396   6                  }
4397   5                  
4398   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4399   5                  //DEF_ButtonPress_Voice;
4400   5                }
4401   4               }
4402   3              else if ( gui_keycode == KEY_ASTERISK )
4403   3              {
4404   4              }
4405   3            }
4406   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4407   2            {
4408   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4409   3              {
4410   4                //DEF_ButtonPress_Voice;
4411   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4412   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4413   4              }
4414   3            }
4415   2            
4416   2            break;
4417   2      
4418   2            case SCREEN_SystemLocked:
4419   2              
4420   2              if ( gui_keycode != KEY_NONE )  
4421   2              {
4422   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4423   3                Hardware_DelayMs(100);
4424   3              }
4425   2            break;
4426   2      
4427   2            case SCREEN_CheckEventLogBySequence:
4428   2              
4429   2              #ifdef Function_EventLog
4430   2              if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
4431   2              {
4432   3                if ( gui_keycode == KEY_TWO )
4433   3                { 
4434   4                  if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
4435   4                  {
4436   5                    DEF_ButtonPress_Voice;
4437   5                    CheckEventLogBySequenceMgr.OffsetEventLogNum--;
4438   5      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 73  

4439   5                    if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
4440   6                      LogMgr.DisplayPoint++;
4441   6                    }
4442   5                    else{
4443   6                      LogMgr.DisplayPoint = 0;
4444   6                    }
4445   5                  }
4446   4                  else
4447   4                  {
4448   5                    DEF_Fail_Beep;
4449   5                  }
4450   4                }
4451   3                else if ( gui_keycode == KEY_EIGHT )
4452   3                { 
4453   4                  if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
4454   4                  {
4455   5                    DEF_ButtonPress_Voice;
4456   5                    if ( LogMgr.DisplayPoint > 0 )
4457   5                    {
4458   6                      LogMgr.DisplayPoint--;
4459   6                    }
4460   5                    else if( LogMgr.DisplayPoint == 0 )
4461   5                    {
4462   6                      if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
4463   6                      {
4464   7                        LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
4465   7                      }
4466   6                    }
4467   5                    CheckEventLogBySequenceMgr.OffsetEventLogNum++;
4468   5                  }
4469   4                  else
4470   4                  {
4471   5                    DEF_Fail_Beep;
4472   5                  }
4473   4                }
4474   3                else if (gui_keycode == KEY_ASTERISK)
4475   3                {
4476   4                  DEF_ButtonPress_Voice;
4477   4                  Hardware_DelayMs(100);
4478   4                  GotoLogMenu();
4479   4                }
4480   3              }
4481   2              #endif
4482   2      
4483   2            break;
4484   2      
4485   2            case SCREEN_DeleteEventLog:
4486   2              
4487   2              #ifdef Function_EventLog
4488   2              if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
4489   2              {
4490   3                if ( gui_keycode == KEY_POUNDSIGN )
4491   3                {
4492   4                  DEF_ButtonPress_Voice;
4493   4                  LogDeleteMgr.Status = LogDeleting;
4494   4                }
4495   3                else if ( gui_keycode == KEY_ASTERISK )
4496   3                {
4497   4                  DEF_ButtonPress_Voice;
4498   4                  Hardware_DelayMs(100);
4499   4                  GotoLogMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 74  

4500   4                }
4501   3              }
4502   2              #endif
4503   2      
4504   2            break;
4505   2              
4506   2          default:
4507   2      
4508   2            break;
4509   2            
4510   2        }
4511   1        
4512   1      }
4513          
4514          /*******************************************************/
4515          /*******************************************************/
4516          void GUI_Update_Screen(void)//GUI更新屏幕
4517          {
4518   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4519   1        {
4520   2          #ifdef Function_ScreenDisplay
4521   2          Clear_Screen();
4522   2          GUI_Flag_RefreshLCD = bFALSE;
4523   2          #endif
4524   2          LastScreen =  CurrentScreen;
4525   2        }
4526   1        switch ( CurrentScreen)
4527   1        {
4528   2          case SCREEN_Initialization:
4529   2      
4530   2            //SET_ALLKEYLED_OFF();
4531   2            ShowInitialization();
4532   2          break;
4533   2          
4534   2          case SCREEN_LowBattery:
4535   2      
4536   2            //SET_ALLKEYLED_OFF();
4537   2            ShowLowBattery();
4538   2          break;
4539   2      
4540   2          case SCREEN_PickLockAlarm:
4541   2      
4542   2            //SET_ALLKEYLED_ON();
4543   2            ShowPickLockAlarm();
4544   2          break;
4545   2      
4546   2          case SCREEN_Main:
4547   2            
4548   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4549   2            {
4550   3              //SET_ALLKEYLED_OFF();
4551   3            }
4552   2            else
4553   2            {
4554   3              //SET_ALLKEYLED_ON();
4555   3              GUI_UpadteMain();
4556   3            }
4557   2          break;
4558   2      
4559   2          case SCREEN_IdentifySuccess:
4560   2            
4561   2            //SET_ALLKEYLED_OFF();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 75  

4562   2            //KEYLED_WATERLIGHT_Task();
4563   2            ShowIdentifySuccessPage();
4564   2            break;
4565   2          case SCREEN_IdentifyFail:
4566   2              
4567   2            //KEYLED_IdentifyFail_Task();
4568   2            
4569   2            ShowIdentifyFailPage();
4570   2            break;
4571   2          
4572   2          case SCREEN_DoorBell:
4573   2            ShowDoorBell();
4574   2            break;
4575   2          
4576   2          case SCREEN_MainMenu:
4577   2      
4578   2            //SET_1234A_LED_ON();
4579   2            
4580   2            ShowMainMenu();
4581   2            break;
4582   2            
4583   2          case SCREEN_EventLogMenu:
4584   2            
4585   2            //SET_12A_LED_ON();
4586   2            #ifdef Function_EventLog
4587   2            ShowLogMenu();
4588   2            #endif
4589   2            break;
4590   2            
4591   2          case SCREEN_FpMenu:
4592   2            
4593   2            //SET_123A_LED_ON();
4594   2            ShowFpMenu();
4595   2      
4596   2            break;
4597   2          case SCREEN_CardUserMenu:
4598   2      
4599   2            //SET_12A_LED_ON();
4600   2            ShowCardUserMenu();
4601   2      
4602   2            break;
4603   2          case SCREEN_PasscodeMenu:
4604   2            
4605   2            //SET_123A_LED_ON();
4606   2            ShowPasscodeMenu();
4607   2      
4608   2            break;
4609   2          case SCREEN_SystemConfigMenu:
4610   2      
4611   2            //SET_123456A_LED_ON();
4612   2            ShowSystemConfigMenu();
4613   2      
4614   2            break;
4615   2          case SCREEN_RegisterUserFp:
4616   2            //SET_ALLKEYLED_OFF();
4617   2            ShowRegisterUserFp();
4618   2      
4619   2            break;
4620   2          case SCREEN_DeleteUserFp:
4621   2            //SET_ALLKEYLED_ON();
4622   2            //ShowDeleteUserFp();
4623   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 76  

4624   2            break;
4625   2          case SCREEN_DeleteAllUserFp:
4626   2            //SET_AP_LED_ON();
4627   2            ShowDeleteAllUserFp();
4628   2      
4629   2            break;
4630   2          
4631   2          case SCREEN_RegisterMasterFp:
4632   2            //SET_ALLKEYLED_OFF();
4633   2            ShowRegisterMasterFp();
4634   2      
4635   2            break;
4636   2            
4637   2          case SCREEN_DeleteMasterFp:
4638   2            //SET_ALLKEYLED_ON();
4639   2            //ShowDeleteMasterFp();
4640   2      
4641   2            break;
4642   2      /*
4643   2          case SCREEN_DeleteAllMasterFp:
4644   2            SET_LRandConfirmLED_ON();
4645   2            ShowDeleteAllMasterFp();
4646   2      
4647   2            break;
4648   2      */
4649   2          case SCREEN_RegisterCardUser:
4650   2            //KEYLED_KEY5_Flash();
4651   2            ShowRegisterCardUser();
4652   2      
4653   2            break;
4654   2            
4655   2          case SCREEN_DeleteCardUser:
4656   2            //SET_ALLKEYLED_ON();
4657   2            //ShowDeleteCardUser();
4658   2      
4659   2            break;
4660   2      
4661   2          case SCREEN_DeleteAllCardUser:
4662   2            //SET_AP_LED_ON();
4663   2            ShowDeleteAllCardUser();
4664   2      
4665   2            break;
4666   2      
4667   2          case SCREEN_RegisterPasscodeUser:
4668   2            //SET_ALLKEYLED_ON();
4669   2            ShowRegisterPasscodeUser();
4670   2      
4671   2            break;
4672   2            
4673   2          case SCREEN_DeletePasscodeUser:
4674   2            //SET_ALLKEYLED_ON();
4675   2            //ShowDeletePasscodeUser();
4676   2      
4677   2            break;
4678   2      
4679   2          case SCREEN_DeleteAllPasscodeUser:
4680   2            //SET_AP_LED_ON();
4681   2            ShowDeleteAllPasscodeUser();
4682   2      
4683   2            break;
4684   2      
4685   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 77  

4686   2          case SCREEN_TimeSetting:
4687   2      
4688   2            ShowTimeSetting();
4689   2      
4690   2            break;
4691   2      /*
4692   2          case SCREEN_ManagerPasscodeModify:
4693   2          //  SET_ALLKEYLED_ON();
4694   2          //  ShowModifyManagerPasscode();
4695   2      
4696   2            break;
4697   2      */      
4698   2          case SCREEN_RestoreFactoryDefault:
4699   2            //SET_AP_LED_ON();
4700   2            ShowRestoreFactoryDefault();
4701   2      
4702   2            break;
4703   2      
4704   2      //    case SCREEN_LanguageSetting:
4705   2      //      //SET_12A_LED_ON();
4706   2      //      ShowLanguageSetting();
4707   2      
4708   2      //      break;
4709   2            
4710   2          case SCREEN_VolumeSetting:
4711   2            //SET_12A_LED_ON();
4712   2            ShowVolumeSetting();
4713   2      
4714   2            break;
4715   2      
4716   2          case SCREEN_MemoryCheck:
4717   2            //SET_UDandConfirmLED_ON();
4718   2            //ShowMemoryUsage();
4719   2      
4720   2            break;
4721   2            
4722   2          case SCREEN_ManagerIdentify:
4723   2      
4724   2            //SET_ALLKEYLED_ON();
4725   2            ShowManagerIdentify();
4726   2      
4727   2            break;
4728   2      
4729   2          case SCREEN_UnlockingModeSetting:
4730   2            //SET_12A_LED_ON();
4731   2            ShowUnlockingModeSetting();
4732   2          
4733   2            break;
4734   2            
4735   2          case SCREEN_ContinueOpenSetting:  
4736   2            //SET_12A_LED_ON();
4737   2            ShowContinuedOpenModeSetting();
4738   2            break;
4739   2            
4740   2          case SCREEN_PickAlarmEnableSetting: 
4741   2            //SET_12A_LED_ON();
4742   2            ShowPickAlarmEnableSetting();
4743   2            break;
4744   2            
4745   2          case SCREEN_SystemVersion:  
4746   2            //SET_AP_LED_ON();
4747   2            GUI_Update_Version();
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 78  

4748   2            break;
4749   2      
4750   2      //    case SCREEN_SelfTest:
4751   2      
4752   2            //SET_ALLKEYLED_ON();
4753   2            //ShowSelfTest();
4754   2      //      break;
4755   2          
4756   2          case SCREEN_AgingTest:
4757   2      
4758   2            //KEYLED_WATERLIGHT_Task();
4759   2            ShowAgingTest();
4760   2            break;
4761   2      
4762   2          case SCREEN_SystemLocked:
4763   2      
4764   2            //KEYLED_ASTERISK_Flash();
4765   2            ShowSystemLocked();
4766   2            break;
4767   2            
4768   2          case SCREEN_CheckEventLogBySequence:
4769   2            #ifdef Function_EventLog
4770   2            ShowEventLogBySequence();
4771   2            #endif
4772   2            break;
4773   2      
4774   2          case SCREEN_DeleteEventLog:
4775   2                  
4776   2          #ifdef Function_EventLog
4777   2            ShowClearEventLog();
4778   2          #endif
4779   2            break;
4780   2          
4781   2          default:
4782   2            break;
4783   2        }
4784   1      
4785   1      }
4786          /*******************************************************/
4787          /*******************************************************/
4788          /*******************************************************/
4789          void GUI_Init(void)//
4790          {
4791   1        //uint8_t i;
4792   1      
4793   1        GUI_ToggleFlag_05s=0x00;
4794   1        GUI_ToggleFlag_1s=0x01;
4795   1        FpIdentifyMgr.BreathingLED=0x00;
4796   1      
4797   1        GUI_Flag_RefreshLCD = bFALSE;
4798   1      
4799   1        FpIdentifyMgr.Status = FPMcmdStart;
4800   1        CardIdentifyMgr.Status = ReadingCardID;
4801   1        TimeSettingMgr.Status = SetYearMajor;
4802   1        BatteryMgr.PostLowBattery = bTRUE;
4803   1        
4804   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
4805   1      
4806   1        Key_Init();
4807   1      
4808   1        ReadCardUserMemoryFromEEPROM();
4809   1      
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 79  

4810   1        ReadPasscodeUserMemoryFromEEPROM();
4811   1      
4812   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
4813   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
4814   1      
4815   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
4816   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
4817   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
4818   1        UserIdentifyResultMgr.VoiceDelay = 0;
4819   1      
4820   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
4821   1              
4822   1        DEBUG_MARK;
4823   1          
4824   1        #ifdef Function_USE_Internal_RTC
4825   1        SystemTime = UTCToSystemtime(G_SystemUTCTime);
4826   1        #else
                PCF8563_ReadTime();
                #endif
4829   1        
4830   1        #ifdef Function_ScreenDisplay
4831   1        Display_Init();
4832   1        #endif
4833   1      
4834   1      }
4835          
4836          /*******************************************************/
4837          /*******************************************************/
4838          /*******************************************************/
4839          void GUI_Task(void)//
4840          {
4841   1        //uint8_t *Point;
4842   1        uint8_t i,j;
4843   1        if (++GUI_TimeCnt > 63)
4844   1        {
4845   2          GUI_ToggleFlag_1s^=0x01;
4846   2          GUI_TimeCnt =0;
4847   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
4848   2          {
4849   3            if(VoiceMgr.Enable == bFALSE)
4850   3            {
4851   4              VoiceMgr.Enable = bTRUE;
4852   4              DEF_ButtonPress_Voice;
4853   4              VoiceMgr.Enable = bFALSE;
4854   4            }
4855   3            else
4856   3            {
4857   4              DEF_ButtonPress_Voice;
4858   4            }
4859   3            RefreshSystemSleepTime();
4860   3          }
4861   2          #ifdef Function_FPMbreathingLed
4862   2          if( FpIdentifyMgr.BreathingLED > 0 )
4863   2          {
4864   3            FpIdentifyMgr.BreathingLED += 1;
4865   3            if( FpIdentifyMgr.BreathingLED == 4 )
4866   3            {
4867   4              FpIdentifyMgr.BreathingLED = 0;
4868   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
4869   4            }
4870   3          }
4871   2          #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 80  

4872   2        }
4873   1        
4874   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
4875   2          GUI_ToggleFlag_05s^= 0x01;
4876   2        }
4877   1        
4878   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
4879   1        {
4880   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
4881   2        }
4882   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
4883   1        {
4884   2           LockBrand.BrandChangeTimeDelay--;
4885   2        }
4886   1      
4887   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
4888   1        {
4889   2          j=0;
4890   2          for (i=0;i<100;i++)
4891   2          {
4892   3            Hardware_DelayX5us(2);
4893   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
4894   3            {
4895   4              j++;
4896   4            }
4897   3          }
4898   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
4899   2          {
4900   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
4901   3          }
4902   2        }
4903   1        else
4904   1        {
4905   2          j=0;
4906   2          for (i=0;i<10;i++)
4907   2          {
4908   3            Hardware_DelayX5us(1);
4909   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
4910   3            {
4911   4              j++;
4912   4            }
4913   3          }
4914   2          if (j>8)
4915   2          {
4916   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
4917   3          }
4918   2        }
4919   1        
4920   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
4921   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
4922   1            &&( CurrentScreen != SCREEN_Initialization )
4923   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
4924   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
4925   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
4926   1        {
4927   2          CurrentScreen = SCREEN_PickLockAlarm;
4928   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
4929   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4930   2          FpIdentifyMgr.Status = FPMcmdStart;
4931   2          CardIdentifyMgr.Status = ReadingCardID;
4932   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
4933   2          #ifdef Function_FPMbreathingLed
C51 COMPILER V9.60.0.0   GUI                                                               05/16/2023 16:36:58 PAGE 81  

4934   2          SetFPMbreathingLed(FPMbreathingLed_Off);
4935   2          #endif
4936   2        }
4937   1        
4938   1        GUI_Button_Monitor();
4939   1        
4940   1        GUI_Update_Screen();
4941   1        
4942   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  14453    ----
   CONSTANT SIZE    =    397    ----
   XDATA SIZE       =     45     165
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
