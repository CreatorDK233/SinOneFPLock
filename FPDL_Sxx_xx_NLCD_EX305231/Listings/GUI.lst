C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\GUI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Softwares\Application\GUI.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.
                    -\Drivers\Lib\c;.\Drivers\Lib\H;.\Drivers\Lib\IAP_Lib;.\Drivers\Lib\TouchKey_lib;.\Drivers\Physical;.\Drivers\Protocol;.\
                    -Softwares\Application;.\Softwares\Basic;.\Softwares\ModuleLogic;.\Drivers\Protocol\YC_NFC;.\Drivers\Protocol\WIFI_Tuya) 
                    -DEBUG PRINT(.\Listings\GUI.lst) TABS(2) OBJECT(.\Objects\GUI.obj)

line level    source

   1          #include "IO.h"
   2          //Protocol layer
   3          #include "RTC_PCF8563.h"
   4          #include "Fingerprint.h"
   5          #include "BeepMgr.h"
   6          #include "LCD_HFG12864.h"
   7          #include "TuyaWIFI.h"
   8          //Logic layer
   9          #include "AppUnlock.h"
  10          #include "KeyScan.h"
  11          #include "Motor.h"
  12          #include "Log.h"
  13          #include "FP.h"
  14          #include "LCD.h"
  15          #include "MFC.h"
  16          #include "RTC.h"
  17          //Application layer
  18          #include "GUI.h"
  19          #include "GUI_Function.h"
  20          #include "Basic_Function.h"
  21          #include "Voice_Menu.h"
  22          #include "Font_Menu.h"
  23          #include "Font.h"
  24          
  25          struct
  26          {
  27            enum{
  28              SetYearMajor=0,
  29              SetYearMinor=1,
  30              SetMonthMajor,
  31              SetMonthMinor,
  32              SetDateMajor,
  33              SetDateMinor,
  34              SetHourMajor,
  35              SetHourMinor,
  36              SetMinuteMajor,
  37              SetMinuteMinor,
  38              SetSecondMajor,
  39              SetSecondMinor
  40            }Status;
  41          
  42          }TimeSettingMgr;
  43          
  44          screen_t LastScreen;
  45          VoiceMenuMgr_t VoiceMenuMgr;
  46          DataInputMgr_t DataInputMgr;
  47          PasscodeInputMgr_t PasscodeInputMgr;
  48          uint8_t GUI_TimeCnt;
  49          uint8_t GUI_ToggleFlag_1s;
  50          uint8_t GUI_ToggleFlag_05s;
  51          bool_t GUI_Flag_RefreshLCD;
  52          
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 2   

  53          keycode_t gui_keycode = KEY_NONE;
  54          
  55          uint8_t PasscodeBUFF1[12];
  56          
  57          /*******************************************************/
  58          /*******************************************************
  59          /*******************************************************/
  60          void ShowIdentifySuccessPage(void)//认证成功页面
  61          {
  62   1        #ifdef Function_ScreenDisplay
                uint8_t DoorLockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_guanbi,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorLockedStrEn[]={"<Closed>"}; 
                uint8_t DoorUnlockedStr[]={ZF_xiaoyuhao,HZ_yi,HZ_kai,HZ_suomen,ZF_dayuhao,HZ_end};
              //  uint8_t DoorUnlockedStrEn[]={"<Opened>"}; 
                uint8_t InitialStatusStr[]={HZ_chuzhong,HZ_shizhong,HZ_zhuang,HZ_tai,HZ_end};
              //  uint8_t InitialStatusStrEn[]={"Initial"};
                #endif  
  70   1      
  71   1        if ( MotorMgr.MotorStatus != IDLE )
  72   1        {
  73   2          #ifdef Function_ScreenDisplay
                  DisImage(0,72,52,40,Icon_Unlocked,NormalDisplay);
                  
                  if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    DisHZ16x14Str(2,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    DisHZ16x14Str(2,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    /*if ( UserIdentifyResultMgr.PasscodeType == OnlinePasscode )
                    {
                        DisHZ16x14Str(2,0,TemporaryPasswordStr,NormalDisplay);
                        DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    else*/
                    {
                      DisHZ16x14Str(2,0,PasscodeUserStr,NormalDisplay);
                      DisHZ16x14Str(4,0,UserIDStr,NormalDisplay);
                    }
                    DisDigital16x8Str(4,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay);
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandCARD )
                  {
                    
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,36,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);   
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == FINGERPRINTandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,FpUserStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 3   

                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.FPUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == CARDandPASSCODE )
                  {
                    DisHZ16x14Str(0,0,CardUserStr,NormalDisplay);
                    DisHZ16x14Str(2,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(2,40,UserIdentifyResultMgr.CardUserID,NormalDisplay);
                    DisHZ16x14Str(4,0,PasscodeUserStr,NormalDisplay);
                    DisHZ16x14Str(6,0,UserIDStr,NormalDisplay);
                    DisDigital16x8Str(6,40,UserIdentifyResultMgr.PasscodeUserID,NormalDisplay); 
                  }
                  else if (UserIdentifyResultMgr.IdentifyType == INITIALSTATUS )
                  {
                  
                      DisHZ16x14Str(3,0,InitialStatusStr,NormalDisplay);
                  }
                  DisHZ16x14Str(6,64,DoorUnlockedStr,NormalDisplay);
                  
                  #endif 
 138   2          
 139   2          if (( MotorMgr.MotorStatus == CWWAIT )&&(MotorMgr.CWWAITTimer==(Def_MotorCWWAITTime-5)) )
 140   2          {
 141   3            PLAY_VOICE_ONESEGMENT(VOICE_DoorOpened);
 142   3            
 143   3            #ifdef Function_TuyaWifi
                    if( UserIdentifyResultMgr.IdentifyType == WIFITEMPPASSCODE )
                    {
                      WifiMgr.PostMgr.Flag.Bits.TempPasswordUnlock = 1;
                    }
                    else if( UserIdentifyResultMgr.IdentifyType != RemoteUnlock )
                    {
                      WifiMgr.PostMgr.Flag.Bits.Unlock = 1;
                    }
                    #endif
 153   3            
 154   3            #ifdef Function_FPMBreathingLed
 155   3            //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 156   3            //{
 157   3              SetFPMbreathingLed(FPMbreathingLed_Green);
 158   3            //}
 159   3            #endif  
 160   3                  
 161   3          }
 162   2          else if ( MotorMgr.MotorStatus == CCWWAIT ) 
 163   2          {
 164   3            if ( MotorMgr.CCWWAITTimer==(Def_MotorCCWWAITTime-5) )
 165   3            {
 166   4              PLAY_VOICE_ONESEGMENT(VOICE_DoorClosed);  
 167   4              UserIdentifyResultMgr.TimeCnt = Def_GuiTimeDelayCnt3s;
 168   4              SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt3s;
 169   4              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(OpenDoor);
                      #endif
 172   4            }
 173   3            else if ( MotorMgr.CCWWAITTimer == 1)
 174   3            {
 175   4              //EMAGNET_RelaseTrigger();
 176   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 4   

 177   3          }
 178   2        }
 179   1        else
 180   1        {
 181   2          #ifdef Function_ScreenDisplay
                  GUI_Flag_RefreshLCD = bTRUE;
                  DisImage(0,44,40,40,Icon_Locked,NormalDisplay);
                    DisHZ16x14Str(6,36,DoorLockedStr,NormalDisplay);
                  #endif
 186   2          
 187   2          if ( UserIdentifyResultMgr.TimeCnt > 0 )
 188   2          {
 189   3            if (UserIdentifyResultMgr.TimeCnt == 64)
 190   3            {
 191   4              SystemPowerMgr.SleepDelayTimerCnt = 65; 
 192   4            }
 193   3            UserIdentifyResultMgr.TimeCnt--;
 194   3          }
 195   2          else
 196   2          {
 197   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 198   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 199   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 200   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 201   3            CardIdentifyMgr.Status = ReadingCardID;
 202   3            FpIdentifyMgr.Status = FPMcmdStart;
 203   3            CurrentScreen = SCREEN_Main;  
 204   3            SystemPowerMgr.SleepDelayTimerCnt = 0x0000; //set system to sleep
 205   3            
 206   3      //      #ifdef Function_FPMBreathingLed
 207   3      //      SetFPMbreathingLed(FPMbreathingLed_Red);
 208   3      //      #endif  
 209   3          }
 210   2        }
 211   1      
 212   1      }
 213          /*******************************************************/
 214          /*******************************************************/
 215          /*******************************************************/
 216          void ShowIdentifyFailPage(void)//认证失败页面
 217          {
 218   1        #ifdef Function_ScreenDisplay
                DisImage(1,52,24,24,Icon_Incorrect,NormalDisplay);
                
                if ( UserIdentifyResultMgr.IdentifyType == CARD )
                {
                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                else if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                {
                  if ( UserIdentifyResultMgr.ErrorType == FPMserialNumberMismatched )
                  {
                    DisHZ16x14Str(4,14,FPHardwareMismatchStr,RED_COLOR);
                    DisHZ16x14Str(6,20,PLSRestoreFactoryStr,RED_COLOR);
                  }
                  else
                  {
                    DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                  }
                }
                else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 5   

                  DisHZ16x14Str(5,36,IdentifyFailStr,NormalDisplay);
                }
                #endif
 242   1        
 243   1        if ( UserIdentifyResultMgr.TimeCnt == Def_MessageBoxTimeDelay )
 244   1        {
 245   2          #ifdef Function_FPMBreathingLed
 246   2          //if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
 247   2          //{
 248   2            SetFPMbreathingLed(FPMbreathingLed_Red);
 249   2          //}
 250   2          #endif
 251   2          #ifdef Function_TuyaWifi
                  WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                  if ( UserIdentifyResultMgr.IdentifyType == FINGERPRINT )
                  {
                    WifiMgr.PostMgr.AlarmType = FingerErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == PASSCODE )
                  {
                    WifiMgr.PostMgr.AlarmType = PasswordErrorAlarm;
                  }
                  else if ( UserIdentifyResultMgr.IdentifyType == CARD )
                  {
                    WifiMgr.PostMgr.AlarmType = CardErrorAlarm;
                  }
                  #endif
 266   2        }
 267   1      
 268   1        if ( UserIdentifyResultMgr.TimeCnt > 0 )
 269   1        {
 270   2          UserIdentifyResultMgr.TimeCnt--;
 271   2        }
 272   1        else
 273   1        {
 274   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 275   2          CardIdentifyMgr.Status = ReadingCardID;
 276   2          FpIdentifyMgr.Status = FPMcmdStart;
 277   2          CurrentScreen = SCREEN_Main;
 278   2          RefreshSystemSleepTime();
 279   2          
 280   2          #ifdef Function_FPMBreathingLed
 281   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
 282   2          #endif
 283   2        }
 284   1      }
 285          
 286          /*******************************************************/
 287          /*******************************************************/
 288          /*******************************************************/
 289          void DisplayMainPage(void)//界面_主页面
 290          {
 291   1        #ifdef Function_ScreenDisplay
                code uint8_t YearMonthDay[]={ZF_2,ZF_0,ZF_0,ZF_0,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                //code uint8_t Frame[]={ZF_1,ZF_8,ZF_hengan,ZF_0,ZF_1,ZF_hengan,ZF_0,ZF_1,HZ_end};
                code uint8_t Str1[]={HZ_weihe,HZ_le,HZ_nin,HZ_de,HZ_an,HZ_quan,HZ_end};
              //  code uint8_t Str1En[]={"Sys without"};
                code uint8_t Str2[]={HZ_qing,HZ_tian,HZ_jia,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t Str2En[]={"admin."};
                code uint8_t Str3[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t Str3En[]={"Input 2nd ID"};
                code uint8_t Str4[]={HZ_anya,ZF_xiaoyuhao,ZF_jinghao,ZF_dayuhao,HZ_jinru,HZ_ru,HZ_guan,HZ_li,HZ_mo,HZ_si,
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 6   

             -HZ_end};
              //  code uint8_t Str4En[]={"Press # to menu"};
              
                uint8_t Empty32X20[80]={
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                };
              
                DisHZ16x14Str(0,8,YearMonthDay,NormalDisplay);
                DisBcdDigital16x8(0,24,SystemTime.year,NormalDisplay);
                DisBcdDigital16x8(0,48,SystemTime.month,NormalDisplay);
                DisBcdDigital16x8(0,72,SystemTime.date,NormalDisplay);
                DisImage(0,100,25,16,IconBetteryLevel[BatteryMgr.BatteryLevel],NormalDisplay);
                  
                  if (  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle ) )
                  {
                    if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
                        ((UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
                        ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
                      )
                    {
                      DisHZ16x14Str(3,16,Str3,NormalDisplay); //please input sencond identity
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                      
                    else if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisHZ16x14Str(3,4,Str4,NormalDisplay);          
                    }
                    
                    else if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
                    {
                      Clear_Screen_Page(2);
                      Clear_Screen_Page(3);
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      DisImage(2,4,27,24,Icon_Warning,NormalDisplay);
                      DisHZ16x14Str(2,40,Str1,NormalDisplay);
                      DisHZ16x14Str(4,40,Str2,NormalDisplay);
                      GUI_Flag_RefreshLCD = bTRUE;
                    }
                    else
                    {
                      GUI_Flag_RefreshLCD = bTRUE;
                      DisBcdDigital32x20(2,14,SystemTime.hour,NormalDisplay);
                      DisBcdDigital32x20(2,74,SystemTime.minute,NormalDisplay);
              //        DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        if (GUI_ToggleFlag_05s == 0 )
                        {
                          DisImage(2,54,20,32,Empty32X20,NormalDisplay);  
                        }
                        else
                        {
                          DisImage(2,54,20,32,ZF32x20[10],NormalDisplay); 
                        }
                    }
                    //DisHZ16x14Str(6,16,FPDLLog,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 7   

                    ShowLockBrand();
                  }
                #endif
 365   1      }
 366          
 367          /*******************************************************/
 368          void GUI_UpadteMain(void)//GUI_主界面
 369          {
 370   1        if ( SafetyMonitorMgr.SystemLocked == bTRUE )
 371   1        {
 372   2          CurrentScreen = SCREEN_SystemLocked;
 373   2          #ifdef Function_FPMBreathingLed
 374   2          SetFPMbreathingLed(FPMbreathingLed_Off);
 375   2          #endif
 376   2        }
 377   1        
 378   1        if (( CardIdentifyMgr.CardDetectIntervalTimeCnt == 0 ) )  //FPM Cmd is sent out
 379   1        {
 380   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
 381   2          CardUserIdentify();
 382   2        }
 383   1      
 384   1        
 385   1        if ( CardIdentifyMgr.Status == Success)
 386   1        {
 387   2          UserIdentifyResultMgr.CardIdentifyStatus = S_SUCCESS;
 388   2          UserIdentifyResultMgr.CardUserID = CardIdentifyMgr.UserID;
 389   2          RefreshSystemSleepTime(); //card detected system sleep timer reset
 390   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 391   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 392   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 393   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 394   2          {
 395   3            UnlockSuccess(CARD);
 396   3          }
 397   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 398   2          {
 399   3            if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 400   3            {
 401   4              UnlockSuccess(CARDandPASSCODE);
 402   4            }
 403   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 404   3            { 
 405   4              UnlockSuccess(FINGERPRINTandCARD);
 406   4            }
 407   3            else{ 
 408   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 409   4              {
 410   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 411   5                //CardIdentifyMgr.Status = ReadingCardID;
 412   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay; 
 413   5              }
 414   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 415   4              {
 416   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 417   5                {
 418   6                  CardIdentifyMgr.Status = ReadingCardID;
 419   6                }
 420   5                UserIdentifyResultMgr.VoiceDelay--;
 421   5              }
 422   4            }
 423   3          }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 8   

 424   2        }
 425   1        else if ( CardIdentifyMgr.Status == Fail)
 426   1        {
 427   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 428   2          {
 429   3      //      if ( (CardIdentifyMgr.CID[0] == 0x16)
 430   3      //        &&(CardIdentifyMgr.CID[1] == 0xD4)
 431   3      //        &&(CardIdentifyMgr.CID[2] == 0xDB)
 432   3      //        &&(CardIdentifyMgr.CID[3] == 0x3C) )
 433   3      //      {
 434   3      //        DEBUG_MARK;
 435   3      //        if ( LockBrand.BrandChangeTimeDelay == 0 )
 436   3      //        {
 437   3      //          WriteLockBrand();
 438   3      //          if ( LockBrand.GotBrandData == bTRUE )
 439   3      //          {
 440   3      //            DEBUG_MARK;
 441   3      //            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 442   3      //            LockBrand.BrandChangeTimeDelay = Def_GuiTimeDelayCnt3s;
 443   3      //            RefreshSystemSleepTime();
 444   3      //          }
 445   3      //        }
 446   3      //        CardIdentifyMgr.Status = ReadingCardID;
 447   3      //      }
 448   3      //      else
 449   3      //      {
 450   3              UnlockSuccess(INITIALSTATUS);
 451   3              RefreshSystemSleepTime();
 452   3      //      }
 453   3          }
 454   2          else
 455   2          {
 456   3            UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
 457   3            UserIdentifyResultMgr.IdentifyType = CARD;
 458   3            UserIdentifyResultMgr.CardUserID = 0x00;
 459   3            //Enable_KEYLED_IdentifyFail();
 460   3            CurrentScreen = SCREEN_IdentifyFail;
 461   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 462   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 463   3            if ( SafetyMonitorMgr.CardIdentifyFailedTimes < DEF_CardIdentifyFailedTimesLimited )
 464   3            {
 465   4              SafetyMonitorMgr.CardIdentifyFailedTimes++;
 466   4            }
 467   3            else
 468   3            {
 469   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 470   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 471   4            }
 472   3          }
 473   2        }
 474   1      
 475   1        FpUserIdentify();
 476   1        if ( FpIdentifyMgr.Status == success)
 477   1        {
 478   2          UserIdentifyResultMgr.FPIdentifyStatus = S_SUCCESS;
 479   2          UserIdentifyResultMgr.FPUserID = FpIdentifyMgr.UserID+1;
 480   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 481   2              SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 482   2              SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 483   2          if (UserIdentifyResultMgr.UnlockingMode == SingalMode )
 484   2          {
 485   3            UnlockSuccess(FINGERPRINT);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 9   

 486   3          }
 487   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 488   2          {
 489   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS))
 490   3            {
 491   4              UnlockSuccess(FINGERPRINTandCARD);
 492   4            }
 493   3            else if (( UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ))
 494   3            {
 495   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 496   4            }
 497   3            else
 498   3            {
 499   4              if(UserIdentifyResultMgr.VoiceDelay == 0)
 500   4              {
 501   5                PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 502   5                //FpIdentifyMgr.Status = FPMcmdStart;
 503   5                UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 504   5              }
 505   4              else if ( UserIdentifyResultMgr.VoiceDelay > 0 )
 506   4              {
 507   5                if( UserIdentifyResultMgr.VoiceDelay == 1 )
 508   5                {
 509   6                  FpIdentifyMgr.Status = FPMcmdStart;
 510   6                }
 511   5                UserIdentifyResultMgr.VoiceDelay--;
 512   5              }
 513   4            }
 514   3          }
 515   2        }
 516   1        else if ( FpIdentifyMgr.Status == fail)
 517   1        {
 518   2          if ( FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched )
 519   2          {
 520   3            UserIdentifyResultMgr.ErrorType = FPMserialNumberMismatched;
 521   3          }
 522   2          else{
 523   3            UserIdentifyResultMgr.ErrorType = UserUnregistered;
 524   3          }
 525   2          
 526   2          if ( ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 527   2            && (UserIdentifyResultMgr.ErrorType != FPMserialNumberMismatched)
 528   2            )
 529   2          {
 530   3            UnlockSuccess(INITIALSTATUS);
 531   3          }
 532   2          else
 533   2          {
 534   3            UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
 535   3            UserIdentifyResultMgr.IdentifyType = FINGERPRINT;
 536   3            UserIdentifyResultMgr.FPUserID = 0x00;
 537   3            //Enable_KEYLED_IdentifyFail();
 538   3            CurrentScreen = SCREEN_IdentifyFail;
 539   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
 540   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
 541   3            
 542   3            if ( SafetyMonitorMgr.FpIdentifyFailedTimes < DEF_FpIdentifyFailedTimesLimited )
 543   3            {
 544   4              SafetyMonitorMgr.FpIdentifyFailedTimes++;
 545   4            }
 546   3            else
 547   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 10  

 548   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 549   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 550   4            }
 551   3          
 552   3          }
 553   2      
 554   2        }
 555   1      
 556   1        PasscodeUserIdentify();
 557   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
 558   1        {
 559   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_SUCCESS;
 560   2          UserIdentifyResultMgr.PasscodeUserID = PasscodeUserIdentifyMgr.UserID;
 561   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
 562   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
 563   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
 564   2          if ( (UserIdentifyResultMgr.UnlockingMode == SingalMode)
 565   2            || (UserIdentifyResultMgr.PasscodeType == AppPasscode)
 566   2            || (UserIdentifyResultMgr.PasscodeType == WifiTempPasscode) )
 567   2          {
 568   3            #ifdef Function_TuyaWifi
                    if(UserIdentifyResultMgr.PasscodeType == WifiTempPasscode){
                      UnlockSuccess(WIFITEMPPASSCODE);
                    }
                    else
                    #endif
 574   3            {
 575   4              UnlockSuccess(PASSCODE);
 576   4            }
 577   3          }
 578   2          else if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
 579   2          {
 580   3            if (( UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS ))
 581   3            {
 582   4              UnlockSuccess(CARDandPASSCODE);
 583   4            }
 584   3            else if (( UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS ))
 585   3            { 
 586   4              UnlockSuccess(FINGERPRINTandPASSCODE);
 587   4            }
 588   3            else
 589   3            {
 590   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
 591   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 592   4              UserIdentifyResultMgr.VoiceDelay = Def_MessageBoxTimeDelay;
 593   4            }
 594   3          }
 595   2        }
 596   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
 597   1        {
 598   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
 599   2          {
 600   3            UnlockSuccess(INITIALSTATUS);
 601   3          }
 602   2          else
 603   2          {
 604   3            UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
 605   3            UserIdentifyResultMgr.IdentifyType = PASSCODE;
 606   3            UserIdentifyResultMgr.PasscodeUserID = 0x00;
 607   3            //Enable_KEYLED_IdentifyFail();
 608   3            CurrentScreen = SCREEN_IdentifyFail;
 609   3            UserIdentifyResultMgr.TimeCnt = Def_MessageBoxTimeDelay;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 11  

 610   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);  
 611   3            if ( SafetyMonitorMgr.PasscodeIdentifyFailedTimes < DEF_PasscodeIdentifyFailedTimesLimited )
 612   3            {
 613   4              SafetyMonitorMgr.PasscodeIdentifyFailedTimes++;
 614   4            }
 615   3            else
 616   3            {
 617   4              SafetyMonitorMgr.SystemLocked = bTRUE;
 618   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
 619   4            }
 620   3          }
 621   2        }
 622   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyAgingTestSuccess )
 623   1        {
 624   2          AgingTestMgr.TestTimes=0x0000;    
 625   2          CurrentScreen = SCREEN_AgingTest;
 626   2        }
 627   1        else if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifyCheckVersionSuccess )
 628   1        {
 629   2          GoToSystemVersion();
 630   2        }
 631   1        else if (PasscodeUserIdentifyMgr.Status == DeleteWifiTempPasscodeSuccess )
 632   1        {
 633   2          PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 634   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
 635   2        }
 636   1        
 637   1        if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
 638   1        {
 639   2          if  ( (UserIdentifyResultMgr.UnlockingMode == DoubleMode )&&
 640   2                ( (UserIdentifyResultMgr.FPIdentifyStatus == S_SUCCESS )
 641   2                ||(UserIdentifyResultMgr.CardIdentifyStatus == S_SUCCESS )
 642   2                ||(UserIdentifyResultMgr.PasscodeIdentifyStatus == S_SUCCESS ) )
 643   2              )
 644   2          {
 645   3          }
 646   2        }
 647   1        #ifdef Function_TuyaWifi
                if( WifiMgr.WifiConnection.Status == JustConnected )
                {
                  WifiMgr.WifiConnection.Status = Connected;
                  //PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                }
                #endif
 654   1        #ifdef Function_ScreenDisplay
                  DisplayMainPage();
                #endif
 657   1      
 658   1        if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
 659   1        {
 660   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  #endif
 663   2          //SET_ALLKEYLED_OFF();
 664   2        }
 665   1        
 666   1      }
 667          
 668          /*******************************************************/
 669          void ShowDoorBell(void)
 670          {
 671   1        #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 12  

                DisImage(1,33,61,40,Icon_DoorBell,NormalDisplay);
                #endif
 674   1        if ( DoorBellMgr.TimeCnt > 0 )
 675   1        {
 676   2          #ifdef Function_TuyaWifi
                  if( DoorBellMgr.TimeCnt == 150 )
                  {
                    WifiMgr.RemoteUnlockMgr.WaitRequestRemoteUnlock = bTRUE;
                  }
                  #endif
 682   2          DoorBellMgr.TimeCnt--;
 683   2        }
 684   1        else
 685   1        {
 686   2          CurrentScreen = SCREEN_Main;
 687   2        }
 688   1      }
 689          
 690          
 691          /*******************************************************/
 692          /*******************************************************/
 693          /*******************************************************/
 694          void ShowMainMenu(void)//界面-主菜单
 695          {
 696   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,MainMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<1;j++)
                  {
                    DisHZ16x14Str(2*j,0,MainMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 714   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 715   1        {
 716   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 717   2          {
 718   3            PLAY_VOICE_MULTISEGMENTS(MainMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 719   3            VoiceMenuMgr.MenuPoint++;
 720   3          }
 721   2        }
 722   1      }
 723          /*******************************************************/
 724          /*******************************************************/
 725          /*******************************************************/
 726          void ShowLogMenu(void)//界面-日志菜单
 727          {
 728   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                  DisHZ16x14Str(2*i,0,EventLogMenuStr[i],NormalDisplay);
                }   
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 13  

                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 736   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 737   1        {
 738   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 739   2          {
 740   3            PLAY_VOICE_MULTISEGMENTS(LogMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 741   3            VoiceMenuMgr.MenuPoint++;
 742   3          }
 743   2        }
 744   1        
 745   1      }
 746          
 747          /*******************************************************/
 748          /*******************************************************/
 749          /*******************************************************/
 750          void ShowFpMenu(void)//界面-指纹菜单
 751          {
 752   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,FpMenuStr[i],NormalDisplay);
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 760   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 761   1        {
 762   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 763   2          {
 764   3            PLAY_VOICE_MULTISEGMENTS(FpMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 765   3            VoiceMenuMgr.MenuPoint++;
 766   3          }
 767   2        }
 768   1      }
 769          
 770          
 771          /*******************************************************/
 772          /*******************************************************/
 773          /*******************************************************/
 774          void ShowPasscodeMenu(void)//界面-密码菜单
 775          {
 776   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<3;i++)
                {
                    DisHZ16x14Str(2*i,0,PassCodeMenuStr[i],NormalDisplay);
                } 
                #endif
 783   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 784   1        {
 785   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 786   2          {
 787   3            PLAY_VOICE_MULTISEGMENTS(PasscodeMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 788   3            VoiceMenuMgr.MenuPoint++;
 789   3          }
 790   2        } 
 791   1      
 792   1      }
 793          
 794          /*******************************************************/
 795          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 14  

 796          /*******************************************************/
 797          void ShowCardUserMenu(void)//界面-磁卡菜单
 798          {
 799   1        #ifdef Function_ScreenDisplay
                uint8_t i;
                for (i=0;i<2;i++)
                {
                    DisHZ16x14Str(2*i,0,CardUserMenuStr[i],NormalDisplay);
                } 
                #endif
 806   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 807   1        {
 808   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 809   2          {
 810   3            PLAY_VOICE_MULTISEGMENTS(CardUserMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 811   3            VoiceMenuMgr.MenuPoint++;
 812   3          }
 813   2        } 
 814   1      }
 815          
 816          /*******************************************************/
 817          /*******************************************************/
 818          /*******************************************************/
 819          void ShowSystemConfigMenu(void)//系统配置菜单
 820          {
 821   1        #ifdef Function_ScreenDisplay
                uint8_t i,j;
                if( VoiceMenuMgr.MenuPoint<5 )
                {
                  for (i=0;i<4;i++)
                  {
                    DisHZ16x14Str(2*i,0,SytemConfigMenuStr[i],NormalDisplay);
                  } 
                }
                else
                {
                  for (j=0;j<2;j++)
                  {
                    DisHZ16x14Str(2*j,0,SytemConfigMenuStr[4+j],NormalDisplay);
                  } 
                }
                GUI_Flag_RefreshLCD = bTRUE;
                #endif
 839   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
 840   1        {
 841   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
 842   2          {
 843   3            PLAY_VOICE_MULTISEGMENTS(SystemConfigMenuVoiceBuff[VoiceMenuMgr.MenuPoint]);
 844   3            VoiceMenuMgr.MenuPoint++;
 845   3          }
 846   2        }   
 847   1      }
 848          /*******************************************************/
 849          /*******************************************************/
 850          /*******************************************************/
 851          void ShowNetWorkConnecting(void)//联网中
 852          {
 853   1        #ifdef Function_TuyaWifi
                if ( WifiMgr.Link.Status == LinkStart )
                {
                  WifiMgr.Link.Status = LinkWait;
                  WifiMgr.Link.TimeCnt = 120*64;  //120S
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 15  

                  WifiMgr.PostMgr.Flag.Bits.StartNetwork = 1;
                  WifiMgr.OFFPowerCnt = 0;
                  PLAY_VOICE_ONESEGMENT(VOICE_NetworkingConfiguration);
                }
                else if ( WifiMgr.Link.Status == LinkWait )
                {
                  WifiMgr.OFFPowerCnt = 0;
                  if( WifiMgr.WifiConnection.Status == JustConnected )
                  {
                    WifiMgr.WifiConnection.Status = Connected;
                    WifiMgr.Link.Status = LinkSuccess;
                  }
                  RefreshSystemSleepTime();
                }
                else if ( WifiMgr.Link.Status == LinkSuccess )
                {
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Success);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                else if ( WifiMgr.Link.Status == LinkFail )
                {
                  //if ( WifiMgr.Link.errorcode == 0x02 ) //wifi module not be found
                  PLAY_VOICE_TWOSEGMENT(VOICE_NetWorking,VOICE_Fail);
                  WifiMgr.Link.Status = LinkIdle;
                  WifiMgr.Link.TimeCnt = Def_GuiTimeDelayCnt3s;
                }
                
                if( WifiMgr.Link.TimeCnt > 0){
                  WifiMgr.Link.TimeCnt--;
                }
                else
                {
                  if ( WifiMgr.Link.Status == LinkWait )
                  {
                    WifiMgr.Link.Status = LinkFail;
                    //WifiMgr.Link.errorcode = 0x01;
                  }
                  else
                  {
                    GoToMainMenu();
                  }
                }
                #endif
 902   1      }
 903          
 904          /*******************************************************/
 905          /*******************************************************/
 906          /*******************************************************/
 907          void ShowRegisterMasterFp(void)//界面-注册管理员指纹
 908          {
 909   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
 913   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
 914   1        {
 915   2          if ( CheckMemoryMgr.FpMasterNum < DEF_MAX_FPMASTER )
 916   2          {
 917   3            FpUserRegisterMgr.Status = AddUserToFPM;
 918   3            FpRegisterMgr.Status = FPMcmdStart;
 919   3            DataInputMgr.Status = InputIdle;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 16  

 920   3            FpUserRegisterMgr.TimeCnt = 0;
 921   3            #ifdef Function_Enable_ID_Del
 922   3            FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 923   3            ReportRegisterID(FPUSER, FpUserRegisterMgr.UserID);
 924   3            FpUserRegisterMgr.TimeCnt = Def_GuiTimeDelayCnt4s;
 925   3            #endif
 926   3          }
 927   2          else
 928   2          {
 929   3            FpUserRegisterMgr.Status = RegisterUserFail;
 930   3            FpUserRegisterMgr.ErrorType = MemoryIsFull;
 931   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 932   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
 933   3            Hardware_DelayMs(100);
 934   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
 938   3          }
 939   2        }
 940   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
 941   1        {
 942   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )
 943   2          {
 944   3            FpUserRegisterMgr.UserID = Get_Availabe_FPmasterID();
 945   3            
 946   3            RegisterFp(FpUserRegisterMgr.UserID-1);
 947   3            
 948   3            if (FpRegisterMgr.Status == success)
 949   3            {
 950   4              FpUserRegisterMgr.Status = RegisterUserSuccess;
 951   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 952   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
 953   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
 957   4              //GUI_Flag_RefreshLCD = bTRUE;
 958   4              CheckMemoryMgr.FpMasterNum+=1;
 959   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
 960   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
 961   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = Master;
 962   4        //      #ifdef Function_TuyaWifi
 963   4        //        WifiMgr.PostMgr.Flag.Bits.FingerSync = 1;
 964   4        //      #endif
 965   4            }
 966   3            else if (FpRegisterMgr.Status == fail)
 967   3            {
 968   4              FpUserRegisterMgr.Status = RegisterUserFail;
 969   4              FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
 970   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
 971   4              if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
 972   5                PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
 973   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                        #endif
 977   5              }
 978   4              else
 979   4              {
 980   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
 981   5                #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 17  

                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                        #endif
 985   5              }
 986   4              //GUI_Flag_RefreshLCD = bTRUE;
 987   4            }
 988   3          }
 989   2        }
 990   1      
 991   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
 992   1        {
 993   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
 994   2          {
 995   3            GoToFpMenu();
 996   3            RefreshSystemSleepTime();
 997   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
1000   3      
1001   3            DEBUG_MARK;
1002   3          }
1003   2        }
1004   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1005   1        {
1006   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1007   2          {
1008   3            
1009   3          }
1010   2          
1011   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1012   2          {
1013   3          
1014   3          }
1015   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1016   2          {
1017   3        
1018   3          }
1019   2          else
1020   2          {
1021   3      
1022   3          }
1023   2          
1024   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1025   2          {
1026   3            GoToFpMenu();
1027   3          }
1028   2          DEBUG_MARK;
1029   2        }
1030   1      }
1031          
1032          /*******************************************************/
1033          /*******************************************************/
1034          /*******************************************************/
1035          void ShowDeleteMasterFp(void)//删除管理员指纹
1036          {
1037   1        //uint8_t i;
1038   1      
1039   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1040   1        {
1041   2          FpUserDeleteMgr.Status = InputUserID;
1042   2          DataInputMgr.Status = InputIdle;
1043   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 18  

1044   2        }
1045   1        
1046   1        if ( FpUserDeleteMgr.Status == InputUserID )
1047   1        {
1048   2          
1049   2          GUI_DataInputCreat(5,72,2,0x0000);
1050   2      
1051   2          if (DataInputMgr.Status == InputEnd)
1052   2          {
1053   3            FpUserDeleteMgr.UserID = DataInputMgr.Value;
1054   3            if ((FpUserDeleteMgr.UserID==0)||( FpUserDeleteMgr.UserID > DEF_MAX_FPMASTER ))       
1055   3            {
1056   4              DataInputMgr.Status = InputIdle;    //Reinput
1057   4            }
1058   3            else
1059   3            {
1060   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1061   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1062   4              DataInputMgr.Status = InputIdle;  
1063   4            }
1064   3          }
1065   2          else if  (DataInputMgr.Status == InputExit)
1066   2          {
1067   3            FpUserDeleteMgr.Status = DeleteUserFail;
1068   3            FpUserDeleteMgr.ErrorType = QUIT;
1069   3            FpUserDeleteMgr.TimeCnt = 0;  
1070   3          }
1071   2        }
1072   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1073   1        {
1074   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1075   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1076   2          {
1077   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1078   3            {
1079   4              if ((CheckMemoryMgr.FpMasterNum == 0x01))
1080   4                //&&(CheckMemoryMgr.PasscodeMasterNum==0x00))
1081   4              {
1082   5                FpUserDeleteMgr.Status = DeleteUserFail;
1083   5                FpUserDeleteMgr.ErrorType = CanNotDeleteLastOneMaster;
1084   5                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1085   5                //GUI_Flag_RefreshLCD = bTRUE;
1086   5                DEF_Fail_Beep;
1087   5              }
1088   4              else
1089   4              {
1090   5                FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1091   5                DataInputMgr.Status = InputIdle;  
1092   5                //GUI_Flag_RefreshLCD = bTRUE;
1093   5              }
1094   4            }
1095   3            else
1096   3            {
1097   4              FpUserDeleteMgr.Status = DeleteUserFail;
1098   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1099   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1100   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1101   4              //GUI_Flag_RefreshLCD = bTRUE;
1102   4            }
1103   3          }
1104   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1105   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 19  

1106   3            FpUserDeleteMgr.Status = DeleteUserFail;
1107   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1108   3            FpUserDeleteMgr.ErrorType = QUIT;
1109   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1110   3            //GUI_Flag_RefreshLCD = bTRUE;
1111   3          }
1112   2        }
1113   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1114   1        {
1115   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1116   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1117   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1118   2          FpmAckMgr.Status = WaitACK;
1119   2        }
1120   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1121   1          {
1122   2            if (FpmAckMgr.Status == GotACK)
1123   2              {
1124   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1125   3                {
1126   4                  FpUserDeleteMgr.Status = DeleteUserSuccess;
1127   4                  //GUI_Flag_RefreshLCD = bTRUE;
1128   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1129   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1130   4                  if ( CheckMemoryMgr.FpMasterNum > 0 )
1131   4                  {
1132   5                    CheckMemoryMgr.FpMasterNum-=1;
1133   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1134   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1135   5                    FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1136   5                  }
1137   4                }
1138   3                else
1139   3                {
1140   4                  FpUserDeleteMgr.Status = DeleteUserFail;
1141   4                  //GUI_Flag_RefreshLCD = bTRUE;
1142   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1143   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1144   4                }
1145   3                DEBUG_MARK;
1146   3              }
1147   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1148   2              {
1149   3                FpUserDeleteMgr.Status = DeleteUserFail;
1150   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1151   3                //GUI_Flag_RefreshLCD = bTRUE;
1152   3                FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1153   3              }
1154   2      
1155   2          }
1156   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1157   1          {
1158   2            if (--FpUserDeleteMgr.TimeCnt < 1 )   
1159   2            {
1160   3              CurrentScreen = SCREEN_MasterFpMenu;
1161   3              UnlockModeJudgment();
1162   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteFpUser);
                      #endif
1165   3            }
1166   2            DEBUG_MARK;
1167   2          }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 20  

1168   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1169   1          {
1170   2            if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1171   2            {
1172   3              
1173   3            }
1174   2            /*
1175   2            else if ( FpUserDeleteMgr.ErrorType == TimeOut )
1176   2            {
1177   2              //DisHZ16x14Str(4,48,TimeOutStr,NormalDisplay);
1178   2            }
1179   2            */
1180   2            else if ( FpUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster )
1181   2            {
1182   3              
1183   3            }
1184   2            else
1185   2            {
1186   3      
1187   3            }
1188   2            if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1189   2            {
1190   3              CurrentScreen = SCREEN_MasterFpMenu;
1191   3            }
1192   2            DEBUG_MARK;
1193   2          }
1194   1        
1195   1      }
1196          /*******************************************************/
1197          /*******************************************************/
1198          /*******************************************************/
1199          void ShowRegisterUserFp(void)//界面-注册用户指纹
1200          {
1201   1        //uint8_t i;
1202   1        //uint16_t UserID;  
1203   1        //~{Lm<SV8NFSC;'~}
1204   1        #ifdef Function_ScreenDisplay
                code uint8_t DuplicateFpStr[]={HZ_kongge,HZ_chong,HZ_fu,HZ_zhi,HZ_wen,HZ_end}; //重复指纹
              //  code uint8_t DuplicateFpStrEn[]={"<Duplicate Fp>"};
                #endif
1208   1        
1209   1        if ( FpUserRegisterMgr.Status == StartFpUserRegister )
1210   1        {
1211   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1212   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1213   2          )
1214   2          {
1215   3            FpUserRegisterMgr.Status = RegisterUserFail;
1216   3            FpUserRegisterMgr.ErrorType = SystemNoMaster;
1217   3            FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1218   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1219   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
1223   3            //GUI_Flag_RefreshLCD = bTRUE;
1224   3          } 
1225   2          else
1226   2          {
1227   3            if ( CheckMemoryMgr.FpUserNum < DEF_MAX_FPUSER )
1228   3            {
1229   4              FpUserRegisterMgr.Status = AddUserToFPM;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 21  

1230   4              FpRegisterMgr.Status = FPMcmdStart;
1231   4              DataInputMgr.Status = InputIdle;
1232   4              FpUserRegisterMgr.TimeCnt = 0;
1233   4              #ifdef Function_Enable_ID_Del
1234   4              FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1235   4              ReportRegisterID(FPUSER, FpUserRegisterMgr.UserID);
1236   4              FpUserRegisterMgr.TimeCnt = Def_GuiTimeDelayCnt4s;
1237   4              #endif
1238   4            }
1239   3            else
1240   3            {
1241   4              FpUserRegisterMgr.Status = RegisterUserFail;
1242   4              FpUserRegisterMgr.ErrorType = MemoryIsFull;
1243   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1244   4              PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1245   4              Hardware_DelayMs(100);
1246   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                      #endif
1250   4              //GUI_Flag_RefreshLCD = bTRUE;
1251   4            }
1252   3          }
1253   2        }
1254   1        else if (FpUserRegisterMgr.Status == AddUserToFPM)
1255   1        {
1256   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1257   2          {
1258   3            FpUserRegisterMgr.UserID = Get_Availabe_FPuserID();
1259   3            
1260   3            RegisterFp(FpUserRegisterMgr.UserID-1);
1261   3            
1262   3            if (FpRegisterMgr.Status == success)
1263   3            {
1264   4              FpUserRegisterMgr.Status = RegisterUserSuccess;
1265   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1266   4              PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1267   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
1271   4              CheckMemoryMgr.FpUserNum+=1;
1272   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserID = FpUserRegisterMgr.UserID;
1273   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].RegisterStatus = Registered;
1274   4              FpUserMemoryMgr[FpUserRegisterMgr.UserID-1].UserPriority = User;
1275   4              AddFPuserIdToList(FpUserRegisterMgr.UserID);
1276   4            }
1277   3            else if (FpRegisterMgr.Status == fail)
1278   3            {
1279   4              FpUserRegisterMgr.Status = RegisterUserFail;
1280   4              FpUserRegisterMgr.ErrorType = FpRegisterMgr.ErrorType;
1281   4              FpUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1282   4              if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered ){
1283   5                PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Fingerprint);
1284   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,14,DuplicateFpStr,NormalDisplay);
                        #endif
1288   5                //GUI_Flag_RefreshLCD = bTRUE;
1289   5              }
1290   4              else
1291   4              {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 22  

1292   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
1293   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                        #endif
1297   5                //GUI_Flag_RefreshLCD = bTRUE;
1298   5              }
1299   4            }
1300   3          }
1301   2        }
1302   1        else if ( FpUserRegisterMgr.Status == RegisterUserSuccess )
1303   1        {
1304   2          
1305   2          if (--FpUserRegisterMgr.TimeCnt < 1 )   
1306   2          {
1307   3            //FpUserRegisterMgr.Status = StartFpUserRegister;
1308   3            GoToFpMenu();
1309   3            RefreshSystemSleepTime();
1310   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddFpUser);
                    #endif
1313   3          }
1314   2          DEBUG_MARK;
1315   2        }
1316   1        else if ( FpUserRegisterMgr.Status == RegisterUserFail )
1317   1        {   
1318   2          if ( FpUserRegisterMgr.ErrorType == UserIDisRegistered )
1319   2          {
1320   3          
1321   3          }
1322   2          else if ( FpUserRegisterMgr.ErrorType == SystemNoMaster )
1323   2          {
1324   3            
1325   3          }
1326   2          else if ( FpUserRegisterMgr.ErrorType == FingerPrintIsRegistered )
1327   2          {
1328   3            
1329   3          }
1330   2          else if ( FpUserRegisterMgr.ErrorType == MemoryIsFull )
1331   2          {
1332   3            
1333   3          }
1334   2          else
1335   2          {
1336   3            
1337   3          }
1338   2          if (FpUserRegisterMgr.TimeCnt-- < 1 )   
1339   2          {
1340   3            GoToFpMenu();
1341   3          }
1342   2          DEBUG_MARK;
1343   2        }
1344   1      }
1345          
1346          /*******************************************************/
1347          /*******************************************************/
1348          /*******************************************************/
1349          void ShowDeleteUserFp(void)//界面-删除用户指纹
1350          {
1351   1        #ifdef Function_Enable_ID_Del
1352   1        uint8_t voiceDelFailPleaseInput[] = {VOICE_Delete, VOICE_Fail, VOICE_PleaseInputID,DEF_VoiceSegmentEndFla
             -g};
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 23  

1353   1        if ( FpUserDeleteMgr.Status == StartFpUserDelete )
1354   1        {
1355   2          FpUserDeleteMgr.Status = InputUserID;
1356   2          DataInputMgr.Status = InputIdle;
1357   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1358   2        }
1359   1        if ( FpUserDeleteMgr.Status == InputUserID )
1360   1        {
1361   2            
1362   2            GUI_DataInputCreat(5,80,3,0x0000);
1363   2        
1364   2            if (DataInputMgr.Status == InputEnd)
1365   2            {
1366   3              FpUserDeleteMgr.UserID = DataInputMgr.Value;
1367   3              if ((FpUserDeleteMgr.UserID >= 1) && (FpUserDeleteMgr.UserID <= (DEF_MAX_FPMASTER + DEF_MAX_FPUSER)))
1368   3              {
1369   4                  ReportRegisterID(FPUSER, FpUserDeleteMgr.UserID);
1370   4                  FpUserDeleteMgr.TimeCnt = 4 * 64;
1371   4                  FpUserDeleteMgr.Status = ReportUserID;
1372   4                  DataInputMgr.Status = InputIdle;
1373   4              }
1374   3              else
1375   3              {
1376   4                  DataInputMgr.Status = InputIdle; // Reinput
1377   4                  PLAY_VOICE_TWOSEGMENT(VOICE_InputError, VOICE_PleaseInputID);
1378   4              }
1379   3            }
1380   2            else if  (DataInputMgr.Status == InputExit)
1381   2            {
1382   3              FpUserDeleteMgr.Status = DeleteUserFail;
1383   3              FpUserDeleteMgr.ErrorType = QUIT;
1384   3              FpUserDeleteMgr.TimeCnt = 0;
1385   3            }
1386   2        }
1387   1        else if (FpUserDeleteMgr.Status == ReportUserID)
1388   1        {
1389   2          if (FpUserDeleteMgr.TimeCnt-- < 1)
1390   2          {
1391   3            if (FpUserDeleteMgr.UserID <= 10 )
1392   3            {
1393   4              FpUserDeleteMgr.Status = InputUserID;
1394   4              DataInputMgr.Status = InputIdle;
1395   4              PLAY_VOICE_MULTISEGMENTS(voiceDelFailPleaseInput);
1396   4            }
1397   3            else
1398   3            {
1399   4              FpUserDeleteMgr.Status = CheckIfFpUserIDisBeUsed;
1400   4              CheckIfFpUserIDisRegistered.Status = StartCheckIfFpUserIDisRegistered;
1401   4            }
1402   3          }
1403   2        }
1404   1        else if (FpUserDeleteMgr.Status == CheckIfFpUserIDisBeUsed)
1405   1        {
1406   2          CheckIfFpUserIsRegistered(FpUserDeleteMgr.UserID-1);
1407   2          if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredSuccess )
1408   2          {
1409   3            if ( CheckIfFpUserIDisRegistered.UserIDisRegistered == bTRUE )
1410   3            {
1411   4              FpUserDeleteMgr.Status = DeleteUserFromFPM; 
1412   4              DataInputMgr.Status = InputIdle;  
1413   4              //GUI_Flag_RefreshLCD = bTRUE;
1414   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 24  

1415   3            else
1416   3            {
1417   4              FpUserDeleteMgr.Status = DeleteUserFail;
1418   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1419   4              FpUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1420   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1421   4              //GUI_Flag_RefreshLCD = bTRUE;
1422   4            }
1423   3          }
1424   2          else if ( CheckIfFpUserIDisRegistered.Status == CheckIfFpUserIDisRegisteredFail )
1425   2          {
1426   3            FpUserDeleteMgr.Status = DeleteUserFail;
1427   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1428   3            FpUserDeleteMgr.ErrorType = QUIT;
1429   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1430   3            //GUI_Flag_RefreshLCD = bTRUE;
1431   3          }
1432   2        }
1433   1        else if ( FpUserDeleteMgr.Status == DeleteUserFromFPM)
1434   1        {
1435   2          FPM_DeleteCharCmd(FpUserDeleteMgr.UserID-1,1);
1436   2          FpUserDeleteMgr.Status = WaitForDeleteUserACKfromFPM;
1437   2          FpUserDeleteMgr.TimeCnt = Def_FPMcmdTimeOutDelay;
1438   2          FpmAckMgr.Status = WaitACK;
1439   2        }
1440   1        else if (FpUserDeleteMgr.Status == WaitForDeleteUserACKfromFPM)
1441   1        {
1442   2          if (FpmAckMgr.Status == GotACK)
1443   2          {
1444   3            if ( FpmAckMgr.ErrorCode == Error_NONE)
1445   3            {
1446   4              FpUserDeleteMgr.Status = DeleteUserSuccess;
1447   4              //GUI_Flag_RefreshLCD = bTRUE;
1448   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1449   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1450   4              if (FpUserDeleteMgr.UserID <= 10)
1451   4              {
1452   5                CheckMemoryMgr.FpMasterNum--;
1453   5              }
1454   4              else
1455   4              {
1456   5                CheckMemoryMgr.FpUserNum -= 1;
1457   5              }
1458   4              FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserID = 0xFFFF;
1459   4              FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].RegisterStatus = UnRegistered;
1460   4              FpUserMemoryMgr[FpUserDeleteMgr.UserID-1].UserPriority = Undefined;
1461   4              DeleteFPuserIdFromList(FpUserDeleteMgr.UserID);
1462   4            }
1463   3            else
1464   3            {
1465   4              FpUserDeleteMgr.Status = DeleteUserFail;
1466   4              //GUI_Flag_RefreshLCD = bTRUE;
1467   4              FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1468   4              PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1469   4            }
1470   3            DEBUG_MARK;
1471   3          }
1472   2          else if (--FpUserDeleteMgr.TimeCnt < 1 )
1473   2          {
1474   3            FpUserDeleteMgr.Status = DeleteUserFail;
1475   3            FpmAckMgr.ErrorCode = Error_TimeOut;
1476   3            //GUI_Flag_RefreshLCD = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 25  

1477   3            FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1478   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1479   3          }
1480   2        }
1481   1        else if ( FpUserDeleteMgr.Status == DeleteUserSuccess )
1482   1        {
1483   2          if (--FpUserDeleteMgr.TimeCnt < 1 )   
1484   2          {
1485   3            UnlockModeJudgment();
1486   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteFpUser);
                    #endif
1489   3            GoToFpMenu();
1490   3          }
1491   2          DEBUG_MARK;
1492   2        }
1493   1        else if ( FpUserDeleteMgr.Status == DeleteUserFail )
1494   1        {
1495   2          if ( FpUserDeleteMgr.ErrorType == UserIDisNotRegistered )
1496   2          {
1497   3          }
1498   2          else
1499   2          {
1500   3          }
1501   2          if (FpUserDeleteMgr.TimeCnt-- < 1 )   
1502   2          {
1503   3            GoToFpMenu();
1504   3          }
1505   2          DEBUG_MARK;
1506   2        }
1507   1        #endif
1508   1      }
1509          /*******************************************************/
1510          /*******************************************************/
1511          /*******************************************************/
1512          void ShowDeleteAllUserFp(void)//界面-删除所有用户指纹
1513          {
1514   1        uint16_t i;
1515   1        
1516   1        if ( AllUserFpDeleteMgr.Status == StartAllUserFpDelete )
1517   1        {
1518   2          AllUserFpDeleteMgr.Status = WaitForUserConfirmDeleteAllFP;
1519   2          AllUserFpDeleteMgr.Selection = NO;
1520   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1521   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
1522   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1526   2        }
1527   1        else if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
1528   1        {
1529   2          //if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
1530   2          //{
1531   2            
1532   2          //}
1533   2        }
1534   1        else if ( AllUserFpDeleteMgr.Status == SendDeleteAllUserFpCmdToFPM )
1535   1        {
1536   2          
1537   2          FPM_DeleteCharCmd(DEF_MAX_FPMASTER,DEF_MAX_FPUSER);
1538   2          AllUserFpDeleteMgr.Status = WaitForDeleteAllUserFpCmdACKfromFPM;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 26  

1539   2          AllUserFpDeleteMgr.TimeCnt =Def_FPMcmdTimeOutDelay;
1540   2          //GUI_Flag_RefreshLCD = bTRUE;
1541   2          FpmAckMgr.Status = WaitACK;
1542   2        }
1543   1        
1544   1        else if ( AllUserFpDeleteMgr.Status == WaitForDeleteAllUserFpCmdACKfromFPM )
1545   1            {
1546   2              if (FpmAckMgr.Status == GotACK)
1547   2              {
1548   3                if ( FpmAckMgr.ErrorCode == Error_NONE)
1549   3                {
1550   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserSuccess;
1551   4                  //GUI_Flag_RefreshLCD = bTRUE;
1552   4                  FpUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1553   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1554   4                  CheckMemoryMgr.FpUserNum=0;
1555   4                  for (i=DEF_MAX_FPMASTER;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
1556   4                  {
1557   5                    FpUserMemoryMgr[i].UserID = 0xFFFF;
1558   5                    FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
1559   5                    FpUserMemoryMgr[i].UserPriority = Undefined;
1560   5                  }
1561   4                  DeleteAllFPuserIdFromList();
1562   4                }
1563   3                else
1564   3                {
1565   4                  AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1566   4                  //GUI_Flag_RefreshLCD = bTRUE;
1567   4                  AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1568   4                  PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1569   4                }
1570   3                DEBUG_MARK;
1571   3              }
1572   2            else if (--FpUserDeleteMgr.TimeCnt < 1 )
1573   2              {
1574   3                AllUserFpDeleteMgr.Status = DeleteAllFpUserFail;
1575   3                FpmAckMgr.ErrorCode = Error_TimeOut;
1576   3                //GUI_Flag_RefreshLCD = bTRUE;
1577   3                AllUserFpDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1578   3                PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Fail);
1579   3              }
1580   2            }
1581   1        
1582   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
1583   1          {
1584   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
1588   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1589   2            {
1590   3              GoToFpMenu();
1591   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllFpUser);
                      #endif
1594   3            }
1595   2          }
1596   1        else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
1597   1          {
1598   2            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 27  

                    #endif
1602   2            if (--AllUserFpDeleteMgr.TimeCnt < 1 )
1603   2            {
1604   3              GoToFpMenu();
1605   3            }
1606   2          }
1607   1        else if ( AllUserFpDeleteMgr.Status == EXIT )
1608   1          {
1609   2            GoToFpMenu();
1610   2          }
1611   1        
1612   1      }
1613          
1614          /*******************************************************/
1615          /*******************************************************/
1616          /*******************************************************/
1617          /*******************************************************/
1618          /*******************************************************/
1619          /*******************************************************/
1620          void ShowDeleteCardUser(void)//界面-删除磁卡用户
1621          {
1622   1        #ifdef Function_Enable_ID_Del
1623   1        if ( CardUserDeleteMgr.Status == StartCardUserDelete )
1624   1        {
1625   2          CardUserDeleteMgr.Status = InputCardUserID;
1626   2          DataInputMgr.Status = InputIdle;
1627   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
1628   2        }
1629   1        if ( CardUserDeleteMgr.Status == InputCardUserID )
1630   1        {
1631   2          //DisEN16x8Str(6,0,CardUserIDRangeStrEn,NormalDisplay);
1632   2      //    DisOneDigital16x8(6,24,DEF_MAX_CARDUSER/100,NormalDisplay);
1633   2      //    DisOneDigital16x8(6,32,DEF_MAX_CARDUSER%100/10,NormalDisplay);
1634   2      //    DisOneDigital16x8(6,40,DEF_MAX_CARDUSER%10,NormalDisplay);
1635   2          
1636   2          GUI_DataInputCreat(6,68,3,0x0000);
1637   2      
1638   2          if (DataInputMgr.Status == InputEnd)
1639   2          {
1640   3            CardUserDeleteMgr.UserID = DataInputMgr.Value;
1641   3            if ( CardUserDeleteMgr.UserID > DEF_MAX_CARDUSER )        
1642   3            {
1643   4              DataInputMgr.Status = InputIdle;    //Reinput
1644   4              PLAY_VOICE_TWOSEGMENT(VOICE_InputError, VOICE_PleaseInputID);
1645   4            }
1646   3            else
1647   3            {
1648   4              ReportRegisterID(CARDUSER, CardUserDeleteMgr.UserID);
1649   4              CardUserDeleteMgr.TimeCnt = 4 * 64;
1650   4              CardUserDeleteMgr.Status = ReportCardUserID;
1651   4            }
1652   3          }
1653   2          else if (DataInputMgr.Status == InputExit)
1654   2          {
1655   3              CardUserDeleteMgr.Status = Fail;
1656   3              CardUserDeleteMgr.ErrorType = QUIT;
1657   3              CardUserDeleteMgr.TimeCnt = 0;
1658   3          }
1659   2        }
1660   1        else if (CardUserDeleteMgr.Status == ReportCardUserID)
1661   1        {
1662   2          if (CardUserDeleteMgr.TimeCnt-- < 1)
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 28  

1663   2          {
1664   3            if (IfCardUserIDisRegistered(CardUserDeleteMgr.UserID) == bTRUE)
1665   3            {
1666   4                DeleteCardUserfromMemory(CardUserDeleteMgr.UserID);
1667   4                CardUserDeleteMgr.Status = Success;
1668   4                CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1669   4                // GUI_Flag_RefreshLCD = bTRUE;
1670   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete, VOICE_Success);
1671   4                if (CheckMemoryMgr.CardUserNum > 0)
1672   4                {
1673   5                    CheckMemoryMgr.CardUserNum -= 1;
1674   5                }
1675   4            }
1676   3            else
1677   3            {
1678   4                CardUserDeleteMgr.Status = Fail;
1679   4                CardUserDeleteMgr.ErrorType = UserIDisNotRegistered;
1680   4                CardUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
1681   4                // GUI_Flag_RefreshLCD = bTRUE;
1682   4                PLAY_VOICE_TWOSEGMENT(VOICE_Delete, VOICE_Fail);
1683   4            }
1684   3          }
1685   2        }
1686   1        else if (CardUserDeleteMgr.Status == Success)
1687   1        {
1688   2          if (--CardUserDeleteMgr.TimeCnt < 1)
1689   2          {
1690   3            GoToCardMenu();
1691   3            UnlockModeJudgment();
1692   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteCardUser);
                    #endif
1695   3          }
1696   2        }
1697   1        else if (CardUserDeleteMgr.Status == Fail)
1698   1        {
1699   2          if (CardUserDeleteMgr.ErrorType == UserIDisNotRegistered)
1700   2          {
1701   3          }
1702   2          else
1703   2          {
1704   3          }
1705   2          if (CardUserDeleteMgr.TimeCnt-- < 1)
1706   2          {
1707   3            GoToCardMenu();
1708   3          }
1709   2        }
1710   1        #endif
1711   1      }
1712          
1713          /*******************************************************/
1714          /*******************************************************/
1715          /*******************************************************/
1716          void ShowDeleteAllCardUser(void)//界面-删除全部磁卡用户
1717          {
1718   1        
1719   1        if ( AllCardUserDeleteMgr.Status == StartAllCardUserDelete )
1720   1        {
1721   2          AllCardUserDeleteMgr.Status = WaitForUserConfirmDeleteAllCard;
1722   2          AllCardUserDeleteMgr.Selection = NO;
1723   2          //PLAY_VOICE_ONESEGMENT(VOICE_ConfirmToDelete);
1724   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 29  

1725   2        }
1726   1        else if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
1727   1        { 
1728   2          #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                    DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
1732   2        }
1733   1        else if ( AllCardUserDeleteMgr.Status == DeletingAllCardUser )
1734   1        {
1735   2          
1736   2          DeleteAllCardUserfromMemory();
1737   2          AllCardUserDeleteMgr.TimeCnt =Def_MessageBoxTimeDelay;
1738   2          AllCardUserDeleteMgr.Status = Success;
1739   2          //GUI_Flag_RefreshLCD = bTRUE;
1740   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
1741   2          CheckMemoryMgr.CardUserNum =0;
1742   2        }
1743   1        else if ( AllCardUserDeleteMgr.Status == Success )
1744   1        {
1745   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                  #endif
1749   2          if (AllCardUserDeleteMgr.TimeCnt-- < 1 )
1750   2          {
1751   3            GoToCardMenu();
1752   3            UnlockModeJudgment();
1753   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeleteAllCardUser);
                    #endif
1756   3          }
1757   2        }
1758   1        else if ( AllCardUserDeleteMgr.Status == CardUserEXIT )
1759   1        {
1760   2          GoToCardMenu();
1761   2        }
1762   1      }
1763          
1764          
1765          /*******************************************************/
1766          /*******************************************************/
1767          /*******************************************************/
1768          void ShowRegisterPasscodeUser(void)//注册密码用户
1769          {
1770   1        uint8_t i;
1771   1        
1772   1        if (PasscodeUserRegisterMgr.Status == StartPasscodeUserRegister)
1773   1        {
1774   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
1775   2            &&(PasscodeUserRegisterMgr.UserPriority == User)
1776   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
1777   2            )
1778   2          {
1779   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1780   3            PasscodeUserRegisterMgr.ErrorType = SystemNoMaster;
1781   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1782   3            PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
1783   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                    #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 30  

1787   3          }
1788   2          else if (   ((PasscodeUserRegisterMgr.UserPriority == Master)&&(!(CheckMemoryMgr.PasscodeMasterNum < DEF_
             -MAX_PASSCODEMASTER)))
1789   2                ||((PasscodeUserRegisterMgr.UserPriority == User)&&(!(CheckMemoryMgr.PasscodeUserNum < DEF_MAX_PASSCO
             -DEUSER)))  )
1790   2          {
1791   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1792   3            PasscodeUserRegisterMgr.ErrorType = MemoryIsFull;
1793   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1794   3            PLAY_VOICE_ONESEGMENT(VOICE_UsersAreFull);
1795   3            Hardware_DelayMs(100);
1796   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,UsersFullStr,NormalDisplay);
                    #endif
1800   3          }
1801   2          else
1802   2          {
1803   3            PasscodeUserRegisterMgr.Status = InputPasscodeUserID;
1804   3            DataInputMgr.Status = InputIdle;
1805   3            for (i=0;i<12;i++)
1806   3            {
1807   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1808   4            }
1809   3            PasscodeUserRegisterMgr.TimeCnt = 0;
1810   3            #ifdef Function_Enable_ID_Del
1811   3            if (PasscodeUserRegisterMgr.UserPriority == Master)
1812   3            {
1813   4              PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1814   4            }
1815   3            else
1816   3            {
1817   4              PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1818   4            }
1819   3            ReportRegisterID(PASSCODEUSER,PasscodeUserRegisterMgr.UserID);
1820   3            PasscodeUserRegisterMgr.TimeCnt = Def_GuiTimeDelayCnt4s;
1821   3            #endif
1822   3          }
1823   2        }
1824   1        else if  (PasscodeUserRegisterMgr.Status == InputPasscodeUserID)
1825   1        {
1826   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
1827   2          {
1828   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1829   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
1830   3            DataInputMgr.Status = InputIdle;
1831   3            //PasscodeUserRegisterMgr.UserID = DataInputMgr.Value;
1832   3            if (PasscodeUserRegisterMgr.UserPriority == Master)
1833   3            {
1834   4              PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeMasterID();
1835   4            }
1836   3            else
1837   3            {
1838   4              PasscodeUserRegisterMgr.UserID = Get_Availabe_PasscodeUserID();
1839   4            }
1840   3            
1841   3            PasscodeInputMgr.Point = 0x00;
1842   3            PasscodeInputMgr.PasscodeLen = 12;
1843   3            PasscodeInputMgr.Status = PasscodeInputStart;
1844   3            for (i=0;i<12;i++)
1845   3            {
1846   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 31  

1847   4            }
1848   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
1849   3            //GUI_Flag_RefreshLCD = bTRUE;
1850   3            if (PasscodeUserRegisterMgr.UserPriority == Master)
1851   3            {
1852   4              PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
1853   4            }
1854   3            else
1855   3            {
1856   4              PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_User,VOICE_Password);
1857   4            }
1858   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                    #endif
1862   3          }
1863   2        }
1864   1        else if  ( PasscodeUserRegisterMgr.Status == InputFirstPasscode)
1865   1        {
1866   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_PasscodeInputCreat(5,0);
                  #endif
1870   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1871   2          {
1872   3            if ( PasscodeInputMgr.Point > 5 )
1873   3            {
1874   4              for (i=0;i<12;i++)
1875   4              {
1876   5                PasscodeBUFF1[i] = PasscodeInputMgr.InputBuff[i];
1877   5              }
1878   4              PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1879   4              PasscodeInputMgr.Point = 0x00;
1880   4              PasscodeInputMgr.PasscodeLen = 12;
1881   4              PasscodeInputMgr.Status = PasscodeInputStart;
1882   4              for (i=0;i<12;i++)
1883   4              {
1884   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1885   5              }
1886   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1887   4              //GUI_Flag_RefreshLCD = bTRUE;
1888   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
1889   4              {
1890   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_Administrator,VOICE_Password);
1891   5              }
1892   4              else
1893   4              {
1894   5                PLAY_VOICE_THREESEGMENT(VOICE_Again,VOICE_User,VOICE_Password);
1895   5              }
1896   4            }
1897   3            else
1898   3            {
1899   4              PasscodeUserRegisterMgr.Status = InputFirstPasscode;
1900   4              PasscodeInputMgr.Point = 0x00;
1901   4              PasscodeInputMgr.PasscodeLen = 12;
1902   4              PasscodeInputMgr.Status = PasscodeInputStart;
1903   4              for (i=0;i<12;i++)
1904   4              {
1905   5                PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1906   5              }
1907   4              PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;
1908   4              //GUI_Flag_RefreshLCD = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 32  

1909   4            }
1910   3          }
1911   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1912   2          {
1913   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1914   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1915   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1916   3          }
1917   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                  #endif
1920   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1921   2          {
1922   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1923   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1924   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1925   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1926   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1930   3          } 
1931   2        }
1932   1        else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
1933   1        {
1934   2          GUI_PasscodeInputCreat(5,0);
1935   2      
1936   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
1937   2          {
1938   3            if ( PasscodeInputMgr.Point > 5 )
1939   3              {
1940   4                PasscodeUserRegisterMgr.Status = CompareTwoPasscode;  
1941   4                //GUI_Flag_RefreshLCD = bTRUE;
1942   4              }
1943   3            else
1944   3              {
1945   4                PasscodeUserRegisterMgr.Status = InputSecondPasscode;
1946   4                PasscodeInputMgr.Point = 0x00;
1947   4                PasscodeInputMgr.PasscodeLen = 12;
1948   4                PasscodeInputMgr.Status = PasscodeInputStart;
1949   4                for (i=0;i<12;i++)
1950   4                {
1951   5                  PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
1952   5                }
1953   4                PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay; 
1954   4                //GUI_Flag_RefreshLCD = bTRUE;
1955   4              }
1956   3          }
1957   2          else if ( PasscodeInputMgr.Status == PasscodeInputExit )
1958   2          {
1959   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1960   3            PasscodeUserRegisterMgr.ErrorType = QUIT;
1961   3            PasscodeUserRegisterMgr.TimeCnt = 1;
1962   3          }
1963   2          else if ( PasscodeUserRegisterMgr.OverTimeCnt-- < 1 )
1964   2          {
1965   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
1966   3            PasscodeUserRegisterMgr.ErrorType = TimeOut;
1967   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
1968   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation, VOICE_Fail);
1969   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 33  

                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
1973   3          } 
1974   2        }
1975   1        else if ( PasscodeUserRegisterMgr.Status == CompareTwoPasscode )
1976   1        {
1977   2          if (GUI_CompareTwoPasscodes(PasscodeBUFF1,PasscodeInputMgr.InputBuff) == bTRUE)
1978   2          {
1979   3            if (PasscodeIdendify(PasscodeInputMgr.InputBuff) == 0x00 )  //passcode is not be used
1980   3            {
1981   4              if (SavePasscodeUserToMemory(PasscodeInputMgr.InputBuff,PasscodeUserRegisterMgr.UserID) == S_SUCCESS)
1982   4              {
1983   5                PasscodeUserRegisterMgr.Status = RegisterPasscodeUserSuccess;
1984   5                PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
1985   5                //GUI_Flag_RefreshLCD = bTRUE;
1986   5                PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
1987   5                #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                        #endif
1991   5                if (PasscodeUserRegisterMgr.UserPriority == Master){
1992   6                  CheckMemoryMgr.PasscodeMasterNum+=1;
1993   6                }
1994   5                else{
1995   6                  CheckMemoryMgr.PasscodeUserNum+=1;
1996   6                }
1997   5              }
1998   4              else
1999   4              {
2000   5                //目前不返回失败
2001   5              }
2002   4            }
2003   3            else
2004   3            {
2005   4              PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
2006   4              PasscodeUserRegisterMgr.ErrorType = PasscodeIsBeUsed;
2007   4              PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;
2008   4              PLAY_VOICE_TWOSEGMENT(VOICE_Duplicate,VOICE_Password);
2009   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,PasscodeisBeUsedStr,NormalDisplay);
                      #endif
2013   4            }
2014   3          }
2015   2          else
2016   2          {
2017   3            PasscodeUserRegisterMgr.Status = RegisterPasscodeUserFail;
2018   3            PasscodeUserRegisterMgr.ErrorType = TwoPasscodesDoNotMatch;
2019   3            PasscodeUserRegisterMgr.TimeCnt = Def_MessageBoxTimeDelay;  
2020   3            PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Fail);
2021   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
                    #endif
2025   3          }
2026   2        }
2027   1        else if ( PasscodeUserRegisterMgr.Status ==  RegisterPasscodeUserSuccess )
2028   1        {
2029   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
2030   2          {
2031   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 34  

                    #else
2034   3            
2035   3            if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2036   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
2037   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x01)){
2038   4              /*
2039   4              FpUserRegisterMgr.Status = AddUserToFPM;  
2040   4              FpRegisterMgr.Status = FPMcmdStart;
2041   4              FpUserRegisterMgr.UserID=0x01;
2042   4              CurrentScreen = SCREEN_RegisterMasterFp;
2043   4              */
2044   4              GoToMainMenu();
2045   4            }
2046   3            else
2047   3            {
2048   4              GoToPasswordMenu();
2049   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
2050   4            }
2051   3            #endif
2052   3            
2053   3      //      #ifdef Function_TuyaWifi
2054   3      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
2055   3      //      #endif
2056   3            
2057   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(AddPasscodeUser);
                    #endif
2060   3          }
2061   2        }
2062   1        else if ( PasscodeUserRegisterMgr.Status == RegisterPasscodeUserFail )
2063   1        {
2064   2          if ( PasscodeUserRegisterMgr.ErrorType == UserIDisRegistered)
2065   2          {
2066   3      
2067   3          }
2068   2          else if ( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2069   2          {
2070   3      
2071   3          }
2072   2          else if ( PasscodeUserRegisterMgr.ErrorType == PasscodeIsBeUsed )
2073   2          {
2074   3      
2075   3          }
2076   2          else if ( PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2077   2          {
2078   3      
2079   3          }
2080   2          else if ( PasscodeUserRegisterMgr.ErrorType == QUIT )
2081   2          {
2082   3          
2083   3          }
2084   2          else
2085   2          {
2086   3      
2087   3          }
2088   2        
2089   2          if ( PasscodeUserRegisterMgr.TimeCnt-- < 1 )
2090   2          {
2091   3            if  (   (PasscodeUserRegisterMgr.ErrorType == QUIT )
2092   3                &&(CheckMemoryMgr.FpMasterNum == 0x00 )
2093   3                &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2094   3              )
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 35  

2095   3            {
2096   4              CurrentScreen = SCREEN_Main;
2097   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2098   4              FpIdentifyMgr.Status = FPMcmdStart;
2099   4              CardIdentifyMgr.Status = ReadingCardID;
2100   4            }
2101   3            else if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2102   3            &&(PasscodeUserRegisterMgr.UserPriority == Master)
2103   3            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2104   3            )
2105   3            {
2106   4              CurrentScreen = SCREEN_Main;
2107   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2108   4              FpIdentifyMgr.Status = FPMcmdStart;
2109   4              CardIdentifyMgr.Status = ReadingCardID;
2110   4            }
2111   3            else if ( (PasscodeUserRegisterMgr.ErrorType == MemoryIsFull )
2112   3              ||(PasscodeUserRegisterMgr.ErrorType == QUIT )
2113   3              ||( PasscodeUserRegisterMgr.ErrorType == SystemNoMaster )
2114   3              )
2115   3            {
2116   4              if (PasscodeUserRegisterMgr.UserPriority == Master)
2117   4              {
2118   5                GoToPasswordMenu();
2119   5              }
2120   4              else{
2121   5                GoToPasswordMenu();
2122   5              }
2123   4            }
2124   3            else
2125   3            {
2126   4              //PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
2127   4              GoToPasswordMenu();
2128   4            }
2129   3          }
2130   2        }
2131   1      }
2132          
2133          /*******************************************************/
2134          /*******************************************************/
2135          /*******************************************************/
2136          void ShowDeletePasscodeUser(void)//界面-删除密码用户
2137          {
2138   1        #ifdef Function_Enable_ID_Del
2139   1        uint8_t voiceDelFailPleaseInput[] = {VOICE_Delete, VOICE_Fail, VOICE_PleaseInputID,DEF_VoiceSegmentEndFla
             -g};
2140   1        if ( PasscodeUserDeleteMgr.Status == StartPasscodeUserDelete )
2141   1        {
2142   2          PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
2143   2          DataInputMgr.Status = InputIdle;
2144   2          PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputID);
2145   2        }
2146   1        else if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
2147   1        {
2148   2          #ifdef Function_ScreenDisplay
                  if (PasscodeUserDeleteMgr.UserPriority == Master)
                  {
                    DisOneDigital16x8(6,8,1,NormalDisplay);
                    DisOneDigital16x8(6,32,DEF_MAX_PASSCODEMASTER%10,NormalDisplay);
                  }
                  else
                  {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 36  

                    DisOneDigital16x8(6,8,(DEF_MAX_PASSCODEMASTER+1)%10,NormalDisplay);
                    DisOneDigital16x8(6,24,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)/10,NormalDisplay);
                    DisOneDigital16x8(6,32,(DEF_MAX_PASSCODEUSER+DEF_MAX_PASSCODEMASTER)%10,NormalDisplay);
                  }
                  
                  GUI_DataInputCreat(6,56,2,0x0000);
                  #endif
2163   2          if (DataInputMgr.Status == InputEnd)
2164   2          {
2165   3            PasscodeUserDeleteMgr.UserID = DataInputMgr.Value;
2166   3            if (PasscodeUserDeleteMgr.UserID >= 1 &&
2167   3                PasscodeUserDeleteMgr.UserID <= DEF_MAX_PASSCODEMASTER + DEF_MAX_PASSCODEUSER)
2168   3            {
2169   4                PasscodeUserDeleteMgr.Status = ReportPasscodeUserID;
2170   4                PasscodeUserDeleteMgr.TimeCnt = 4 * 64;
2171   4                ReportRegisterID(PASSCODEUSER, PasscodeUserDeleteMgr.UserID);
2172   4                DataInputMgr.Status = InputIdle;
2173   4            }
2174   3            else
2175   3            {
2176   4                DataInputMgr.Status = InputIdle; // Reinput
2177   4                PLAY_VOICE_TWOSEGMENT(VOICE_InputError, VOICE_PleaseInputID);
2178   4            }
2179   3          }
2180   2          else if  (DataInputMgr.Status == InputExit)
2181   2          {
2182   3            PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2183   3            PasscodeUserDeleteMgr.ErrorType = QUIT;
2184   3            PasscodeUserDeleteMgr.TimeCnt = 0;
2185   3          }
2186   2        }
2187   1        else if (PasscodeUserDeleteMgr.Status == ReportPasscodeUserID)
2188   1        {
2189   2          if (PasscodeUserDeleteMgr.TimeCnt-- < 1)
2190   2          {
2191   3            if (PasscodeUserDeleteMgr.UserID <= 2)
2192   3            {
2193   4                FpUserDeleteMgr.Status = InputUserID;
2194   4                DataInputMgr.Status = InputIdle;
2195   4                PLAY_VOICE_MULTISEGMENTS(voiceDelFailPleaseInput);
2196   4                PasscodeUserDeleteMgr.Status = InputPasscodeUserID;
2197   4            }
2198   3            else
2199   3            {
2200   4                PasscodeUserDeleteMgr.Status = CheckIfPasscodeUserIDisRegistered;
2201   4            }
2202   3          }
2203   2        }
2204   1        else if (PasscodeUserDeleteMgr.Status == CheckIfPasscodeUserIDisRegistered)
2205   1        {
2206   2          if (IfPasscodeUserIDisRegistered(PasscodeUserDeleteMgr.UserID) == bTRUE)
2207   2          {
2208   3            DeletePasscodeUserfromMemory(PasscodeUserDeleteMgr.UserID);
2209   3            PasscodeUserDeleteMgr.Status = DeletePasscodeUserSuccess;
2210   3            PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2211   3            // GUI_Flag_RefreshLCD = bTRUE;
2212   3            PLAY_VOICE_TWOSEGMENT(VOICE_Delete, VOICE_Success);
2213   3            if (PasscodeUserDeleteMgr.UserID <= 2)
2214   3            {
2215   4                CheckMemoryMgr.PasscodeMasterNum -= 1;
2216   4            }
2217   3            else
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 37  

2218   3            {
2219   4                CheckMemoryMgr.PasscodeUserNum -= 1;
2220   4            }
2221   3          }
2222   2          else
2223   2          {
2224   3              PasscodeUserDeleteMgr.Status = DeletePasscodeUserFail;
2225   3              PasscodeUserDeleteMgr.ErrorType = UserIDisNotRegistered;
2226   3              PasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2227   3              PLAY_VOICE_TWOSEGMENT(VOICE_Delete, VOICE_Fail);
2228   3          }
2229   2        }
2230   1        else if (PasscodeUserDeleteMgr.Status == DeletePasscodeUserSuccess)
2231   1        {
2232   2          if (--PasscodeUserDeleteMgr.TimeCnt < 1)
2233   2          {
2234   3            PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
2235   3            UnlockModeJudgment();
2236   3            #ifdef Function_EventLog
                    GUI_CreatAndSaveLog(DeletePasscodeUser);
                    #endif
2239   3            GoToPasswordMenu();
2240   3          }
2241   2        }
2242   1        else if (PasscodeUserDeleteMgr.Status == DeletePasscodeUserFail)
2243   1        {
2244   2          if (PasscodeUserDeleteMgr.ErrorType == UserIDisNotRegistered)
2245   2          {
2246   3          }
2247   2          else if (PasscodeUserDeleteMgr.ErrorType == CanNotDeleteLastOneMaster)
2248   2          {
2249   3          }
2250   2          else
2251   2          {
2252   3          }
2253   2      
2254   2          if (PasscodeUserDeleteMgr.TimeCnt-- < 1)
2255   2          {
2256   3              GoToPasswordMenu();
2257   3          }
2258   2        }
2259   1        #endif
2260   1      }
2261          
2262          /*******************************************************/
2263          /*******************************************************/
2264          /*******************************************************/
2265          void ShowDeleteAllPasscodeUser(void)//界面-删除全部密码用户
2266          {
2267   1        //uint8_t i;
2268   1        
2269   1        if ( AllPasscodeUserDeleteMgr.Status == StartAllPasscodeUserDelete )
2270   1        {
2271   2          AllPasscodeUserDeleteMgr.Status = WaitForDeleteAllPasscodeUserConfirm;
2272   2          AllPasscodeUserDeleteMgr.Selection = NO;
2273   2          PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
2274   2        }
2275   1        else if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
2276   1        {
2277   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 38  

                  #endif
2281   2        }
2282   1        else if ( AllPasscodeUserDeleteMgr.Status == DeletingAllPasscodeUser )
2283   1        {
2284   2          DeleteAllPasscodeUserfromMemory();
2285   2          AllPasscodeUserDeleteMgr.TimeCnt = Def_MessageBoxTimeDelay;
2286   2          AllPasscodeUserDeleteMgr.Status = DeleteAllPasscodeUserSuccess;
2287   2          GUI_Flag_RefreshLCD = bTRUE;
2288   2          PLAY_VOICE_TWOSEGMENT(VOICE_Delete,VOICE_Success);
2289   2          CheckMemoryMgr.PasscodeUserNum = 0;
2290   2      //    #ifdef Function_TuyaWifi
2291   2      //      WifiMgr.PostMgr.Flag.Bits.PasswordSync = 1;
2292   2      //    #endif
2293   2        }
2294   1        else if ( AllPasscodeUserDeleteMgr.Status == DeleteAllPasscodeUserSuccess )
2295   1          {
2296   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
2299   2            if (AllPasscodeUserDeleteMgr.TimeCnt-- < 1 )
2300   2            {
2301   3              GoToPasswordMenu();
2302   3              UnlockModeJudgment();
2303   3              #ifdef Function_EventLog
                      GUI_CreatAndSaveLog(DeleteAllPasscodeUser);
                      #endif
2306   3            }
2307   2          }
2308   1        else if  ( AllPasscodeUserDeleteMgr.Status == PasscodeUserEXIT )
2309   1          {
2310   2            GoToPasswordMenu();
2311   2          }
2312   1      }
2313          
2314          /*******************************************************/
2315          /*******************************************************/
2316          /*******************************************************/
2317          void ShowTimeSetting(void)//界面-时间设定
2318          {
2319   1        #ifdef Function_ScreenDisplay
                code uint8_t TitleStr[]={HZ_shi,HZ_jian,HZ_she,HZ_ding,HZ_end};             //时间设定
              
                code uint8_t YearMonthDayStrEn[]={"2020-01-01"};//初始值
                
                code uint8_t TimeStrEn[]={"23:01:01"};
              
                DisHZ16x14Str(0,28,TitleStr,NormalDisplay);
              
                DisEN16x8Str(3,24,YearMonthDayStrEn,NormalDisplay);//显示字符串2020-01-01
                DisBcdDigital16x8(3,40,TempSystemTime.year,NormalDisplay);//40-24=16，即把2019的19覆盖掉，20不覆盖 
                DisBcdDigital16x8(3,64,TempSystemTime.month,NormalDisplay);
                DisBcdDigital16x8(3,88,TempSystemTime.date,NormalDisplay);
                
                DisEN16x8Str(6,24,TimeStrEn,NormalDisplay);
                DisBcdDigital16x8(6,24,TempSystemTime.hour,NormalDisplay);
                DisBcdDigital16x8(6,48,TempSystemTime.minute,NormalDisplay);
                DisBcdDigital16x8(6,72,TempSystemTime.second,NormalDisplay);  
              
                if ( (TimeSettingMgr.Status == SetYearMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,40,TempSystemTime.year>>4,InverseDisplay);//高4位移至低4位显示      
                }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 39  

                else if ( (TimeSettingMgr.Status == SetYearMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,48,TempSystemTime.year&0x0F,InverseDisplay);//取低4位显示
                }
                else if ( (TimeSettingMgr.Status == SetMonthMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,64,TempSystemTime.month>>4,InverseDisplay);   
                }
                else if ( (TimeSettingMgr.Status == SetMonthMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,72,TempSystemTime.month&0x0F,InverseDisplay); 
                }
                else if ( (TimeSettingMgr.Status == SetDateMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,88,TempSystemTime.date>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetDateMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(3,96,TempSystemTime.date&0x0F,InverseDisplay);  
                }
                
                else if ( (TimeSettingMgr.Status == SetHourMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,24,TempSystemTime.hour>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetHourMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,32,TempSystemTime.hour&0x0F,InverseDisplay);  
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,48,TempSystemTime.minute>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetMinuteMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,56,TempSystemTime.minute&0x0F,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMajor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,72,TempSystemTime.second>>4,InverseDisplay);    
                }
                else if ( (TimeSettingMgr.Status == SetSecondMinor)&&(GUI_ToggleFlag_05s==0x01) )
                {
                  DisOneDigital16x8(6,80,TempSystemTime.second&0x0F,InverseDisplay);  
                }
                #endif
2388   1      }
2389          
2390          
2391          /*******************************************************/
2392          /*******************************************************/
2393          /*******************************************************/
2394          #ifdef Function_ScreenDisplay
              //code uint8_t ReplaceBatteryStr1En[]={"Low Power,Pls"};
              //code uint8_t ReplaceBatteryStr2En[]={"Replace Battery"};
              #endif
2398          void ShowLowBattery(void)//低电压界面
2399          {
2400   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,NormalDisplay);
                DisImage(5,4,120,24,Icon_ReplaceBattery,NormalDisplay);
                #endif  
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 40  

2404   1        if ( BatteryMgr.LowBatteryProtectionEnabled == bFALSE)
2405   1        {
2406   2          if (--BatteryMgr.TimeCnt < 1 )
2407   2          {
2408   3            CurrentScreen = SCREEN_Main;
2409   3            FpIdentifyMgr.Status = FPMcmdStart;
2410   3            CardIdentifyMgr.Status = ReadingCardID;
2411   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2412   3            if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
2413   3            {
2414   4              RefreshSystemSleepTime();
2415   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseAddMasterFirst);
2416   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,14,AddMasterStr,NormalDisplay);
                      #endif
2420   4            }
2421   3            else
2422   3            {
2423   4              //PLAY_VOICE_ONESEGMENT(VOICE_PleasePutFingerOrCardOrPasscode);
2424   4            }
2425   3          }
2426   2        }
2427   1      }
2428          
2429          
2430          /*******************************************************/
2431          /*******************************************************/
2432          /*******************************************************/
2433          void ShowLanguageSetting(void)//语言设定
2434          {
2435   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2436   1        {
2437   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2438   2          {
2439   3            if ( VoiceMenuMgr.MenuPoint < 2 )
2440   3            {
2441   4              PLAY_VOICE_MULTISEGMENTS_FIXED(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2442   4            }
2443   3            else
2444   3            {
2445   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetLanguageBuff[VoiceMenuMgr.MenuPoint]);
2446   4            }
2447   3            VoiceMenuMgr.MenuPoint++;
2448   3          }
2449   2        }
2450   1      }
2451          
2452          /*******************************************************/
2453          /*******************************************************/
2454          //uint8_t VoiceWait=0;
2455          /*******************************************************/
2456          void ShowVolumeSetting(void)//声音设定
2457          { 
2458   1        #ifdef Function_ScreenDisplay
                code uint8_t VoiceOnStr[]={ZF_1,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_kai,HZ_end};  //声音开  
              //  code uint8_t VoiceOnStrEn[]={"1.Voice On"};             //声音开  
                code uint8_t VoiceOffStr[]={ZF_2,ZF_xiaoshudian,HZ_yuyan,HZ_yin,HZ_kongge,HZ_guanbi,HZ_end};  //声音关  
              //  code uint8_t VoiceOffStrEn[]={"2.Voice Off"};             //声音关  
                
                DisHZ16x14Str(0,4,VoiceOnStr,NormalDisplay);
                DisHZ16x14Str(2,4,VoiceOffStr,NormalDisplay);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 41  

                #endif
2467   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2468   1        {
2469   2          {
2470   3            if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2471   3            {
2472   4              PLAY_VOICE_MULTISEGMENTS(VolumeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2473   4              VoiceMenuMgr.MenuPoint++;
2474   4            }
2475   3          }
2476   2        } 
2477   1      }
2478          
2479          /*******************************************************/
2480          /*******************************************************/
2481          /*******************************************************/
2482          void ShowMemoryUsage(void)//内存使用情况
2483          {
2484   1        
2485   1      }
2486          
2487          /*******************************************************/
2488          /*******************************************************/
2489          /*******************************************************/
2490          void ShowManagerIdentify(void)//管理员认证
2491          {
2492   1        uint8_t i;
2493   1        #ifdef Function_ScreenDisplay
                code uint8_t IdentifyManagerStr[]={HZ_yan,HZ_zheng,HZ_guan,HZ_li,HZ_yuan,HZ_end};
              //  code uint8_t IdentifyManagerStrEn[]={"Identify Manager"};
                code uint8_t IdentifySuccessStr[]={HZ_yan,HZ_zheng,HZ_cheng,HZ_gong,HZ_end};
              //  code uint8_t IdentifySuccessStrEn[]={"Identify Success"};   
                //code uint8_t InputAdminPasscodeStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_guan,HZ_li,HZ_yuan,HZ_mi,HZ_ma,HZ_end};
                #endif
2500   1        if ( ManagerIdentifyMgr.Status == StartManagerIdentify )
2501   1        {
2502   2          if ((CheckMemoryMgr.FpMasterNum == 0x00 )
2503   2            &&(CheckMemoryMgr.PasscodeMasterNum == 0x00)
2504   2            )
2505   2          {
2506   3            #ifdef DirectIntoMainMenuInFactoryDefaultStatus
                    ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
                    #else
2509   3            //ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2510   3            CurrentScreen = SCREEN_RegisterPasscodeUser;
2511   3            PasscodeUserRegisterMgr.OverTimeCnt = Def_GuiTimeDelayCnt5s;
2512   3            PasscodeUserRegisterMgr.Status = InputFirstPasscode;
2513   3            DataInputMgr.Status = InputIdle;
2514   3            PasscodeUserRegisterMgr.UserID = 0x01;
2515   3            PasscodeUserRegisterMgr.UserPriority = Master;
2516   3            
2517   3            PasscodeInputMgr.Point = 0x00;
2518   3            PasscodeInputMgr.PasscodeLen = 12;
2519   3            PasscodeInputMgr.Status = PasscodeInputStart;
2520   3            for (i=0;i<12;i++)
2521   3            {
2522   4              PasscodeInputMgr.InputBuff[i] = 0xFF;   //Initial passcode buffer
2523   4            }
2524   3            PasscodeUserRegisterMgr.TimeCnt = Def_WaitUserInputPasscodeTimeDelay;   
2525   3            //GUI_Flag_RefreshLCD = bTRUE;
2526   3            PLAY_VOICE_THREESEGMENT(VOICE_PleaseEnter,VOICE_Administrator,VOICE_Password);
2527   3              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 42  

                      Clear_Screen();
                      DisHZ16x14Str(3,30,InputPasscodeStr,NormalDisplay);
                      #endif
2531   3            #endif
2532   3            
2533   3          }
2534   2          else
2535   2          {
2536   3            PasscodeInputMgr.Point = 0x00;
2537   3            PasscodeInputMgr.PasscodeLen = 12;
2538   3            PasscodeInputMgr.Status = PasscodeInputStart;
2539   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyPasscodeInput;
2540   3            //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
2541   3            for (i=0;i<PasscodeInputMgr.PasscodeLen;i++)
2542   3            {
2543   4              PasscodeInputMgr.InputBuff[i]=0xff;
2544   4            }
2545   3            ManagerIdentifyMgr.Status = WaiForManagerPasscodeOrFP;
2546   3            FpIdentifyMgr.Status = FPMcmdStart;
2547   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyMaster);
2548   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,30,IdentifyManagerStr,NormalDisplay);
                    #endif
2552   3          }
2553   2        }
2554   1        else if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
2555   1        {
2556   2      
2557   2          GUI_PasscodeInputCreat(6,16);
2558   2          
2559   2          if (PasscodeInputMgr.Status == PasscodeInputEnd)
2560   2          { 
2561   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;  
2562   3            ManagerIdentifyMgr.PasscodeUserID = PasscodeIdendify(PasscodeInputMgr.InputBuff);
2563   3            if ( (ManagerIdentifyMgr.PasscodeUserID != 0x00 )
2564   3              &&(ManagerIdentifyMgr.PasscodeUserID < (DEF_MAX_PASSCODEMASTER+1) )
2565   3               )
2566   3            {
2567   4              ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2568   4            }
2569   3            //GUI_Flag_RefreshLCD = bTRUE;
2570   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2571   3      
2572   3            if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2573   3            {
2574   4              PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2575   4              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                      #endif
2579   4              ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay; 
2580   4              if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2581   4              {
2582   5                SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2583   5              } 
2584   4            }
2585   3            else
2586   3            {
2587   4              PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2588   4              #ifdef Function_ScreenDisplay
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 43  

                      Clear_Screen();
                      DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                      #endif
2592   4            }
2593   3            
2594   3          }
2595   2          else if (PasscodeInputMgr.Status == PasscodeInputExit)
2596   2          {
2597   3            ManagerIdentifyMgr.Status = ManagerIdentifyExit;
2598   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2599   3          }
2600   2      
2601   2          FpUserIdentify();
2602   2          if ( (FpIdentifyMgr.Status == success)
2603   2            &&(FpIdentifyMgr.UserID < (DEF_MAX_FPMASTER) )
2604   2            )
2605   2          {
2606   3            ManagerIdentifyMgr.Status = ManagerIdentifySuccess;
2607   3            FpIdentifyMgr.Status = FPMcmdStart;
2608   3            PLAY_VOICE_TWOSEGMENT(VOICE_IdentifyMaster,VOICE_Success);
2609   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifySuccessStr,NormalDisplay);
                    #endif
2613   3            #ifdef Function_FPMBreathingLed
2614   3            FpIdentifyMgr.BreathingLED = 1;
2615   3            SetFPMbreathingLed(FPMbreathingLed_Green);
2616   3            #endif  
2617   3          }
2618   2          else if (( FpIdentifyMgr.Status == fail)
2619   2              ||( (FpIdentifyMgr.Status == success)&&((FpIdentifyMgr.UserID+1) > DEF_MAX_FPMASTER ))
2620   2            )
2621   2          {
2622   3            if (FpIdentifyMgr.ErrorType == Error_SerialNumberMismatched ){
2623   4              ManagerIdentifyMgr.ErrorType = FPMserialNumberMismatched;
2624   4            }
2625   3            else{
2626   4              ManagerIdentifyMgr.ErrorType = MasterMismatched;
2627   4            }
2628   3            FpIdentifyMgr.Status = FPMcmdStart;
2629   3            ManagerIdentifyMgr.Status = ManagerIdentifyFail;
2630   3            ManagerIdentifyMgr.TimeCnt = Def_MessageBoxTimeDelay;
2631   3            //GUI_Flag_RefreshLCD = bTRUE;
2632   3            PLAY_VOICE_ONESEGMENT(VOICE_IdentifyFail);
2633   3            #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,IdentifyFailStr,NormalDisplay);
                    #endif
2637   3            #ifdef Function_FPMBreathingLed
2638   3            SetFPMbreathingLed(FPMbreathingLed_Red);
2639   3            #endif
2640   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes < DEF_ManagerPasscodeIdentifyFailedTimesLimite
             -d )
2641   3            {
2642   4              SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes++;
2643   4            } 
2644   3          }
2645   2        }
2646   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifySuccess )
2647   1        {
2648   2          GoToMainMenu();
2649   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes=0x00;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 44  

2650   2        }
2651   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyFail )
2652   1        {
2653   2          if (--ManagerIdentifyMgr.TimeCnt < 1 )
2654   2          {
2655   3            if ( SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes >= DEF_ManagerPasscodeIdentifyFailedTimesLimit
             -ed )
2656   3            {
2657   4              SafetyMonitorMgr.SystemLocked = bTRUE;
2658   4              SafetyMonitorMgr.SystemLockedTimeDelay = DEF_SystemLockedTime;
2659   4            }
2660   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2661   3            CardIdentifyMgr.Status = ReadingCardID;
2662   3            FpIdentifyMgr.Status = FPMcmdStart;
2663   3            CurrentScreen = SCREEN_Main;
2664   3            #ifdef Function_FPMBreathingLed
2665   3            SetFPMbreathingLed(FPMbreathingLed_Bule);
2666   3            #endif
2667   3          }
2668   2        }
2669   1        else if ( ManagerIdentifyMgr.Status == ManagerIdentifyExit )
2670   1        {
2671   2          PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
2672   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2673   2          CardIdentifyMgr.Status = ReadingCardID;
2674   2          FpIdentifyMgr.Status = FPMcmdStart;
2675   2          CurrentScreen = SCREEN_Main;
2676   2          #ifdef Function_FPMBreathingLed
2677   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
2678   2          #endif
2679   2        }
2680   1      
2681   1      }
2682          /*******************************************************/
2683          /*******************************************************/
2684          /*******************************************************/
2685          void ShowUnlockingModeSetting(void)//界面-解锁模式设置
2686          {
2687   1        #ifdef Function_ScreenDisplay
                code uint8_t SingalModeStr[]={ZF_1,ZF_xiaoshudian,HZ_dan,HZ_yier,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t SingalModeStrEn[]={"1.Single"}; 
                code uint8_t DoubleModeStr[]={ZF_2,ZF_xiaoshudian,HZ_zu,HZ_he,HZ_kai,HZ_suomen,HZ_end};
              //  code uint8_t DoubleModeStrEn[]={"2.Combination"}; 
                code uint8_t SystemNoSecondIdentityStr[]={HZ_qing,HZ_shu,HZ_ru,HZ_di,HZ_er,HZ_shen,HZ_fen,HZ_end};
              //  code uint8_t SystemNoSecondIdentityStrEn[]={"No 2nd Identity"};
                #endif
2695   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingStart )
2696   1        {
2697   2          UnlockingModeMgr.Status = WaitForUserConfirmUnlockingMode;
2698   2        }
2699   1        else if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
2700   1        { 
2701   2            #ifdef Function_ScreenDisplay
                    DisHZ16x14Str(0,4,SingalModeStr,NormalDisplay);
                    DisHZ16x14Str(2,4,DoubleModeStr,NormalDisplay);
                    #endif
2705   2            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2706   2            {
2707   3              if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2708   3              {
2709   4                PLAY_VOICE_MULTISEGMENTS(UnlockModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2710   4                VoiceMenuMgr.MenuPoint++;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 45  

2711   4              }
2712   3            }
2713   2        }
2714   1        else if ( UnlockingModeMgr.Status == UserConfirmedUnlockingMode )//UnlockingModeSettingSuccess )
2715   1        {
2716   2          UnlockingModeMgr.TimeCnt = 0;
2717   2          if (UserIdentifyResultMgr.UnlockingMode == DoubleMode )
2718   2          { 
2719   3            if  ( IfSystemWithoutSecondIdentity() == bTRUE )
2720   3            {
2721   4              #ifdef Function_ScreenDisplay
                        Clear_Screen();
                        DisHZ16x14Str(3,16,SystemNoSecondIdentityStr,NormalDisplay);
                      #endif
2725   4              UnlockingModeMgr.TimeCnt = Def_MessageBoxTimeDelay;
2726   4              UserIdentifyResultMgr.UnlockingMode = SingalMode;
2727   4            }
2728   3          }
2729   2          UnlockingModeMgr.Status = UnlockingModeSettingSuccess;
2730   2        }
2731   1        if ( UnlockingModeMgr.Status == UnlockingModeSettingSuccess )
2732   1        {
2733   2          if (UnlockingModeMgr.TimeCnt > 0)
2734   2          {
2735   3            UnlockingModeMgr.TimeCnt--;
2736   3          }
2737   2          else
2738   2          {
2739   3            SystemConfigSave();
2740   3            GoToSystemConfigMenu();
2741   3          }
2742   2        }
2743   1      }
2744          
2745          /*******************************************************/
2746          /*******************************************************/
2747          /*******************************************************/
2748          void ShowContinuedOpenModeSetting(void)//界面-组合开锁模式设置
2749          {
2750   1        #ifdef Function_ScreenDisplay
                //code uint8_t TitleStr[]={HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_end};              //常开模式
              //  code uint8_t TitleStrEn[]={"Often Open"};             //常开模式  
                code uint8_t EnabledStr[]={ZF_1,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_kai,HZ_end};
              //  code uint8_t EnabledStrEn[]={"1. ON"};
                code uint8_t DisabledStr[]={ZF_2,ZF_xiaoshudian,HZ_changchang,HZ_kai,HZ_mo,HZ_si,HZ_kongge,HZ_guanbi,HZ_e
             -nd};
              //  code uint8_t DisabledStrEn[]={"2. OFF"};
              
                DisHZ16x14Str(0,4,EnabledStr,NormalDisplay);
                DisHZ16x14Str(2,4,DisabledStr,NormalDisplay); 
                #endif
2761   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2762   1        {
2763   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2764   2          {
2765   3            PLAY_VOICE_MULTISEGMENTS(ContinuedOpenModeSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2766   3            VoiceMenuMgr.MenuPoint++;
2767   3          }
2768   2        }
2769   1      }
2770          
2771          /*******************************************************/
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 46  

2772          /*******************************************************/
2773          /*******************************************************/
2774          void ShowPickAlarmEnableSetting(void)//界面-防撬告警使能设置
2775          {
2776   1        #ifdef Function_ScreenDisplay
                code uint8_t AntiPryingEnableStr[]={ZF_1,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_kai
             -,HZ_end};
              //  code uint8_t AntiPryingEnableStrEn[]={"1.Enable"}; 
                code uint8_t AntiPryingDisableStr[]={ZF_2,ZF_xiaoshudian,HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_kongge,HZ_gu
             -anbi,HZ_end};
              //  code uint8_t AntiPryingDisableStrEn[]={"2.Disable"};
              
                DisHZ16x14Str(0,4,AntiPryingEnableStr,NormalDisplay);
                DisHZ16x14Str(2,4,AntiPryingDisableStr,NormalDisplay);
                #endif
2785   1        if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2786   1        {
2787   2          if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2788   2          {
2789   3            PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2790   3            VoiceMenuMgr.MenuPoint++;
2791   3          }
2792   2          /*
2793   2          PLAY_VOICE_MULTISEGMENTS(PickAlarmSetVoiceBuff[VoiceMenuMgr.MenuPoint]);
2794   2          
2795   2          if ( ++VoiceMenuMgr.MenuPoint >= VoiceMenuMgr.TotalMenuNum )
2796   2          {
2797   2            VoiceMenuMgr.MenuPoint = 0;
2798   2          }
2799   2          */
2800   2        }
2801   1      
2802   1        
2803   1        if ( PickAlarmEnableMgr.Status == StartPickAlarmEnableSetting )
2804   1          {
2805   2            PickAlarmEnableMgr.Status = WaitForPickAlarmEnableSettingUserConfirm;
2806   2          }
2807   1        else if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
2808   1          {
2809   2            
2810   2          }
2811   1        else if ( PickAlarmEnableMgr.Status == PickAlarmEnableSettingSuccess )
2812   1          {     
2813   2            AntiPryingMgr.AntiPryingTrigger = bFALSE;
2814   2            SystemConfigSave();
2815   2            Config_AntiPrying_Interrupt();
2816   2            GoToSystemConfigMenu(); 
2817   2          }
2818   1      }
2819          
2820          /*******************************************************/
2821          /*******************************************************/
2822          extern uint16_t KeyHoldTimeCnt;
2823          /*******************************************************/
2824          void ShowRestoreFactoryDefault(void)//界面-恢复出厂
2825          {
2826   1        uint8_t i;
2827   1        #ifdef Function_ScreenDisplay
                code uint8_t RestoreFactoryDoingStr[]={HZ_hui,HZ_fu,HZ_chu,HZ_chang,HZ_she,HZ_zhiwei,ZF_xiaoshudian,ZF_xi
             -aoshudian,ZF_xiaoshudian,HZ_end};
              //  code uint8_t RestoreFactoryDoingStrEn[]={"Restoring..."};
                #endif
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 47  

2831   1        //RestoreFactoryDefaultMgr.Status = RestoreFactoryDefaultEXIT;
2832   1      
2833   1        if ( RestoreFactoryDefaultMgr.Status == StartRestoreFactoryDefault )
2834   1        {
2835   2          RestoreFactoryDefaultMgr.Status = WaitForRestoreFactoryDefaultUserConfirm;
2836   2          //GUI_Flag_RefreshLCD = bTRUE;
2837   2          RestoreFactoryDefaultMgr.Selection = NO;
2838   2          //SET_LRandConfirmLED_ON();
2839   2          //SET_AP_LED_ON();
2840   2        }
2841   1        else if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
2842   1        {
2843   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(2,10,ConfirmRestoreFactoryDefaultStr1,NormalDisplay); 
                  DisHZ16x14Str(4,10,ConfirmRestoreFactoryDefaultStr2,NormalDisplay);
                  #endif
2848   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
2849   2          {
2850   3            if (VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
2851   3            {
2852   4              PLAY_VOICE_MULTISEGMENTS(RestoreFactoryDefaultVoiceBuff[VoiceMenuMgr.MenuPoint]);
2853   4              VoiceMenuMgr.MenuPoint++;
2854   4            }
2855   3          }
2856   2        }
2857   1        else if ( RestoreFactoryDefaultMgr.Status == ConfirmedToRestoreFactoryDefault )
2858   1        { 
2859   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  DisHZ16x14Str(3,14,RestoreFactoryDoingStr,NormalDisplay); 
                  #endif
2863   2          //SET_ALLKEYLED_OFF();
2864   2          
2865   2          //RestoreFactoryDefaultMgr.Status = SaveFPMserialNumber;
2866   2          RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2867   2          AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2868   2          RestoreFactoryDefaultMgr.FailTimes = 0x00;
2869   2      
2870   2          PLAY_VOICE_ONESEGMENT(VOICE_RestoreFactoryDefault);
2871   2      
2872   2        }
2873   1      //  else if ( RestoreFactoryDefaultMgr.Status == SaveFPMserialNumber )
2874   1      //  {
2875   1      //    if ( SaveFPMserialNumberToMemory() == S_SUCCESS )
2876   1      //      {
2877   1      //        RestoreFactoryDefaultMgr.Status = ResetFPMuser;
2878   1      //        AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2879   1      //        RestoreFactoryDefaultMgr.FailTimes = 0x00;
2880   1      //      }
2881   1      //    else{ 
2882   1      //      RestoreFactoryDefaultMgr.Status = RestoreFactoryFail;
2883   1      //      PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Fail);
2884   1      //      #ifdef Function_ScreenDisplay
2885   1      //      Clear_Screen();
2886   1      //      DisHZ16x14Str(3,36,OperationFailStr,NormalDisplay);
2887   1      //      #endif
2888   1      //    }
2889   1      //  } 
2890   1        else if ( RestoreFactoryDefaultMgr.Status == ResetFPMuser )
2891   1        {
2892   2          DeleteAllFpFromFPM();
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 48  

2893   2          if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserSuccess )
2894   2          {
2895   3            RestoreFactoryDefaultMgr.Status = ResetCardUser;
2896   3            RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2897   3            CheckMemoryMgr.FpUserNum = 0x00;
2898   3            CheckMemoryMgr.FpMasterNum = 0x00;  
2899   3            for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2900   3            {
2901   4              FpUserMemoryMgr[i].UserID = 0xFFFF;
2902   4              FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2903   4              FpUserMemoryMgr[i].UserPriority = Undefined;
2904   4            }
2905   3            ResetFPuserIdListInEEPROM();
2906   3          }
2907   2          else if ( AllUserFpDeleteMgr.Status == DeleteAllFpUserFail )
2908   2          {
2909   3            if ( RestoreFactoryDefaultMgr.FailTimes < 4 )
2910   3            {
2911   4              RestoreFactoryDefaultMgr.FailTimes++;
2912   4              AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
2913   4              RefreshSystemSleepTime();
2914   4            }
2915   3            else
2916   3            {
2917   4              RestoreFactoryDefaultMgr.Status = ResetCardUser;
2918   4              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2919   4              CheckMemoryMgr.FpUserNum = 0x00;
2920   4              CheckMemoryMgr.FpMasterNum = 0x00;  
2921   4              for (i=0;i<(DEF_MAX_FPMASTER+DEF_MAX_FPUSER);i++)
2922   4              {
2923   5                FpUserMemoryMgr[i].UserID = 0xFFFF;
2924   5                FpUserMemoryMgr[i].RegisterStatus = UnRegistered;
2925   5                FpUserMemoryMgr[i].UserPriority = Undefined;
2926   5              } 
2927   4              ResetFPuserIdListInEEPROM();
2928   4            }
2929   3          } 
2930   2        }
2931   1        else if ( RestoreFactoryDefaultMgr.Status == ResetCardUser )
2932   1          {     
2933   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2934   2            {
2935   3              DeleteAllCardUserfromMemory();
2936   3              RestoreFactoryDefaultMgr.Status = ResetPasscodeUser;
2937   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
2938   3              CheckMemoryMgr.CardUserNum = 0x00;
2939   3            } 
2940   2          }
2941   1        else if ( RestoreFactoryDefaultMgr.Status == ResetPasscodeUser )
2942   1          { 
2943   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2944   2            {
2945   3              RestoreFactory_Managerdata();
2946   3              DeleteAllPasscodeMasterfromMemory();
2947   3              DeleteAllPasscodeUserfromMemory();
2948   3              SystemConfigReset();
2949   3              #ifdef Function_EventLog
                      DeleteAllLog();
                      #endif
2952   3              
2953   3              RestoreFactoryDefaultMgr.Status = RestoreFactorySuccess;
2954   3              RestoreFactoryDefaultMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 49  

2955   3              CheckMemoryMgr.PasscodeMasterNum = 0x00;
2956   3              CheckMemoryMgr.PasscodeUserNum = 0x00;
2957   3              //GUI_Flag_RefreshLCD = bTRUE;
2958   3              PLAY_VOICE_TWOSEGMENT(VOICE_RestoreFactoryDefault,VOICE_Success);
2959   3              #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                      #endif
2963   3            }
2964   2          }
2965   1        
2966   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactorySuccess )
2967   1          {
2968   2      
2969   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2970   2            {
2971   3              CurrentScreen = SCREEN_Main;
2972   3              RefreshSystemSleepTime();
2973   3              KeyHoldTimeCnt=0;
2974   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2975   3              FpIdentifyMgr.Status = FPMcmdStart;
2976   3              CardIdentifyMgr.Status = ReadingCardID;
2977   3      
2978   3            }
2979   2          }
2980   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryFail )
2981   1          {
2982   2            if (RestoreFactoryDefaultMgr.TimeCnt-- < 1 )
2983   2            {
2984   3              CurrentScreen = SCREEN_Main;
2985   3              KeyHoldTimeCnt=0;
2986   3              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
2987   3              FpIdentifyMgr.Status = FPMcmdStart;
2988   3              CardIdentifyMgr.Status = ReadingCardID;
2989   3            }
2990   2          }
2991   1        else if ( RestoreFactoryDefaultMgr.Status == RestoreFactoryDefaultEXIT )
2992   1          {
2993   2            GoToSystemConfigMenu();
2994   2          }
2995   1      
2996   1      }
2997          
2998          /*******************************************************/
2999          /*******************************************************/
3000          /*******************************************************/
3001          void ShowInitialization(void)//界面-初始化
3002          {
3003   1        
3004   1        uint8_t i;
3005   1        #ifdef Function_ScreenDisplay
                code uint8_t SystenRebootStr[]={HZ_xi,HZ_tong,HZ_qidong,HZ_dong,HZ_end};
              //  code uint8_t SystenRebootStr_En[]={"[Rebooting]"};
                code uint8_t FingprintStr[]={HZ_zhi,HZ_wen,HZ_end}; 
              //  code uint8_t FingprintStr_En[]={"Fingerprint"}; 
                code uint8_t CardReaderStr[]={HZ_du,HZ_ka,HZ_end}; 
              //  code uint8_t CardReaderStr_En[]={"Card Reader"};  
                code uint8_t EepromStr[]={HZ_nei,HZ_cun,HZ_end}; 
              //  code uint8_t EepromStr_En[]={"Memory"}; 
                code uint8_t TouchStr[]={HZ_chumo,HZ_motou,HZ_end}; 
              //  code uint8_t TouchStr_En[]={"Touch"}; 
                code uint8_t SystemCheckPassStr[]={HZ_xi,HZ_tong,HZ_zhengque,HZ_changchang,HZ_end}; 
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 50  

              //  code uint8_t SystemCheckPassStr_En[]={"System OK"}; 
                code uint8_t SystemCheckFailStr[]={HZ_xi,HZ_tong,HZ_bu,HZ_zhengque,HZ_changchang,HZ_end}; 
              //  code uint8_t SystemCheckFailStr_En[]={"System NG"};
                #endif  
3021   1        
3022   1        if ( InitializationMgr.Status == StartInitialization )
3023   1        {
3024   2          //SET_ALLKEYLED_OFF();
3025   2          #ifdef Function_ScreenDisplay
                  DisEN16x8Str(1,28,"[",NormalDisplay); //display "["
                  DisHZ16x14Str(1,36,SystenRebootStr,NormalDisplay);  //display "reboot"
                  DisEN16x8Str(1,92,"]",NormalDisplay); //display "]"
                  #endif
3030   2          CheckMemoryMgr.Status = StartCheckMemory;
3031   2          InitializationMgr.Status = MemoryCheck;
3032   2        }
3033   1        else if ( InitializationMgr.Status == MemoryCheck )
3034   1        {
3035   2          #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(4,36,EepromStr,NormalDisplay);//display "EEPROM TEST"
                  #endif
3038   2          SystemConfigLoad();
3039   2          ReadLockBrand();
3040   2          InitializationMgr.MemoryCheckPass = bTRUE;
3041   2          InitializationMgr.Status = MemoryCheckWait;
3042   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3043   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3044   2        }
3045   1        else if ( InitializationMgr.Status == MemoryCheckWait )
3046   1        {
3047   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.MemoryCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3057   2          if (--InitializationMgr.TimeCnt < 1 )
3058   2          {
3059   3            InitializationMgr.Status = FingerPrintCheck;
3060   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5);
                    DisHZ16x14Str(4,36,FingprintStr,NormalDisplay); //display "FPM TEST"
                    #endif
3065   3          }
3066   2        }
3067   1        else if ( InitializationMgr.Status == FingerPrintCheck )
3068   1        {
3069   2      
3070   2          GUI_GetUserNumList();   //read user number
3071   2          if ( CheckMemoryMgr.Status == CheckMemorySuccess )
3072   2          {
3073   3            //SET_KEYLED_ON(KEY_TWO);
3074   3            #ifdef Function_FPMBreathingLed
3075   3            FpmAckMgr.Status = WaitACK;
3076   3            FPM_SetSecurityLevel(1);  //
3077   3            for (i=0;i<25;i++)
3078   3            {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 51  

3079   4              Hardware_DelayMs(10);
3080   4              FPM_Mgr_Task();
3081   4              if ( FpmAckMgr.Status == GotACK )
3082   4              {
3083   5                break;
3084   5              }
3085   4            }
3086   3            #endif
3087   3      
3088   3            InitializationMgr.FingerPrintCheckPass = bTRUE;
3089   3            InitializationMgr.Status = FingerPrintCheckWait;
3090   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3091   3            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3092   3            
3093   3          }
3094   2          else if  ( CheckMemoryMgr.Status == CheckMemoryFail )
3095   2          { 
3096   3            //CheckMemoryMgr.Status = StartCheckMemory;
3097   3            //InitializationMgr.Status = StartInitialization;//redo
3098   3            InitializationMgr.FingerPrintCheckPass = bFALSE;
3099   3            InitializationMgr.Status = FingerPrintCheckWait;
3100   3            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3101   3            DEF_Fail_Beep;
3102   3          }
3103   2        }
3104   1        else if  ( InitializationMgr.Status == FingerPrintCheckWait )
3105   1        {
3106   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.FingerPrintCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3116   2          if (--InitializationMgr.TimeCnt < 1 )
3117   2          {
3118   3            InitializationMgr.Status = CardReaderCheck;
3119   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,CardReaderStr,NormalDisplay); 
                    #endif
3124   3          }
3125   2        }
3126   1        else if ( InitializationMgr.Status == CardReaderCheck )
3127   1        {
3128   2          //SET_KEYLED_ON(KEY_THREE);
3129   2          InitializationMgr.CardReaderCheckPass = bTRUE;
3130   2          InitializationMgr.Status = CardReaderCheckWait;
3131   2          InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3132   2          PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3133   2        }
3134   1        else if ( InitializationMgr.Status == CardReaderCheckWait )
3135   1        {
3136   2          #ifdef Function_ScreenDisplay
                  if (InitializationMgr.CardReaderCheckPass == bTRUE)
                  { 
                    DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                  }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 52  

                  else
                  {
                    DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                  }
                  #endif
3146   2          if (--InitializationMgr.TimeCnt < 1 )
3147   2          {
3148   3            InitializationMgr.Status = TouchCheck;
3149   3            #ifdef Function_ScreenDisplay
                    Clear_Screen_Page(4);
                    Clear_Screen_Page(5); 
                    DisHZ16x14Str(4,36,TouchStr,NormalDisplay);
                    #endif
3154   3          }
3155   2        }
3156   1        else if ( InitializationMgr.Status == TouchCheck )
3157   1          {
3158   2            //SET_KEYLED_ON(KEY_FOUR);
3159   2            InitializationMgr.TouchCheckPass = bTRUE;
3160   2            InitializationMgr.Status = TouchCheckWait;
3161   2            InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3162   2       
3163   2            PLAY_VOICE_ONESEGMENT_FIXED(VOICE_Beep);
3164   2          }
3165   1        else if ( InitializationMgr.Status == TouchCheckWait )
3166   1          {
3167   2            #ifdef Function_ScreenDisplay
                    if (InitializationMgr.TouchCheckPass == bTRUE)
                    { 
                      DisImage(4,75,16,16,Icon_Pass,NormalDisplay);
                    }
                    else
                    {
                      DisImage(4,75,16,16,Icon_Fail,NormalDisplay);
                    }
                    #endif
3177   2            if (--InitializationMgr.TimeCnt < 1 )
3178   2            {
3179   3              InitializationMgr.Status = CheckFinished;
3180   3              InitializationMgr.TimeCnt = Def_GuiTimeDelayCnt1s;
3181   3              #ifdef Function_ScreenDisplay
                      Clear_Screen_Page(4);
                      Clear_Screen_Page(5);
                      if( (InitializationMgr.FingerPrintCheckPass == bTRUE )
                        &&(InitializationMgr.MemoryCheckPass == bTRUE )
                        &&(InitializationMgr.CardReaderCheckPass == bTRUE )
                        &&(InitializationMgr.TouchCheckPass == bTRUE ) )
                      {
                        DisHZ16x14Str(4,36,SystemCheckPassStr,NormalDisplay);
                      }
                      else
                      {
                        DisHZ16x14Str(4,28,SystemCheckFailStr,NormalDisplay);
                      }
                      #endif
3196   3            }
3197   2          }
3198   1      
3199   1        else if ( InitializationMgr.Status == CheckFinished )
3200   1        {
3201   2          if (--InitializationMgr.TimeCnt < 1 )
3202   2          {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 53  

3203   3            if (( BatteryMgr.BatteryLevel == LEVEL_0 )||( BatteryMgr.BatteryLevel == LEVEL_1 ))
3204   3            {
3205   4              PLAY_VOICE_ONESEGMENT(VOICE_PleaseReplaceTheBattery);
3206   4              BatteryMgr.PostLowBattery = bFALSE;
3207   4              BatteryMgr.TimeCnt = Def_MessageBoxTimeDelay;
3208   4              CurrentScreen = SCREEN_LowBattery;  
3209   4            }
3210   3            else
3211   3            {
3212   4              CurrentScreen = SCREEN_Main;
3213   4              PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3214   4              FpIdentifyMgr.Status = FPMcmdStart;
3215   4              CardIdentifyMgr.Status = ReadingCardID;
3216   4                      PLAY_VOICE_ONESEGMENT_FIXED(VOICE_POWERON);
3217   4            }
3218   3          }
3219   2        }
3220   1      }
3221          
3222          /*******************************************************/
3223          /*******************************************************/
3224          /*******************************************************/
3225          void ShowSystemLocked(void)//界面-系统锁定
3226          {
3227   1        #ifdef Function_ScreenDisplay
                uint16_t Temp;
                code uint8_t SystemLockedStr[]={HZ_xi,HZ_tong,HZ_suomen,HZ_ding,HZ_end};
              //  code uint8_t SystemLockedStrEn[]={"System Lock"};
                #endif
3232   1        if ( SafetyMonitorMgr.SystemLockedTimeDelay > 0x0000 )
3233   1        {
3234   2          #ifdef Function_TuyaWifi
                  if( SafetyMonitorMgr.SystemLockedTimeDelay == DEF_SystemLockedTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = ErrorAlarm;
                  }
                  #endif
3241   2          SafetyMonitorMgr.SystemLockedTimeDelay--;
3242   2          if ( SafetyMonitorMgr.SystemLockedTimeDelay > (DEF_SystemLockedTime-640))
3243   2          {
3244   3            if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3245   3            {
3246   4              if(VoiceMgr.Enable == bFALSE)
3247   4              {
3248   5                VoiceMgr.Enable = bTRUE;
3249   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3250   5                VoiceMgr.Enable = bFALSE;
3251   5              }
3252   4              else
3253   4              {
3254   5                PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3255   5              }
3256   4            }
3257   3          }
3258   2        }
3259   1        else
3260   1        {
3261   2          SafetyMonitorMgr.FpIdentifyFailedTimes = 0x00;
3262   2          SafetyMonitorMgr.CardIdentifyFailedTimes = 0x00;
3263   2          SafetyMonitorMgr.PasscodeIdentifyFailedTimes = 0x00;
3264   2          SafetyMonitorMgr.ManagerPasscodeIdentifyFailedTimes = 0x00;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 54  

3265   2          SafetyMonitorMgr.SystemLocked = bFALSE;
3266   2          CurrentScreen = SCREEN_Main;
3267   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3268   2          FpIdentifyMgr.Status = FPMcmdStart;
3269   2          CardIdentifyMgr.Status = ReadingCardID;
3270   2          STOP_VOICEPLAY();
3271   2        }
3272   1        #ifdef Function_ScreenDisplay
                DisImage(0,50,27,24,Icon_Warning,RED_COLOR);
                DisHZ16x14Str(4,36,SystemLockedStr,NormalDisplay);
                Temp = (SafetyMonitorMgr.SystemLockedTimeDelay*2)/125;
                DisOneDigital16x8(6,52,Temp/100,NormalDisplay);
                DisOneDigital16x8(6,60,(Temp%100)/10,NormalDisplay);
                DisOneDigital16x8(6,68,Temp%10,NormalDisplay);
                #endif
3280   1      }
3281          
3282          /*******************************************************/
3283          /*******************************************************/
3284          /*******************************************************/
3285          #ifdef Function_ScreenDisplay
               code uint8_t AntiPryingAlarmStr[]={HZ_fangzi,HZ_qiao,HZ_bao,HZ_jing,HZ_end};
              // code uint8_t AntiPryingAlarmStrEn[]={"Alarm"};
               //uint8_t RemovalAlarmStr1[]={HZ_qing,HZ_shu,HZ_ru,HZ_ren,HZ_lianbu,ZF_douhao,HZ_zhi,HZ_wen,HZ_end}; //请
             -输入人脸
               //uint8_t RemovalAlarmStr1En[]={"Enter Identity"}; 
               code uint8_t RemovalAlarmStr2[]={HZ_kongge,HZ_zhi,HZ_wen,HZ_mi,HZ_ma,HZ_huo,HZ_ka,HZ_pian,HZ_kongge,HZ_ko
             -ngge,HZ_tui,HZ_chu,HZ_end};   
              // code uint8_t RemovalAlarmStr2En[]={"to Removal"};
              #endif
3293          void ShowPickLockAlarm(void)//界面-防撬告警
3294          {
3295   1        bool_t Flag_ExitPickLockAlarm;
3296   1      
3297   1        RefreshSystemSleepTime();   //reset system sleep time
3298   1      
3299   1        #ifdef Function_ScreenDisplay
                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
                {
                  DisHZ16x14Str(0,36,AntiPryingAlarmStr,NormalDisplay);
                  Clear_Screen_Page(5);
                  DisHZ16x14Str(3,0,RemovalAlarmStr2,NormalDisplay); 
                }
                #endif  
3307   1        
3308   1        Flag_ExitPickLockAlarm = bFALSE;
3309   1        if (( UART2_Mgr.TxLength == 0x00 )&& ( CardIdentifyMgr.CardDetectIntervalTimeCnt ==0 ) )  //FPM Cmd is sen
             -t out
3310   1        {
3311   2          CardIdentifyMgr.CardDetectIntervalTimeCnt = Def_CardDetectIntervalTime;
3312   2          
3313   2          CardUserIdentify();
3314   2        }
3315   1      
3316   1          
3317   1        if ( CardIdentifyMgr.Status == Success)
3318   1        {
3319   2          Flag_ExitPickLockAlarm = bTRUE;
3320   2        }
3321   1        else if ( CardIdentifyMgr.Status == Fail)
3322   1        {
3323   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 55  

3324   2          {
3325   3            Flag_ExitPickLockAlarm = bTRUE;
3326   3          }
3327   2          else
3328   2          {
3329   3            CardIdentifyMgr.Status = ReadingCardID;
3330   3          }
3331   2        }
3332   1      
3333   1        FpUserIdentify();
3334   1        if ( FpIdentifyMgr.Status == success)
3335   1        {
3336   2          Flag_ExitPickLockAlarm = bTRUE; 
3337   2        }
3338   1        else if ( FpIdentifyMgr.Status == fail)
3339   1        {
3340   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3341   2          {
3342   3            Flag_ExitPickLockAlarm = bTRUE;   
3343   3          }
3344   2          else
3345   2          {
3346   3            FpIdentifyMgr.Status = FPMcmdStart;
3347   3          }
3348   2        }
3349   1      
3350   1        PasscodeUserIdentify();
3351   1        if (PasscodeUserIdentifyMgr.Status == PasscodeIdentifySuccess)
3352   1        {
3353   2          Flag_ExitPickLockAlarm = bTRUE;
3354   2        }
3355   1        else if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyFail )
3356   1        {
3357   2          if ( IfSystemIsInFactoryDefaultStatus()==bTRUE )
3358   2          {
3359   3            Flag_ExitPickLockAlarm = bTRUE;
3360   3          }
3361   2          else
3362   2          {
3363   3            PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3364   3          }
3365   2        }
3366   1      
3367   1        if ( AntiPryingMgr.TimeCnt > 0 )
3368   1        {
3369   2          #ifdef Function_TuyaWifi
                  if( AntiPryingMgr.TimeCnt == DEF_AntiPryingTime )
                  {
                    WifiMgr.PostMgr.Flag.Bits.Alarm = 1;
                    WifiMgr.PostMgr.AlarmType = PryAlarm;
                  }
                  #endif
3376   2          AntiPryingMgr.TimeCnt--;
3377   2        }
3378   1        else{
3379   2          Flag_ExitPickLockAlarm = bTRUE;
3380   2        }
3381   1        
3382   1        if ( Flag_ExitPickLockAlarm == bTRUE )
3383   1        {
3384   2          STOP_VOICEPLAY();
3385   2          #ifdef Function_FPMBreathingLed
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 56  

3386   2          SetFPMbreathingLed(FPMbreathingLed_Bule);
3387   2          #endif
3388   2          INT1_RST();
3389   2          AntiPryingMgr.AntiPryingTrigger = bFALSE;
3390   2          AntiPryingMgr.AntiPryingSignalRelease = bFALSE;
3391   2          UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
3392   2          UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
3393   2          UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
3394   2          CurrentScreen = SCREEN_Main;
3395   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3396   2          FpIdentifyMgr.Status = FPMcmdStart;
3397   2          CardIdentifyMgr.Status = ReadingCardID;
3398   2          RefreshSystemSleepTime();   //reset system sleep time
3399   2        }
3400   1        else
3401   1        {
3402   2          if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
3403   2          {
3404   3            PLAY_VOICE_THREESEGMENT(VOICE_Alarm,VOICE_Alarm,VOICE_Alarm);
3405   3          }
3406   2        }
3407   1      }
3408          
3409          /*******************************************************/
3410          /*******************************************************/
3411          void ShowAgingTest(void)//界面-老化测试
3412          {
3413   1        #ifdef Function_ScreenDisplay
                uint8_t Str1[]={"AGING TEST"}; 
                uint8_t Str2[]={"MOTOR:"}; 
                uint8_t Str3[]={"INPUT:  . V"};
                uint8_t Str4[]={"SLIDE:"};
              
                DisEN16x8Str(0,16,Str1,NormalDisplay);
                #endif
3421   1        GUI_MotorAgingTest();
3422   1        #ifdef Function_ScreenDisplay
                DisEN16x8Str(4,0,Str2,NormalDisplay);
                DisOneDigital16x8(4,56,AgingTestMgr.TestTimes/1000,NormalDisplay);
                DisOneDigital16x8(4,64,AgingTestMgr.TestTimes%1000/100,NormalDisplay);
                DisOneDigital16x8(4,72,AgingTestMgr.TestTimes%100/10,NormalDisplay);
                DisOneDigital16x8(4,80,AgingTestMgr.TestTimes%10,NormalDisplay);
              
                DisEN16x8Str(6,0,Str3,NormalDisplay); 
                DisOneDigital16x8(6,54,BatteryMgr.BatteryVoltage%100/10,NormalDisplay);
                DisOneDigital16x8(6,70,BatteryMgr.BatteryVoltage%10,NormalDisplay);
                #endif
3433   1      }
3434          /*******************************************************/
3435          /*******************************************************/
3436          /*******************************************************/
3437          
3438          void ShowEventLogBySequence(void)//界面-按顺序界面-事件日志
3439          {
3440   1        #ifdef Function_EventLog
                code uint8_t VoiceReportLogBuff[][5]=
                { 
                  {VOICE_Press,VOICE_Two,VOICE_Previous,DEF_VoiceSegmentEndFlag},
                  {VOICE_Press,VOICE_Eight,VOICE_Next,DEF_VoiceSegmentEndFlag},
                  {VOICE_PressAsteriskKey,VOICE_ReturnPreviousMenu,DEF_VoiceSegmentEndFlag},
                  {VOICE_Mute20ms,DEF_VoiceSegmentEndFlag}
                };
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 57  

                  
                uint8_t VoiceStr_NoLog[]={VOICE_No,VOICE_Log,DEF_VoiceSegmentEndFlag};
                uint8_t NoEventLogStr[]={HZ_wu,HZ_ji,HZ_lu,HZ_end};
              
                if (CheckEventLogBySequenceMgr.Status == SearchEventLogWithSequence)
                {
                  SearchEventLogBySequence();
                  CheckEventLogBySequenceMgr.Status = VoiceReportEventLogWithSequence;
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum > 0x0000 )
                  {
                    LogMgr.DisplayPoint = CheckEventLogBySequenceMgr.StartEventLogPoint;
                    LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint+1; //for reload Display Log
                    CheckEventLogBySequenceMgr.OffsetEventLogNum = 0x0000;
                    VoiceMenuMgr.MenuPoint = 0;
                    VoiceMenuMgr.TotalMenuNum = 3;    
                  }
                  else
                  {
                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_NoLog);
                  }
                }
                else if (CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                {
                  if ( CheckEventLogBySequenceMgr.MatchedEventLogNum == 0x0000 )
                  {
                      DisHZ16x14Str(3,40,NoEventLogStr,NormalDisplay);
                  }
                  else
                  {
                    if ( LogMgr.SavedDisplayPoint != LogMgr.DisplayPoint )
                    {
                      LogMgr_ReadLog(LogMgr.DisplayPoint,&LogMgr.DisplayLog.FlagHighByte);
                      LogMgr.SavedDisplayPoint = LogMgr.DisplayPoint;
                      VoiceReportLogMgr.Status = ReportLogInit;
                      Clear_Screen();
                    }
                    
                    DisplayOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    
                    if ( VoiceMenuMgr.MenuPoint < VoiceMenuMgr.TotalMenuNum )
                    {
                      if ( VoiceDataTransferMgr.VoicePlayEnd == bTRUE )
                      {
                        PLAY_VOICE_MULTISEGMENTS(VoiceReportLogBuff[VoiceMenuMgr.MenuPoint]);
                        VoiceMenuMgr.MenuPoint++;
                      }
                      SystemPowerMgr.SleepDelayTimerCnt = Def_GuiTimeDelayCnt45s;
                    }
                    else
                    {
                     // VoiceReportOneEventLog(CheckEventLogBySequenceMgr.OffsetEventLogNum+1);
                    }
                  }
                }
                #endif
3503   1      }
3504          
3505          /*******************************************************/
3506          /*******************************************************/
3507          /*******************************************************/
3508          void ShowClearEventLog(void)//界面-清除事件日志
3509          {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 58  

3510   1        #ifdef Function_EventLog
                uint8_t DELing[]={HZ_shan,HZ_chufa,HZ_zhong,ZF_xiaoshudian,ZF_xiaoshudian,ZF_xiaoshudian,HZ_end};
                if (LogDeleteMgr.Status == StartLogDelete)
                {
                  LogDeleteMgr.DeleteSectorNum = 0;
                  LogDeleteMgr.Percentage = 0;
                  LogDeleteMgr.Status = WaitforLogDeleteCofirm;
                  PLAY_VOICE_MULTISEGMENTS(ConfirmDeleteVoiceBuff);
                }
                else if (LogDeleteMgr.Status == WaitforLogDeleteCofirm)
                {
                  #ifdef Function_ScreenDisplay
                  DisHZ16x14Str(2,16,ConfirmDEL,NormalDisplay);
                  DisHZ16x14Str(4,16,CancelDEL,NormalDisplay);
                  #endif
                }
                else if (LogDeleteMgr.Status == LogDeleting)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    if ( LogDeleteMgr.Percentage == 0 )
                    {
                      #ifdef Function_ScreenDisplay
                      Clear_Screen();
                      DisHZ16x14Str(3,30,DELing,NormalDisplay);
                      #endif
                      if ( DeleteAllLog() != S_SUCCESS )
                      {
                        if ( DeleteAllLog() != S_SUCCESS )
                        {
                          DeleteAllLog();
                        }
                      }
                    }
                    LogDeleteMgr.Percentage++;
                  }
                  else
                  {
                    LogDeleteMgr.Status = LogDeleteSuccess;
                    LogDeleteMgr.Percentage = 0;
                    RefreshSystemSleepTime();
                    PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
                    #ifdef Function_ScreenDisplay
                    Clear_Screen();
                    DisHZ16x14Str(3,36,OperationSuccessStr,NormalDisplay);
                    #endif
                  }
                }
                else if (LogDeleteMgr.Status == LogDeleteSuccess)
                {
                  if ( LogDeleteMgr.Percentage < 100 )
                  {
                    LogDeleteMgr.Percentage++;
                  }
                  else 
                  {
                    LogDeleteMgr.Status = QuitLogDelete;
                  }
                }
                else
                {
                  GotoLogMenu();
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 59  

                }
                #endif
3574   1      }
3575          
3576          /*******************************************************/
3577          /*******************************************************/
3578          
3579          
3580          /*******************************************************/
3581          /*******************************************************/
3582          void GUI_Button_Monitor(void)//GUI按钮监视器
3583          {
3584   1        //DEBUG_MARK;
3585   1        uint8_t i;
3586   1        uint8_t Offset;
3587   1        if (CardIdentifyMgr.CardDetectIntervalTimeCnt > (Def_CardDetectIntervalTime-8))
3588   1        {
3589   2          //return;
3590   2        }
3591   1        
3592   1        if ( MotorMgr.MotorStatus != IDLE )
3593   1        {
3594   2          return;
3595   2        }
3596   1      
3597   1        gui_keycode = Key_Scan();
3598   1      
3599   1        DEBUG_MARK;
3600   1      
3601   1        if ( gui_keycode != KEY_NONE )
3602   1        {
3603   2          RefreshSystemSleepTime();
3604   2        }
3605   1        switch ( CurrentScreen)
3606   1        {
3607   2          case SCREEN_Main:
3608   2      
3609   2            if ( gui_keycode == KEY_INSIDEBUTTON )
3610   2            {
3611   3              #ifdef INSIDEBUTTONINTOMAINMENU
                      DEF_ButtonPress_Voice;
                      CurrentScreen = SCREEN_ManagerIdentify;
                      ManagerIdentifyMgr.Status = StartManagerIdentify;
                      #endif
3616   3            }
3617   2            else if ( gui_keycode == KEY_INSIDEBUTTON_HOLD_LONG )
3618   2            {
3619   3              CurrentScreen = SCREEN_RestoreFactoryDefault;
3620   3              //RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3621   3              RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
3622   3            }
3623   2            #ifdef Function_DoorBellTouchIndependented
3624   2            else if ( gui_keycode == KEY_DOORBELL )
3625   2            { 
3626   3              PLAY_VOICE_DOORBELL();
3627   3              DoorBellMgr.TimeCnt = 150;
3628   3              CurrentScreen = SCREEN_DoorBell;
3629   3            }
3630   2            #endif
3631   2      
3632   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3633   2            {
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 60  

3634   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
3635   3              {
3636   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
3637   4                {
3638   5                  
3639   5                  PasscodeInputMgr.Point = 0x01;
3640   5                  PasscodeInputMgr.PasscodeLen = 16;
3641   5                  PasscodeInputMgr.Status = PasscodeInputStart;
3642   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
3643   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
3644   5                  {
3645   6                    PasscodeInputMgr.InputBuff[i]=0xff;
3646   6                  }
3647   5                  
3648   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
3649   5                  DEF_ButtonPress_Voice;
3650   5                }
3651   4               }
3652   3              else if ( gui_keycode == KEY_ASTERISK )
3653   3              {
3654   4                DEF_ButtonPress_Voice;
3655   4                if ( g_ASTERISK_PressedOnMainScreen == bFALSE )
3656   4                {
3657   5                  g_ASTERISK_PressedOnMainScreen = bTRUE;
3658   5                }
3659   4                else 
3660   4                {
3661   5                  SystemPowerMgr.SleepDelayTimerCnt = 0x0000;
3662   5                  SystemPowerMgr.SleepSource = UserForced;
3663   5                }
3664   4              }
3665   3              else if ( gui_keycode == KEY_POUNDSIGN )
3666   3              {
3667   4                if ( g_ASTERISK_PressedOnMainScreen == bTRUE )
3668   4                { 
3669   5                   DEF_ButtonPress_Voice;
3670   5                   CurrentScreen = SCREEN_ManagerIdentify;
3671   5                   ManagerIdentifyMgr.Status = StartManagerIdentify;
3672   5                   g_ASTERISK_PressedOnMainScreen = bFALSE;
3673   5                }
3674   4                else
3675   4                {
3676   5                  #ifdef Function_DoorBellTouchUsedPOUNDSIGN
                          PLAY_VOICE_DOORBELL();  //DOORBELL
                          DoorBellMgr.TimeCnt = 150;
                          CurrentScreen = SCREEN_DoorBell;
                          #else
3681   5                  DEF_ButtonPress_Voice;
3682   5                  #endif
3683   5                } 
3684   4              }
3685   3            }
3686   2            else if (( gui_keycode != KEY_NONE )    //from KEY0~~KEY9
3687   2                      &&( gui_keycode != KEY_DOORBELL )
3688   2                    )
3689   2            {
3690   3              g_ASTERISK_PressedOnMainScreen = bFALSE;
3691   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
3692   3              {
3693   4                DEF_ButtonPress_Voice;
3694   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
3695   4                GUI_PasscodeInputButtonMonitor(gui_keycode);//GUI_密码输入按钮监视器
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 61  

3696   4              }
3697   3            }
3698   2            
3699   2            break;
3700   2            
3701   2          case SCREEN_MainMenu:
3702   2      
3703   2              if ( gui_keycode == KEY_ONE )
3704   2              {
3705   3                DEF_ButtonPress_Voice;
3706   3                Hardware_DelayMs(100);
3707   3                GoToFpMenu();
3708   3              }
3709   2              else if ( gui_keycode == KEY_TWO )
3710   2              {
3711   3                DEF_ButtonPress_Voice;
3712   3                Hardware_DelayMs(100);
3713   3                GoToPasswordMenu();
3714   3              }
3715   2              else if ( gui_keycode == KEY_THREE )
3716   2              {
3717   3                DEF_ButtonPress_Voice;
3718   3                Hardware_DelayMs(100);
3719   3                GoToCardMenu();
3720   3              }
3721   2              else if ( gui_keycode == KEY_FOUR )
3722   2              {
3723   3                DEF_ButtonPress_Voice;
3724   3                Hardware_DelayMs(100);
3725   3                GoToSystemConfigMenu();
3726   3              }
3727   2              #ifdef Function_TuyaWifi
                      else if (gui_keycode == KEY_FIVE)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_NetWorkLink;
                        WifiMgr.Link.Status = LinkStart;
                        Wifi_Rst();
                      }
                      #endif
3737   2      //        else if ( gui_keycode == KEY_FIVE )
3738   2      //        {
3739   2      //          DEF_ButtonPress_Voice;
3740   2      //          Hardware_DelayMs(100);
3741   2      //          GotoLogMenu();
3742   2      //        }
3743   2              else if ( gui_keycode == KEY_ASTERISK )
3744   2              {
3745   3                #ifdef Function_FPMBreathingLed
3746   3                FpIdentifyMgr.BreathingLED = 0;
3747   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3748   3                #endif
3749   3                //DEF_ButtonPress_Voice;
3750   3                //FpmAckMgr.Status = WaitACK;
3751   3                PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
3752   3                CardIdentifyMgr.Status = ReadingCardID;
3753   3                FpIdentifyMgr.Status = FPMcmdStart;
3754   3                PLAY_VOICE_ONESEGMENT(VOICE_ExitMenu);
3755   3                Hardware_DelayMs(100);
3756   3                CurrentScreen = SCREEN_Main;
3757   3                RefreshSystemSleepTime();
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 62  

3758   3              }
3759   2      
3760   2              break;
3761   2              
3762   2          case SCREEN_EventLogMenu:
3763   2            
3764   2              #ifdef Function_EventLog
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_CheckEventLogBySequence;
                        CheckEventLogBySequenceMgr.Status = SearchEventLogWithSequence;
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        CurrentScreen = SCREEN_DeleteEventLog;
                        LogDeleteMgr.Status = StartLogDelete;
                      }
                      else if ( gui_keycode == KEY_ASTERISK )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToMainMenu();
                      }
                      #endif
3786   2              
3787   2              break;  
3788   2              
3789   2          case SCREEN_FpMenu:
3790   2              if( gui_keycode == KEY_ONE || gui_keycode == KEY_TWO || gui_keycode == KEY_THREE )
3791   2              {
3792   3                #ifdef Function_FPMBreathingLed
3793   3                FpIdentifyMgr.BreathingLED = 0;
3794   3                SetFPMbreathingLed(FPMbreathingLed_Bule);
3795   3                #endif
3796   3              }
3797   2            
3798   2              if ( gui_keycode == KEY_ONE )
3799   2              {
3800   3                DEF_ButtonPress_Voice;
3801   3                Hardware_DelayMs(100);
3802   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3803   3                CurrentScreen = SCREEN_RegisterMasterFp;
3804   3                
3805   3              }
3806   2              else if ( gui_keycode == KEY_TWO )
3807   2              {
3808   3                DEF_ButtonPress_Voice;
3809   3                Hardware_DelayMs(100);
3810   3                FpUserRegisterMgr.Status = StartFpUserRegister;
3811   3                CurrentScreen = SCREEN_RegisterUserFp;
3812   3              }
3813   2              else if ( gui_keycode == KEY_THREE )
3814   2              {
3815   3                DEF_ButtonPress_Voice;
3816   3                Hardware_DelayMs(100);
3817   3                AllUserFpDeleteMgr.Status = StartAllUserFpDelete;
3818   3                CurrentScreen = SCREEN_DeleteAllUserFp;
3819   3              }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 63  

3820   2              #ifdef Function_Enable_ID_Del
3821   2              else if (gui_keycode == 4)
3822   2              {
3823   3                  DEF_ButtonPress_Voice;
3824   3                  Hardware_DelayMs(100);
3825   3                  CurrentScreen = SCREEN_DeleteUserFp;
3826   3                  FpUserDeleteMgr.Status = StartFpUserDelete;
3827   3              }
3828   2              #endif
3829   2              else if ( gui_keycode == KEY_ASTERISK )
3830   2              {
3831   3                DEF_ButtonPress_Voice;
3832   3                Hardware_DelayMs(100);
3833   3                GoToMainMenu();
3834   3              }
3835   2              break;
3836   2                
3837   2          case SCREEN_CardUserMenu:
3838   2      
3839   2              if ( gui_keycode == KEY_ONE )
3840   2              {
3841   3                DEF_ButtonPress_Voice;
3842   3                Hardware_DelayMs(100);
3843   3                CurrentScreen = SCREEN_RegisterCardUser;
3844   3                CardUserRegisterMgr.Status = StartCardUserRegister;
3845   3              }
3846   2              else if ( gui_keycode == KEY_TWO )
3847   2              {
3848   3                DEF_ButtonPress_Voice;
3849   3                Hardware_DelayMs(100);
3850   3                CurrentScreen = SCREEN_DeleteAllCardUser;
3851   3                AllCardUserDeleteMgr.Status = StartAllCardUserDelete;
3852   3              }
3853   2              #ifdef Function_Enable_ID_Del
3854   2              else if (gui_keycode == KEY_THREE)
3855   2              {
3856   3                  DEF_ButtonPress_Voice;
3857   3                  Hardware_DelayMs(100);
3858   3                  CurrentScreen = SCREEN_DeleteCardUser;
3859   3                  CardUserDeleteMgr.Status = StartCardUserDelete;
3860   3              }
3861   2              #endif
3862   2              else if ( gui_keycode == KEY_ASTERISK )
3863   2              {
3864   3                DEF_ButtonPress_Voice;
3865   3                Hardware_DelayMs(100);
3866   3                GoToMainMenu(); 
3867   3              }
3868   2              break;
3869   2              
3870   2          case SCREEN_PasscodeMenu: 
3871   2      
3872   2              if ( gui_keycode == KEY_ONE )
3873   2              {
3874   3                DEF_ButtonPress_Voice;
3875   3                Hardware_DelayMs(100);
3876   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3877   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3878   3                PasscodeUserRegisterMgr.UserPriority = Master;
3879   3              }
3880   2              
3881   2              else if ( gui_keycode == KEY_TWO )
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 64  

3882   2              {
3883   3                DEF_ButtonPress_Voice;
3884   3                Hardware_DelayMs(100);
3885   3                CurrentScreen = SCREEN_RegisterPasscodeUser;
3886   3                PasscodeUserRegisterMgr.Status = StartPasscodeUserRegister;
3887   3                PasscodeUserRegisterMgr.UserPriority = User;
3888   3              }
3889   2              else if ( gui_keycode == KEY_THREE )
3890   2              {
3891   3                DEF_ButtonPress_Voice;
3892   3                Hardware_DelayMs(100);
3893   3                CurrentScreen = SCREEN_DeleteAllPasscodeUser;
3894   3                AllPasscodeUserDeleteMgr.Status = StartAllPasscodeUserDelete;
3895   3              }
3896   2              #ifdef Function_Enable_ID_Del
3897   2              else if (gui_keycode == KEY_FOUR)
3898   2              {
3899   3                  DEF_ButtonPress_Voice;
3900   3                  Hardware_DelayMs(100);
3901   3                  CurrentScreen = SCREEN_DeletePasscodeUser;
3902   3                  PasscodeUserDeleteMgr.Status = StartPasscodeUserDelete;
3903   3              }
3904   2              #endif
3905   2              else if ( gui_keycode == KEY_ASTERISK )
3906   2              {
3907   3                DEF_ButtonPress_Voice;
3908   3                Hardware_DelayMs(100);
3909   3                GoToMainMenu();
3910   3              }
3911   2            break;
3912   2                
3913   2          case SCREEN_SystemConfigMenu:
3914   2            
3915   2              Offset = 0;
3916   2                
3917   2      //          if ( gui_keycode == KEY_ONE  )
3918   2      //          {
3919   2      //            DEF_ButtonPress_Voice;
3920   2      //            Hardware_DelayMs(100);
3921   2      //            CurrentScreen = SCREEN_TimeSetting;
3922   2      //              #ifdef Function_USE_Internal_RTC
3923   2      //              SystemTime = UTCToSystemtime(G_SystemUTCTime);
3924   2      //              #elif defined Function_USE_External_RTC
3925   2      //              PCF8563_ReadTime();
3926   2      //              #endif
3927   2      //              GotSystemTime();  
3928   2      //          }
3929   2          #ifdef Function_VoiceEnabledEnglish
                        Offset = 1;
                        if ( gui_keycode == KEY_ONE )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          CurrentScreen = SCREEN_LanguageSetting;
                          VoiceMenuMgr.MenuPoint=0;
                          VoiceMenuMgr.TotalMenuNum = 3;
                        } 
                  #endif
3940   2                if ( gui_keycode == KEY_ONE+Offset )
3941   2                {
3942   3                  DEF_ButtonPress_Voice;
3943   3                  Hardware_DelayMs(100);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 65  

3944   3                  CurrentScreen = SCREEN_VolumeSetting;
3945   3                  VoiceMenuMgr.MenuPoint=0;
3946   3                  VoiceMenuMgr.TotalMenuNum = 3;
3947   3                }         
3948   2                else if ( gui_keycode == KEY_TWO+Offset )
3949   2                {
3950   3                  DEF_ButtonPress_Voice;
3951   3                  Hardware_DelayMs(100);
3952   3                  CurrentScreen = SCREEN_ContinueOpenSetting;
3953   3                  VoiceMenuMgr.MenuPoint=0;
3954   3                  VoiceMenuMgr.TotalMenuNum = 3;
3955   3                }
3956   2                else if ( gui_keycode == KEY_THREE+Offset )
3957   2                {
3958   3                  DEF_ButtonPress_Voice;
3959   3                  Hardware_DelayMs(100);
3960   3                  CurrentScreen = SCREEN_UnlockingModeSetting;
3961   3                  UnlockingModeMgr.Status = UnlockingModeSettingStart;
3962   3                  VoiceMenuMgr.MenuPoint=0;
3963   3                  VoiceMenuMgr.TotalMenuNum = 3;
3964   3                }
3965   2                else if ( gui_keycode == KEY_FOUR+Offset )
3966   2                {
3967   3                  DEF_ButtonPress_Voice;
3968   3                  Hardware_DelayMs(100);
3969   3                  CurrentScreen = SCREEN_PickAlarmEnableSetting;
3970   3                  PickAlarmEnableMgr.Status = StartPickAlarmEnableSetting;
3971   3                  VoiceMenuMgr.MenuPoint=0;
3972   3                  VoiceMenuMgr.TotalMenuNum = 3;
3973   3                }
3974   2                else if ( gui_keycode == KEY_FIVE+Offset )
3975   2                {
3976   3                  DEF_ButtonPress_Voice;
3977   3                  Hardware_DelayMs(100);
3978   3                  CurrentScreen = SCREEN_RestoreFactoryDefault;
3979   3                  RestoreFactoryDefaultMgr.Status = StartRestoreFactoryDefault;
3980   3                  VoiceMenuMgr.MenuPoint=0;
3981   3                  VoiceMenuMgr.TotalMenuNum = 2;  
3982   3                }
3983   2                else if ( gui_keycode == KEY_ASTERISK )
3984   2                {
3985   3                  DEF_ButtonPress_Voice;
3986   3                  Hardware_DelayMs(100);
3987   3                  GoToMainMenu(); 
3988   3                }
3989   2      
3990   2              break;
3991   2              
3992   2          #ifdef Function_TuyaWifi          
                  case SCREEN_NetWorkLink:
              
                    if (gui_keycode == KEY_ASTERISK)
                    {
                      DEF_ButtonPress_Voice;
                      Hardware_DelayMs(100);
                      WifiMgr.Link.Status = LinkIdle;
                      GoToMainMenu();
                    }
              
                    break;
                  #endif
4005   2      
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 66  

4006   2          case SCREEN_RegisterUserFp:
4007   2              
4008   2              if ( FpUserRegisterMgr.Status == InputUserID )
4009   2              {
4010   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4011   3              }
4012   2              if ( gui_keycode == KEY_ASTERISK )
4013   2              {
4014   3                DEF_ButtonPress_Voice;
4015   3                Hardware_DelayMs(100);
4016   3                GoToFpMenu(); 
4017   3              }
4018   2              
4019   2            break;
4020   2              
4021   2        #ifdef Function_Enable_ID_Del
4022   2          case SCREEN_DeleteUserFp:
4023   2              if ( FpUserDeleteMgr.Status == InputUserID )
4024   2              {
4025   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4026   3              }
4027   2            break;
4028   2        #endif
4029   2      
4030   2          case SCREEN_DeleteAllUserFp:
4031   2            
4032   2            if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
4033   2              {
4034   3                 if ( gui_keycode == KEY_POUNDSIGN )
4035   3                {
4036   4                  AllUserFpDeleteMgr.Selection = YES;
4037   4                  AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
4038   4                }
4039   3                else if ( gui_keycode == KEY_ASTERISK )
4040   3                {
4041   4                  DEF_ButtonPress_Voice;
4042   4                  Hardware_DelayMs(100);
4043   4                  GoToFpMenu(); 
4044   4                }
4045   3              }
4046   2      
4047   2            break;
4048   2      
4049   2          case SCREEN_RegisterMasterFp:
4050   2              
4051   2              if ( FpUserRegisterMgr.Status == InputUserID )
4052   2              {
4053   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4054   3              }
4055   2              if ( gui_keycode == KEY_ASTERISK )
4056   2              {
4057   3                DEF_ButtonPress_Voice;
4058   3                Hardware_DelayMs(100);
4059   3                GoToFpMenu(); 
4060   3              }
4061   2              
4062   2            break;
4063   2            
4064   2          case SCREEN_DeleteMasterFp:
4065   2              if ( FpUserDeleteMgr.Status == InputUserID )
4066   2              {
4067   3                GUI_UserIDinputButtonMonitor(gui_keycode);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 67  

4068   3              }
4069   2      
4070   2            break;
4071   2      
4072   2          case SCREEN_DeleteAllMasterFp:
4073   2            
4074   2              /*if ( AllUserFpDeleteMgr.Status == WaitForUserConfirmDeleteAllFP )
4075   2              {
4076   2                if ( gui_keycode == KEY_FOUR )
4077   2                {
4078   2                  DEF_ButtonPress_Voice;
4079   2                  AllUserFpDeleteMgr.Selection = YES;
4080   2                }
4081   2                else if ( gui_keycode == KEY_SIX )
4082   2                {
4083   2                  DEF_ButtonPress_Voice;
4084   2                  AllUserFpDeleteMgr.Selection = NO;
4085   2                }
4086   2                else if ( gui_keycode == KEY_POUNDSIGN )
4087   2                {
4088   2                  DEF_ButtonPress_Voice;
4089   2                   if (  AllUserFpDeleteMgr.Selection == YES ){
4090   2                    AllUserFpDeleteMgr.Status = SendDeleteAllUserFpCmdToFPM;
4091   2                  }
4092   2                  else{
4093   2                    AllUserFpDeleteMgr.Status = EXIT;
4094   2                  }
4095   2                }
4096   2              }*/
4097   2      
4098   2            break;
4099   2      
4100   2          case SCREEN_RegisterCardUser:
4101   2              if ( CardUserRegisterMgr.Status == InputCardUserID )
4102   2              {
4103   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4104   3              }
4105   2              if ( gui_keycode == KEY_ASTERISK )
4106   2              {
4107   3                DEF_ButtonPress_Voice;
4108   3                Hardware_DelayMs(100);
4109   3                GoToCardMenu(); 
4110   3              }
4111   2      
4112   2            break;
4113   2        
4114   2        #ifdef Function_Enable_ID_Del
4115   2          case SCREEN_DeleteCardUser:
4116   2              if ( CardUserDeleteMgr.Status == InputCardUserID )
4117   2              {
4118   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4119   3              }
4120   2            break;
4121   2        #endif
4122   2      
4123   2          case SCREEN_DeleteAllCardUser:
4124   2              
4125   2              if ( AllCardUserDeleteMgr.Status == WaitForUserConfirmDeleteAllCard )
4126   2              {
4127   3                if ( gui_keycode == KEY_POUNDSIGN )
4128   3                {
4129   4                  AllCardUserDeleteMgr.Selection = YES;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 68  

4130   4                  AllCardUserDeleteMgr.Status = DeletingAllCardUser;
4131   4                }
4132   3                else if ( gui_keycode == KEY_ASTERISK )
4133   3                {
4134   4                  DEF_ButtonPress_Voice;
4135   4                  Hardware_DelayMs(100);
4136   4                  GoToCardMenu(); 
4137   4                }
4138   3              }
4139   2      
4140   2            break;  
4141   2      
4142   2      
4143   2          case SCREEN_RegisterPasscodeUser:
4144   2      
4145   2              if ( PasscodeUserRegisterMgr.Status == InputPasscodeUserID )
4146   2              {
4147   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4148   3              }
4149   2              else if ( PasscodeUserRegisterMgr.Status == InputFirstPasscode )
4150   2              {
4151   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4152   3              }
4153   2              else if ( PasscodeUserRegisterMgr.Status == InputSecondPasscode )
4154   2              {
4155   3                GUI_PasscodeInputButtonMonitor(gui_keycode);
4156   3              }
4157   2              
4158   2              if ( ( CheckMemoryMgr.FpMasterNum != 0x00 )
4159   2                 ||( CheckMemoryMgr.PasscodeMasterNum != 0x00) )
4160   2              {
4161   3                if ( gui_keycode == KEY_ASTERISK )
4162   3                {
4163   4                  DEF_ButtonPress_Voice;
4164   4                  Hardware_DelayMs(100);
4165   4                  GoToPasswordMenu(); 
4166   4                }
4167   3              }
4168   2          
4169   2            break;
4170   2              
4171   2        #ifdef Function_Enable_ID_Del
4172   2          case SCREEN_DeletePasscodeUser:
4173   2            if ( PasscodeUserDeleteMgr.Status == InputPasscodeUserID )
4174   2              {
4175   3                GUI_UserIDinputButtonMonitor(gui_keycode);
4176   3              }
4177   2            break;
4178   2        #endif
4179   2              
4180   2          case SCREEN_DeleteAllPasscodeUser:
4181   2            
4182   2            if ( AllPasscodeUserDeleteMgr.Status == WaitForDeleteAllPasscodeUserConfirm )
4183   2            {
4184   3              if ( gui_keycode == KEY_POUNDSIGN )
4185   3              {
4186   4                AllPasscodeUserDeleteMgr.Selection = YES;
4187   4                AllPasscodeUserDeleteMgr.Status = DeletingAllPasscodeUser;
4188   4              }
4189   3              else if ( gui_keycode == KEY_ASTERISK )
4190   3              {
4191   4                DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 69  

4192   4                Hardware_DelayMs(100);
4193   4                GoToPasswordMenu(); 
4194   4              }
4195   3            }
4196   2            break;
4197   2            
4198   2      
4199   2          case SCREEN_TimeSetting:
4200   2            
4201   2          /*if ( TimeSettingMgr.Status == SetYearMajor)
4202   2              {
4203   2                if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4204   2                {
4205   2                  DEF_ButtonPress_Voice;
4206   2                  TempSystemTime.year = (TempSystemTime.year&0x0F)+(gui_keycode<<4);
4207   2                  TimeSettingMgr.Status = SetYearMinor;
4208   2                }
4209   2              }
4210   2              else if ( TimeSettingMgr.Status == SetYearMinor)
4211   2              {
4212   2                if ( gui_keycode == KEY_ASTERISK )
4213   2                {
4214   2                  DEF_ButtonPress_Voice;
4215   2                  TimeSettingMgr.Status = SetYearMajor;
4216   2                }
4217   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4218   2                {
4219   2                  DEF_ButtonPress_Voice;
4220   2                  TempSystemTime.year =(TempSystemTime.year&0xF0)+gui_keycode;
4221   2                  TimeSettingMgr.Status = SetMonthMajor;
4222   2                }
4223   2              }
4224   2              
4225   2              else if ( TimeSettingMgr.Status == SetMonthMajor)
4226   2              {
4227   2                if ( (gui_keycode < KEY_TWO) )
4228   2                {
4229   2                  DEF_ButtonPress_Voice;
4230   2                  TempSystemTime.month= (TempSystemTime.month&0x0F)+(gui_keycode<<4);
4231   2                  TimeSettingMgr.Status = SetMonthMinor;
4232   2                }
4233   2              }
4234   2              else if ( TimeSettingMgr.Status == SetMonthMinor)
4235   2              {
4236   2                if ( gui_keycode == KEY_ASTERISK )
4237   2                {
4238   2                  DEF_ButtonPress_Voice;
4239   2                  TimeSettingMgr.Status = SetYearMajor;
4240   2                }
4241   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4242   2                {
4243   2                  DEF_ButtonPress_Voice;
4244   2                  TempSystemTime.month=(TempSystemTime.month&0xF0)+gui_keycode;
4245   2                  if ( TempSystemTime.month > 0x12 ){
4246   2                    TempSystemTime.month = 0x12;
4247   2                  }
4248   2                  if(TempSystemTime.month == 0x00)
4249   2                  {
4250   2                   TempSystemTime.month = 0x01;
4251   2                  }
4252   2                  TimeSettingMgr.Status = SetDateMajor;
4253   2                }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 70  

4254   2              }
4255   2              
4256   2              else if ( TimeSettingMgr.Status == SetDateMajor)
4257   2              {
4258   2                if ( gui_keycode == KEY_ASTERISK ){
4259   2                  DEF_ButtonPress_Voice;
4260   2                  TimeSettingMgr.Status = SetYearMajor;
4261   2                }
4262   2                else if ( (gui_keycode < KEY_FOUR) )
4263   2                {
4264   2                  DEF_ButtonPress_Voice;
4265   2                  TempSystemTime.date= (TempSystemTime.date&0x0F)+(gui_keycode<<4);
4266   2                  TimeSettingMgr.Status = SetDateMinor;
4267   2                }
4268   2              }
4269   2              else if ( TimeSettingMgr.Status == SetDateMinor)
4270   2              {
4271   2                if ( gui_keycode == KEY_ASTERISK ){
4272   2                  DEF_ButtonPress_Voice;
4273   2                  TimeSettingMgr.Status = SetYearMajor;
4274   2                }
4275   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4276   2                {
4277   2                  DEF_ButtonPress_Voice;
4278   2                  TempSystemTime.date=(TempSystemTime.date&0xF0)+gui_keycode;
4279   2                  if ( TempSystemTime.date > 0x31 ){
4280   2                    TempSystemTime.date = 0x31;
4281   2                  }
4282   2                  if(TempSystemTime.date == 0x00)
4283   2                  {
4284   2                   TempSystemTime.date = 0x01;
4285   2                  }
4286   2                  TimeSettingMgr.Status = SetHourMajor;
4287   2                }
4288   2              }
4289   2      
4290   2              else if ( TimeSettingMgr.Status == SetHourMajor)
4291   2              {
4292   2                if ( gui_keycode == KEY_ASTERISK ){
4293   2                  DEF_ButtonPress_Voice;
4294   2                  TimeSettingMgr.Status = SetYearMajor;
4295   2                }
4296   2                else if ( (gui_keycode < KEY_THREE )){
4297   2                  DEF_ButtonPress_Voice;
4298   2                  TempSystemTime.hour= (TempSystemTime.hour&0x0F)+(gui_keycode<<4);
4299   2                  TimeSettingMgr.Status = SetHourMinor;
4300   2                }
4301   2              }
4302   2              else if ( TimeSettingMgr.Status == SetHourMinor)
4303   2              {
4304   2                if ( gui_keycode == KEY_ASTERISK ){
4305   2                  DEF_ButtonPress_Voice;
4306   2                  TimeSettingMgr.Status = SetYearMajor;
4307   2                }
4308   2                else if( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) )
4309   2                {
4310   2                  DEF_ButtonPress_Voice;
4311   2                  TempSystemTime.hour=(TempSystemTime.hour&0xF0)+gui_keycode;
4312   2                  if (TempSystemTime.hour > 0x23){
4313   2                    TempSystemTime.hour = 0x23;
4314   2                  }
4315   2                  TimeSettingMgr.Status = SetMinuteMajor;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 71  

4316   2                }
4317   2              }
4318   2      
4319   2      
4320   2              else if ( TimeSettingMgr.Status == SetMinuteMajor)
4321   2              {
4322   2                if ( gui_keycode == KEY_ASTERISK ){
4323   2                  DEF_ButtonPress_Voice;
4324   2                  TimeSettingMgr.Status = SetYearMajor;
4325   2                }
4326   2                else if ( gui_keycode < KEY_SIX)
4327   2                {
4328   2                  DEF_ButtonPress_Voice;
4329   2                  TempSystemTime.minute= (TempSystemTime.minute&0x0F)+(gui_keycode<<4);
4330   2                  TimeSettingMgr.Status = SetMinuteMinor;
4331   2                }
4332   2              }
4333   2              else if ( TimeSettingMgr.Status == SetMinuteMinor)
4334   2              {
4335   2                if ( gui_keycode == KEY_ASTERISK ){
4336   2                  DEF_ButtonPress_Voice;
4337   2                  TimeSettingMgr.Status = SetYearMajor;
4338   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputMinute);
4339   2                }
4340   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4341   2                  DEF_ButtonPress_Voice;
4342   2                  TempSystemTime.minute=(TempSystemTime.minute&0xF0)+gui_keycode;
4343   2                  TimeSettingMgr.Status = SetSecondMajor;
4344   2                }
4345   2              }
4346   2      
4347   2              else if ( TimeSettingMgr.Status == SetSecondMajor)
4348   2              {
4349   2                if ( gui_keycode == KEY_ASTERISK ){
4350   2                  DEF_ButtonPress_Voice;
4351   2                  TimeSettingMgr.Status = SetYearMajor;
4352   2                }
4353   2                else if ( gui_keycode < KEY_SIX){
4354   2                  DEF_ButtonPress_Voice;
4355   2                  TempSystemTime.second= (TempSystemTime.second&0x8F)+(gui_keycode<<4);
4356   2                  TimeSettingMgr.Status = SetSecondMinor;
4357   2                }
4358   2              }
4359   2              else if ( TimeSettingMgr.Status == SetSecondMinor)
4360   2              {
4361   2                if ( gui_keycode == KEY_ASTERISK ){
4362   2                  DEF_ButtonPress_Voice;
4363   2                  TimeSettingMgr.Status = SetYearMajor;
4364   2      //            PLAY_VOICE_MULTISEGMENTS(VoiceMgr.volume,VoiceStr_PleaseInputSecond);
4365   2                }
4366   2                else if ( (gui_keycode < KEY_NINE )||(gui_keycode == KEY_NINE) ){
4367   2                  DEF_ButtonPress_Voice;
4368   2                  TempSystemTime.second=(TempSystemTime.second&0xF0)+gui_keycode;
4369   2                  TimeSettingMgr.Status = SetYearMajor;
4370   2                }
4371   2              }
4372   2      
4373   2              if ( gui_keycode == KEY_POUNDSIGN )
4374   2              {
4375   2                if (is_valid_date(TempSystemTime.year, TempSystemTime.month, TempSystemTime.date)==bTRUE)
4376   2                {
4377   2                  DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 72  

4378   2                  SaveSystemTime();
4379   2                  #ifdef Function_USE_Internal_RTC
4380   2                  G_SystemUTCTime = SystemTimeToUTC(SystemTime);
4381   2                  #elif defined Function_USE_External_RTC
4382   2                  PCF8563_WriteTime();
4383   2                  #endif
4384   2                  Hardware_DelayMs(100);
4385   2                  PLAY_VOICE_TWOSEGMENT(VOICE_Operation,VOICE_Success);
4386   2                }
4387   2                else{
4388   2                  Hardware_DelayMs(100);
4389   2                  PLAY_VOICE_THREESEGMENT(VOICE_Time,VOICE_Setting,VOICE_Fail);
4390   2                }
4391   2                  
4392   2                GoToSystemConfigMenu();         
4393   2              }
4394   2              else if ( gui_keycode == KEY_ASTERISK )
4395   2              {
4396   2                DEF_ButtonPress_Voice;
4397   2                Hardware_DelayMs(100);
4398   2                GoToSystemConfigMenu();   
4399   2      
4400   2                #ifdef Function_USE_Internal_RTC
4401   2                SystemTime = UTCToSystemtime(G_SystemUTCTime);
4402   2                #elif defined Function_USE_External_RTC
4403   2                PCF8563_ReadTime();
4404   2                #endif
4405   2        
4406   2                //GotSystemTime();      
4407   2              
4408   2                TimeSettingMgr.Status = SetYearMajor;
4409   2              }*/
4410   2      
4411   2            break;
4412   2      
4413   2            case SCREEN_RestoreFactoryDefault:
4414   2      
4415   2              if ( RestoreFactoryDefaultMgr.Status == WaitForRestoreFactoryDefaultUserConfirm )
4416   2              {
4417   3                if ( gui_keycode == KEY_POUNDSIGN )
4418   3                {
4419   4                  DEF_ButtonPress_Voice;
4420   4                  Hardware_DelayMs(100);
4421   4                  RestoreFactoryDefaultMgr.Selection = YES ;
4422   4                  RestoreFactoryDefaultMgr.Status = ConfirmedToRestoreFactoryDefault;
4423   4                }
4424   3                else if ( gui_keycode == KEY_ASTERISK )
4425   3                {
4426   4                  DEF_ButtonPress_Voice;
4427   4                  Hardware_DelayMs(100);
4428   4                  GoToSystemConfigMenu(); 
4429   4                }
4430   3              }
4431   2      
4432   2              break;
4433   2      
4434   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
              
                      if ( gui_keycode == KEY_ONE )
                      {
                        DEF_ButtonPress_Voice;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 73  

                        Hardware_DelayMs(100);
                        SystemLanguage = Chinese;       
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
                      else if ( gui_keycode == KEY_TWO )
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        SystemLanguage = English;         
                        SystemConfigSave();
                        GoToSystemConfigMenu();
                      }
                      else if ( gui_keycode == KEY_ASTERISK)
                      {
                        DEF_ButtonPress_Voice;
                        Hardware_DelayMs(100);
                        GoToSystemConfigMenu();
                      }
                    break;
                  #endif
4461   2      
4462   2          case SCREEN_VolumeSetting:
4463   2      
4464   2            if ( gui_keycode == KEY_ONE )
4465   2            {
4466   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceOpened);
4467   3              Hardware_DelayMs(100);
4468   3              VoiceMgr.Enable = bTRUE;        
4469   3              SystemConfigSave();
4470   3              GoToSystemConfigMenu();
4471   3            }
4472   2            else if ( gui_keycode == KEY_TWO )
4473   2            {
4474   3              PLAY_VOICE_MULTISEGMENTS(VoiceStr_VoiceClosed);
4475   3              Hardware_DelayMs(100);
4476   3              VoiceMgr.Enable = bFALSE; 
4477   3              SystemConfigSave();
4478   3              GoToSystemConfigMenu();
4479   3            }
4480   2            else if ( gui_keycode == KEY_ASTERISK )
4481   2            {
4482   3              DEF_ButtonPress_Voice;
4483   3              Hardware_DelayMs(100);
4484   3              GoToSystemConfigMenu();
4485   3            }
4486   2            break;  
4487   2      /*        
4488   2          case SCREEN_ManagerPasscodeModify:
4489   2      
4490   2            if ( ManagerPasscodeModifyMgr.Status == InputFirstPasscode )
4491   2            {
4492   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4493   2            }
4494   2            
4495   2            else if ( ManagerPasscodeModifyMgr.Status == InputSecondPasscode )
4496   2            {
4497   2              GUI_PasscodeInputButtonMonitor(gui_keycode);
4498   2            }
4499   2        
4500   2            break;
4501   2      */        
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 74  

4502   2          case SCREEN_MemoryCheck:
4503   2            
4504   2            
4505   2            break;
4506   2            
4507   2          case SCREEN_ManagerIdentify:
4508   2      
4509   2              if ( ManagerIdentifyMgr.Status == WaiForManagerPasscodeOrFP )
4510   2                {
4511   3                  GUI_PasscodeInputButtonMonitor(gui_keycode);
4512   3                }
4513   2            break;
4514   2              
4515   2          case SCREEN_UnlockingModeSetting:
4516   2              
4517   2              if ( UnlockingModeMgr.Status == WaitForUserConfirmUnlockingMode )
4518   2              {
4519   3                if ( gui_keycode == KEY_ONE )
4520   3                {
4521   4                  UserIdentifyResultMgr.UnlockingMode = SingalMode;
4522   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4523   4                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_SingleUnlockModeOpened);
4524   4                  Hardware_DelayMs(100);
4525   4                }
4526   3                else if ( gui_keycode == KEY_TWO )
4527   3                {
4528   4                  UserIdentifyResultMgr.UnlockingMode = DoubleMode;
4529   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4530   4                  if  ( IfSystemWithoutSecondIdentity() == bTRUE )
4531   4                  {
4532   5                    PLAY_VOICE_ONESEGMENT(VOICE_PleaseInputSecondIdentity);
4533   5                    Hardware_DelayMs(100);
4534   5                  }
4535   4                  else
4536   4                  {
4537   5                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_CombinationUnlockModeOpened);
4538   5                    Hardware_DelayMs(100);
4539   5                  }
4540   4                }
4541   3                else if ((gui_keycode == KEY_ASTERISK))
4542   3                {
4543   4                  DEF_ButtonPress_Voice;
4544   4                  Hardware_DelayMs(100);
4545   4                  UnlockingModeMgr.Status = UserConfirmedUnlockingMode;
4546   4                }
4547   3              }
4548   2            break;
4549   2      
4550   2            
4551   2            case SCREEN_ContinueOpenSetting:
4552   2            
4553   2                if ( gui_keycode == KEY_ONE )
4554   2                {
4555   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bFALSE )
4556   3                  {
4557   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bTRUE;
4558   4                    GUI_MotorContinueOpen();
4559   4                  }
4560   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeOpened);
4561   3                  Hardware_DelayMs(100);
4562   3                  GoToSystemConfigMenu();
4563   3                }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 75  

4564   2                else if ( gui_keycode == KEY_TWO )
4565   2                {
4566   3                  if ( UserIdentifyResultMgr.FlagContinuedOpenEnabled == bTRUE )
4567   3                  {
4568   4                    UserIdentifyResultMgr.FlagContinuedOpenEnabled = bFALSE;
4569   4                    MotorMgr.CWTimer = 0;
4570   4                    MotorMgr.CWWAITTimer =  0;  
4571   4                    MotorMgr.CCWTimer = Def_MotorCCWTime+Hardware_MotorDriverTimeCompasention();
4572   4                    MotorMgr.CCWWAITTimer =  Def_MotorCCWWAITTime;  
4573   4                    MotorMgr.MotorStatus = CCW; 
4574   4                    MotorMgr.CCWSoftStart = bTRUE;
4575   4                  }
4576   3                  PLAY_VOICE_MULTISEGMENTS(VoiceStr_NormallyOpenModeClosed);
4577   3                  Hardware_DelayMs(100);
4578   3                  GoToSystemConfigMenu();
4579   3                }
4580   2                else if ( gui_keycode == KEY_ASTERISK )
4581   2                {
4582   3                  DEF_ButtonPress_Voice;
4583   3                  Hardware_DelayMs(100);
4584   3                  GoToSystemConfigMenu();
4585   3                }
4586   2              break;
4587   2                
4588   2            case SCREEN_PickAlarmEnableSetting:
4589   2            
4590   2                if ( PickAlarmEnableMgr.Status == WaitForPickAlarmEnableSettingUserConfirm )
4591   2                {
4592   3                  if ( gui_keycode == KEY_ONE )
4593   3                  {
4594   4                    //PickAlarmEnableMgr.Selection = YES;
4595   4                    PickAlarmEnableMgr.Enable = bTRUE;
4596   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4597   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmOpened);
4598   4                    Hardware_DelayMs(100);
4599   4          
4600   4                  }
4601   3                  else if ( gui_keycode == KEY_TWO )
4602   3                  {
4603   4                    //PickAlarmEnableMgr.Selection = NO;
4604   4                    PickAlarmEnableMgr.Enable = bFALSE;
4605   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4606   4                    PLAY_VOICE_MULTISEGMENTS(VoiceStr_PickAlarmClosed);
4607   4                    Hardware_DelayMs(100);
4608   4                    
4609   4                  }
4610   3                  else if ( gui_keycode == KEY_ASTERISK)
4611   3                  {
4612   4                    DEF_ButtonPress_Voice;
4613   4                    Hardware_DelayMs(100);
4614   4                    PickAlarmEnableMgr.Status = PickAlarmEnableSettingSuccess;
4615   4                  }
4616   3                }
4617   2                break;
4618   2      
4619   2            case SCREEN_SystemVersion:
4620   2      
4621   2                  if ((gui_keycode == KEY_POUNDSIGN )||( gui_keycode == KEY_ASTERISK))
4622   2                  {
4623   3                    PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
4624   3                    CardIdentifyMgr.Status = ReadingCardID;
4625   3                    FpIdentifyMgr.Status = FPMcmdStart;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 76  

4626   3                    CurrentScreen = SCREEN_Main;
4627   3                  }
4628   2                break;
4629   2                  
4630   2            case SCREEN_PickLockAlarm:
4631   2        
4632   2            if  ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4633   2            {
4634   3              if ( gui_keycode < 10 )   //from KEY0~~KEY9
4635   3              {
4636   4                if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyIdle )
4637   4                {
4638   5                  
4639   5                  PasscodeInputMgr.Point = 0x01;
4640   5                  PasscodeInputMgr.PasscodeLen = 16;
4641   5                  PasscodeInputMgr.Status = PasscodeInputStart;
4642   5                  PasscodeInputMgr.InputBuff[0] = gui_keycode;
4643   5                  for (i=1;i<PasscodeInputMgr.PasscodeLen;i++)
4644   5                  {
4645   6                    PasscodeInputMgr.InputBuff[i]=0xff;
4646   6                  }
4647   5                  
4648   5                  PasscodeUserIdentifyMgr.Status = PasscodeIdentifyStart;
4649   5                  //DEF_ButtonPress_Voice;
4650   5                }
4651   4               }
4652   3              else if ( gui_keycode == KEY_ASTERISK )
4653   3              {
4654   4              }
4655   3            }
4656   2            else if ( gui_keycode != KEY_NONE )   //from KEY0~~KEY9
4657   2            {
4658   3              if ( PasscodeUserIdentifyMgr.Status == PasscodeIdentifyPasscodeInput )
4659   3              {
4660   4                //DEF_ButtonPress_Voice;
4661   4                //PasscodeUserIdentifyMgr.TimeCnt = 240;  //
4662   4                GUI_PasscodeInputButtonMonitor(gui_keycode);
4663   4              }
4664   3            }
4665   2            
4666   2            break;
4667   2      
4668   2            case SCREEN_SystemLocked:
4669   2              
4670   2              if ( gui_keycode != KEY_NONE )  
4671   2              {
4672   3                PLAY_VOICE_ONESEGMENT(VOICE_SystemLocked);
4673   3                Hardware_DelayMs(100);
4674   3              }
4675   2            break;
4676   2      
4677   2            case SCREEN_CheckEventLogBySequence:
4678   2              
4679   2              #ifdef Function_EventLog
                      if ( CheckEventLogBySequenceMgr.Status == VoiceReportEventLogWithSequence )
                      {
                        if ( gui_keycode == KEY_TWO )
                        { 
                          if  ( CheckEventLogBySequenceMgr.OffsetEventLogNum > 0 )
                          {
                            DEF_ButtonPress_Voice;
                            CheckEventLogBySequenceMgr.OffsetEventLogNum--;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 77  

              
                            if ( LogMgr.DisplayPoint < (DEF_MaxRecordedLogID-1)){
                              LogMgr.DisplayPoint++;
                            }
                            else{
                              LogMgr.DisplayPoint = 0;
                            }
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if ( gui_keycode == KEY_EIGHT )
                        { 
                          if ( (CheckEventLogBySequenceMgr.OffsetEventLogNum+1) < CheckEventLogBySequenceMgr.MatchedEventLogNu
             -m )
                          {
                            DEF_ButtonPress_Voice;
                            if ( LogMgr.DisplayPoint > 0 )
                            {
                              LogMgr.DisplayPoint--;
                            }
                            else if( LogMgr.DisplayPoint == 0 )
                            {
                              if ( JudgeLogSaved(DEF_MaxRecordedLogID-1) == S_SUCCESS )
                              {
                                LogMgr.DisplayPoint = DEF_MaxRecordedLogID-1;
                              }
                            }
                            CheckEventLogBySequenceMgr.OffsetEventLogNum++;
                          }
                          else
                          {
                            DEF_Fail_Beep;
                          }
                        }
                        else if (gui_keycode == KEY_ASTERISK)
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
                          GotoLogMenu();
                        }
                      }
                      #endif
4732   2      
4733   2            break;
4734   2      
4735   2            case SCREEN_DeleteEventLog:
4736   2              
4737   2              #ifdef Function_EventLog
                      if ( LogDeleteMgr.Status == WaitforLogDeleteCofirm )
                      {
                        if ( gui_keycode == KEY_POUNDSIGN )
                        {
                          DEF_ButtonPress_Voice;
                          LogDeleteMgr.Status = LogDeleting;
                        }
                        else if ( gui_keycode == KEY_ASTERISK )
                        {
                          DEF_ButtonPress_Voice;
                          Hardware_DelayMs(100);
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 78  

                          GotoLogMenu();
                        }
                      }
                      #endif
4753   2      
4754   2            break;
4755   2              
4756   2          default:
4757   2      
4758   2            break;
4759   2            
4760   2        }
4761   1        
4762   1      }
4763          
4764          /*******************************************************/
4765          /*******************************************************/
4766          void GUI_Update_Screen(void)//GUI更新屏幕
4767          {
4768   1        if (( CurrentScreen !=LastScreen )||(GUI_Flag_RefreshLCD == bTRUE))
4769   1        {
4770   2          #ifdef Function_ScreenDisplay
                  Clear_Screen();
                  GUI_Flag_RefreshLCD = bFALSE;
                  #endif
4774   2          LastScreen =  CurrentScreen;
4775   2        }
4776   1        switch (CurrentScreen)
4777   1        {
4778   2          case SCREEN_Initialization:
4779   2      
4780   2            //SET_ALLKEYLED_OFF();
4781   2            ShowInitialization();
4782   2            break;
4783   2          
4784   2          case SCREEN_LowBattery:
4785   2      
4786   2            //SET_ALLKEYLED_OFF();
4787   2            ShowLowBattery();
4788   2            break;
4789   2      
4790   2          case SCREEN_PickLockAlarm:
4791   2      
4792   2            //SET_ALLKEYLED_ON();
4793   2            ShowPickLockAlarm();
4794   2            break;
4795   2      
4796   2          case SCREEN_Main:
4797   2            
4798   2            if (SystemPowerMgr.SleepDelayTimerCnt == 0x0000)
4799   2            {
4800   3              //SET_ALLKEYLED_OFF();
4801   3            }
4802   2            else
4803   2            {
4804   3              //SET_ALLKEYLED_ON();
4805   3              GUI_UpadteMain();
4806   3            }
4807   2            break;
4808   2      
4809   2          case SCREEN_IdentifySuccess:
4810   2            
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 79  

4811   2            //SET_ALLKEYLED_OFF();
4812   2            //KEYLED_WATERLIGHT_Task();
4813   2            ShowIdentifySuccessPage();
4814   2            break;
4815   2          
4816   2          case SCREEN_IdentifyFail:
4817   2              
4818   2            //KEYLED_IdentifyFail_Task();
4819   2            ShowIdentifyFailPage();
4820   2            break;
4821   2          
4822   2          case SCREEN_DoorBell:
4823   2            
4824   2            ShowDoorBell();
4825   2            break;
4826   2          
4827   2          case SCREEN_MainMenu:
4828   2      
4829   2            //SET_1234A_LED_ON();
4830   2            ShowMainMenu();
4831   2            break;
4832   2            
4833   2          case SCREEN_EventLogMenu:
4834   2            
4835   2            //SET_12A_LED_ON();
4836   2            #ifdef Function_EventLog
                    ShowLogMenu();
                    #endif
4839   2            break;
4840   2            
4841   2          case SCREEN_FpMenu:
4842   2            
4843   2            //SET_123A_LED_ON();
4844   2            ShowFpMenu();
4845   2            break;
4846   2          
4847   2          case SCREEN_CardUserMenu:
4848   2      
4849   2            //SET_12A_LED_ON();
4850   2            ShowCardUserMenu();
4851   2            break;
4852   2          
4853   2          case SCREEN_PasscodeMenu:
4854   2            
4855   2            //SET_123A_LED_ON();
4856   2            ShowPasscodeMenu();
4857   2            break;
4858   2          
4859   2          case SCREEN_SystemConfigMenu:
4860   2      
4861   2            //SET_123456A_LED_ON();
4862   2            ShowSystemConfigMenu();
4863   2            break;
4864   2          
4865   2          #ifdef Function_TuyaWifi
                  case SCREEN_NetWorkLink:
                    
                    ShowNetWorkConnecting();
                    break;
                  #endif
4871   2          
4872   2          case SCREEN_RegisterUserFp:
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 80  

4873   2            
4874   2            //SET_ALLKEYLED_OFF();
4875   2            ShowRegisterUserFp();
4876   2            break;
4877   2          
4878   2        #ifdef Function_Enable_ID_Del
4879   2          case SCREEN_DeleteUserFp:
4880   2            //SET_ALLKEYLED_ON();
4881   2            ShowDeleteUserFp();
4882   2            break;
4883   2        #endif
4884   2          
4885   2          case SCREEN_DeleteAllUserFp:
4886   2            
4887   2            //SET_AP_LED_ON();
4888   2            ShowDeleteAllUserFp();
4889   2            break;
4890   2          
4891   2          case SCREEN_RegisterMasterFp:
4892   2            
4893   2            //SET_ALLKEYLED_OFF();
4894   2            ShowRegisterMasterFp();
4895   2            break;
4896   2            
4897   2          case SCREEN_DeleteMasterFp:
4898   2            
4899   2            //SET_ALLKEYLED_ON();
4900   2            //ShowDeleteMasterFp();
4901   2            break;
4902   2      /*
4903   2          case SCREEN_DeleteAllMasterFp:
4904   2            SET_LRandConfirmLED_ON();
4905   2            ShowDeleteAllMasterFp();
4906   2      
4907   2            break;
4908   2      */
4909   2          case SCREEN_RegisterCardUser:
4910   2            //KEYLED_KEY5_Flash();
4911   2            ShowRegisterCardUser();
4912   2      
4913   2            break;
4914   2            
4915   2        #ifdef Function_Enable_ID_Del
4916   2          case SCREEN_DeleteCardUser:
4917   2            //SET_ALLKEYLED_ON();
4918   2            ShowDeleteCardUser();
4919   2            break;
4920   2        #endif
4921   2      
4922   2          case SCREEN_DeleteAllCardUser:
4923   2            //SET_AP_LED_ON();
4924   2            ShowDeleteAllCardUser();
4925   2      
4926   2            break;
4927   2      
4928   2          case SCREEN_RegisterPasscodeUser:
4929   2            //SET_ALLKEYLED_ON();
4930   2            ShowRegisterPasscodeUser();
4931   2      
4932   2            break;
4933   2          
4934   2        #ifdef Function_Enable_ID_Del
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 81  

4935   2          case SCREEN_DeletePasscodeUser:
4936   2            //SET_ALLKEYLED_ON();
4937   2            ShowDeletePasscodeUser();
4938   2            break;
4939   2        #endif
4940   2          
4941   2          case SCREEN_DeleteAllPasscodeUser:
4942   2            //SET_AP_LED_ON();
4943   2            ShowDeleteAllPasscodeUser();
4944   2      
4945   2            break;
4946   2      
4947   2      
4948   2          case SCREEN_TimeSetting:
4949   2      
4950   2            //ShowTimeSetting();
4951   2      
4952   2            break;
4953   2      /*
4954   2          case SCREEN_ManagerPasscodeModify:
4955   2          //  SET_ALLKEYLED_ON();
4956   2          //  ShowModifyManagerPasscode();
4957   2      
4958   2            break;
4959   2      */      
4960   2          case SCREEN_RestoreFactoryDefault:
4961   2            //SET_AP_LED_ON();
4962   2            ShowRestoreFactoryDefault();
4963   2      
4964   2            break;
4965   2          
4966   2          #ifdef Function_VoiceEnabledEnglish
                  case SCREEN_LanguageSetting:
                    //SET_12A_LED_ON();
                    ShowLanguageSetting();
              
                    break;
                  #endif
4973   2            
4974   2          case SCREEN_VolumeSetting:
4975   2            //SET_12A_LED_ON();
4976   2            ShowVolumeSetting();
4977   2      
4978   2            break;
4979   2      
4980   2          case SCREEN_MemoryCheck:
4981   2            //SET_UDandConfirmLED_ON();
4982   2            //ShowMemoryUsage();
4983   2      
4984   2            break;
4985   2            
4986   2          case SCREEN_ManagerIdentify:
4987   2      
4988   2            //SET_ALLKEYLED_ON();
4989   2            ShowManagerIdentify();
4990   2      
4991   2            break;
4992   2      
4993   2          case SCREEN_UnlockingModeSetting:
4994   2            //SET_12A_LED_ON();
4995   2            ShowUnlockingModeSetting();
4996   2          
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 82  

4997   2            break;
4998   2            
4999   2          case SCREEN_ContinueOpenSetting:  
5000   2            //SET_12A_LED_ON();
5001   2            ShowContinuedOpenModeSetting();
5002   2            break;
5003   2            
5004   2          case SCREEN_PickAlarmEnableSetting: 
5005   2            //SET_12A_LED_ON();
5006   2            ShowPickAlarmEnableSetting();
5007   2            break;
5008   2            
5009   2          case SCREEN_SystemVersion:  
5010   2            //SET_AP_LED_ON();
5011   2            GUI_Update_Version();
5012   2            break;
5013   2      
5014   2      //    case SCREEN_SelfTest:
5015   2      
5016   2            //SET_ALLKEYLED_ON();
5017   2            //ShowSelfTest();
5018   2      //      break;
5019   2          
5020   2          case SCREEN_AgingTest:
5021   2      
5022   2            //KEYLED_WATERLIGHT_Task();
5023   2            ShowAgingTest();
5024   2            break;
5025   2      
5026   2          case SCREEN_SystemLocked:
5027   2      
5028   2            //KEYLED_ASTERISK_Flash();
5029   2            ShowSystemLocked();
5030   2            break;
5031   2            
5032   2          case SCREEN_CheckEventLogBySequence:
5033   2            #ifdef Function_EventLog
                    ShowEventLogBySequence();
                    #endif
5036   2            break;
5037   2      
5038   2          case SCREEN_DeleteEventLog:
5039   2                  
5040   2          #ifdef Function_EventLog
                    ShowClearEventLog();
                  #endif
5043   2            break;
5044   2          
5045   2          default:
5046   2            break;
5047   2        }
5048   1      
5049   1      }
5050          /*******************************************************/
5051          /*******************************************************/
5052          /*******************************************************/
5053          void GUI_Init(void)//
5054          {
5055   1        //uint8_t i;
5056   1      
5057   1        GUI_ToggleFlag_05s=0x00;
5058   1        GUI_ToggleFlag_1s=0x01;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 83  

5059   1        FpIdentifyMgr.BreathingLED=0x00;
5060   1      
5061   1        GUI_Flag_RefreshLCD = bFALSE;
5062   1      
5063   1        FpIdentifyMgr.Status = FPMcmdStart;
5064   1        CardIdentifyMgr.Status = ReadingCardID;
5065   1        TimeSettingMgr.Status = SetYearMajor;
5066   1        BatteryMgr.PostLowBattery = bTRUE;
5067   1        
5068   1        //VoiceMgr.Enable = bTRUE;    //default Enable Voice
5069   1      
5070   1        Key_Init();
5071   1        
5072   1        init_Managerdata();
5073   1      
5074   1        ReadCardUserMemoryFromEEPROM();
5075   1      
5076   1        ReadPasscodeUserMemoryFromEEPROM();
5077   1      
5078   1      //  SafetyMonitorMgr.IdentifyFailedTimes = 0x00;
5079   1      //  SafetyMonitorMgr.SystemLocked = bFALSE;
5080   1      
5081   1        UserIdentifyResultMgr.CardIdentifyStatus = S_FAIL;
5082   1        UserIdentifyResultMgr.FPIdentifyStatus = S_FAIL;
5083   1        UserIdentifyResultMgr.PasscodeIdentifyStatus = S_FAIL;
5084   1        UserIdentifyResultMgr.VoiceDelay = 0;
5085   1      
5086   1        g_ASTERISK_PressedOnMainScreen = bFALSE;
5087   1              
5088   1        DEBUG_MARK;
5089   1          
5090   1        #ifdef Function_USE_Internal_RTC
                SystemTime = UTCToSystemtime(G_SystemUTCTime);
                #elif defined Function_USE_External_RTC
                PCF8563_ReadTime();
                #endif
5095   1        
5096   1        #ifdef Function_ScreenDisplay
                Display_Init();
                #endif
5099   1      
5100   1      }
5101          
5102          /*******************************************************/
5103          /*******************************************************/
5104          /*******************************************************/
5105          void GUI_Task(void)//
5106          {
5107   1        //uint8_t *Point;
5108   1        uint8_t i,j;
5109   1        if (++GUI_TimeCnt > 63)
5110   1        {
5111   2          GUI_ToggleFlag_1s^=0x01;
5112   2          GUI_TimeCnt =0;
5113   2          if ((PINMACRO_ONBOARD_BUTTON_STATUS==0)&&(CurrentScreen == SCREEN_Main))
5114   2          {
5115   3            if(VoiceMgr.Enable == bFALSE)
5116   3            {
5117   4              VoiceMgr.Enable = bTRUE;
5118   4              DEF_ButtonPress_Voice;
5119   4              VoiceMgr.Enable = bFALSE;
5120   4            }
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 84  

5121   3            else
5122   3            {
5123   4              DEF_ButtonPress_Voice;
5124   4            }
5125   3            RefreshSystemSleepTime();
5126   3          }
5127   2          #ifdef Function_FPMBreathingLed
5128   2          if( FpIdentifyMgr.BreathingLED > 0 )
5129   2          {
5130   3            FpIdentifyMgr.BreathingLED += 1;
5131   3            if( FpIdentifyMgr.BreathingLED == 4 )
5132   3            {
5133   4              FpIdentifyMgr.BreathingLED = 0;
5134   4              SetFPMbreathingLed(FPMbreathingLed_Bule);
5135   4            }
5136   3          }
5137   2          #endif
5138   2        }
5139   1        
5140   1        if ( GUI_TimeCnt %32 == 0x00 ){ 
5141   2          GUI_ToggleFlag_05s^= 0x01;
5142   2        }
5143   1        
5144   1        if ( CardIdentifyMgr.CardDetectIntervalTimeCnt >  0 )
5145   1        {
5146   2          CardIdentifyMgr.CardDetectIntervalTimeCnt --;
5147   2        }
5148   1        if ( LockBrand.BrandChangeTimeDelay > 0 )
5149   1        {
5150   2           LockBrand.BrandChangeTimeDelay--;
5151   2        }
5152   1      
5153   1        if ( PINMACRO_PICKLOCK_STATUS == 1 )
5154   1        {
5155   2          j=0;
5156   2          for (i=0;i<100;i++)
5157   2          {
5158   3            Hardware_DelayX5us(2);
5159   3            if ( PINMACRO_PICKLOCK_STATUS == 1 )
5160   3            {
5161   4              j++;
5162   4            }
5163   3          }
5164   2          if ((j>90)&&(AntiPryingMgr.AntiPryingSignalRelease == bTRUE))
5165   2          {
5166   3            AntiPryingMgr.AntiPryingTrigger = bTRUE;
5167   3          }
5168   2        }
5169   1        else
5170   1        {
5171   2          j=0;
5172   2          for (i=0;i<10;i++)
5173   2          {
5174   3            Hardware_DelayX5us(1);
5175   3            if ( PINMACRO_PICKLOCK_STATUS == 0 )
5176   3            {
5177   4              j++;
5178   4            }
5179   3          }
5180   2          if (j>8)
5181   2          {
5182   3            AntiPryingMgr.AntiPryingSignalRelease = bTRUE;
C51 COMPILER V9.60.0.0   GUI                                                               05/23/2023 14:43:20 PAGE 85  

5183   3          }
5184   2        }
5185   1        
5186   1        if (  ( AntiPryingMgr.AntiPryingTrigger == bTRUE )
5187   1            &&( CurrentScreen != SCREEN_PickLockAlarm )
5188   1            &&( CurrentScreen != SCREEN_Initialization )
5189   1            &&( CurrentScreen != SCREEN_PickAlarmEnableSetting )
5190   1            &&( CurrentScreen != SCREEN_RestoreFactoryDefault )
5191   1            &&( PickAlarmEnableMgr.Enable == bTRUE ))
5192   1        {
5193   2          CurrentScreen = SCREEN_PickLockAlarm;
5194   2          AntiPryingMgr.TimeCnt = DEF_AntiPryingTime;
5195   2          PasscodeUserIdentifyMgr.Status = PasscodeIdentifyIdle;
5196   2          FpIdentifyMgr.Status = FPMcmdStart;
5197   2          CardIdentifyMgr.Status = ReadingCardID;
5198   2          Hardware_DelayMs(20);   //wait for voice data transfer completed
5199   2          #ifdef Function_FPMBreathingLed
5200   2          SetFPMbreathingLed(FPMbreathingLed_Off);
5201   2          #endif
5202   2        }
5203   1        
5204   1        GUI_Button_Monitor();
5205   1        
5206   1        GUI_Update_Screen();
5207   1        
5208   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9571    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =     45      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
